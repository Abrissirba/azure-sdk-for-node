/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Defines a health policy used to evaluate the health of an application or one
 * of its children entities.
 *
 *
 */
class ApplicationHealthPolicy {
  /**
   * Create a ApplicationHealthPolicy.
   * @member {object} [defaultServiceTypeHealthPolicy] The health policy used
   * by default to evaluate the health of a service type.
   * @member {number}
   * [defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices] The maximum
   * percentage of services allowed to be unhealthy before your application is
   * considered in error.
   * @member {object} [serviceTypeHealthPolicies] The map with service type
   * health policy per service type name. The map is empty by default.
   * @member {boolean} [considerWarningAsError] Indicates whether warnings are
   * treated with the same severity as errors. Default value: false .
   * @member {number} [maxPercentUnhealthyDeployedApplications] The maximum
   * allowed percentage of unhealthy deployed applications. Allowed values are
   * Byte values from zero to 100.
   * The percentage represents the maximum tolerated percentage of deployed
   * applications that can be unhealthy before the application is considered in
   * error.
   * This is calculated by dividing the number of unhealthy deployed
   * applications over the number of nodes where the application is currently
   * deployed on in the cluster.
   * The computation rounds up to tolerate one failure on small numbers of
   * nodes. Default percentage is zero.
   * . Default value: 0 .
   * @member {object} [defaultServiceTypeHealthPolicy1] The health policy used
   * by default to evaluate the health of a service type.
   * @member {number}
   * [defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices] The maximum
   * percentage of services allowed to be unhealthy before your application is
   * considered in error.
   * @member {object} [serviceTypeHealthPolicyMap] The map with service type
   * health policy per service type name. The map is empty by default.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ApplicationHealthPolicy
   *
   * @returns {object} metadata of ApplicationHealthPolicy
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ApplicationHealthPolicy',
      type: {
        name: 'Composite',
        className: 'ApplicationHealthPolicy',
        modelProperties: {
          defaultServiceTypeHealthPolicy: {
            required: false,
            serializedName: 'defaultServiceTypeHealthPolicy',
            type: {
              name: 'Composite',
              className: 'ServiceTypeHealthPolicy'
            }
          },
          serviceTypeHealthPolicies: {
            required: false,
            serializedName: 'serviceTypeHealthPolicies',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'ServiceTypeHealthPolicyElementType',
                  type: {
                    name: 'Composite',
                    className: 'ServiceTypeHealthPolicy'
                  }
              }
            }
          },
          considerWarningAsError: {
            required: false,
            serializedName: 'ConsiderWarningAsError',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          maxPercentUnhealthyDeployedApplications: {
            required: false,
            serializedName: 'MaxPercentUnhealthyDeployedApplications',
            defaultValue: 0,
            type: {
              name: 'Number'
            }
          },
          defaultServiceTypeHealthPolicy1: {
            required: false,
            serializedName: 'DefaultServiceTypeHealthPolicy',
            type: {
              name: 'Composite',
              className: 'ServiceTypeHealthPolicy'
            }
          },
          serviceTypeHealthPolicyMap: {
            required: false,
            serializedName: 'ServiceTypeHealthPolicyMap',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'ServiceTypeHealthPolicyElementType',
                  type: {
                    name: 'Composite',
                    className: 'ServiceTypeHealthPolicy'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ApplicationHealthPolicy;
