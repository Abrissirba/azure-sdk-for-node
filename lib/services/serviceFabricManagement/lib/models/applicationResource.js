/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The application resource.
 *
 * @extends models['ProxyResource']
 */
class ApplicationResource extends models['ProxyResource'] {
  /**
   * Create a ApplicationResource.
   * @member {string} [typeVersion] The version of the application type as
   * defined in the application manifest.
   * @member {array} [parameters] List of application parameters with
   * overridden values from their default values specified in the application
   * manifest.
   * @member {object} [upgradePolicy] Describes the policy for a monitored
   * application upgrade.
   * @member {number} [upgradePolicy.upgradeReplicaSetCheckTimeout] The maximum
   * amount of time to block processing of an upgrade domain and prevent loss
   * of availability when there are unexpected issues. When this timeout
   * expires, processing of the upgrade domain will proceed regardless of
   * availability loss issues. The timeout is reset at the start of each
   * upgrade domain. Valid values are between 0 and 42949672925 inclusive.
   * (unsigned 32-bit integer).
   * @member {boolean} [upgradePolicy.forceRestart] If true, then processes are
   * forcefully restarted during upgrade even when the code version has not
   * changed (the upgrade only changes configuration or data).
   * @member {object} [upgradePolicy.rollingUpgradeMonitoringPolicy] The policy
   * used for monitoring the application upgrade
   * @member {string}
   * [upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration] The
   * amount of time to wait after completing an upgrade domain before applying
   * health policies. It is first interpreted as a string representing an ISO
   * 8601 duration. If that fails, then it is interpreted as a number
   * representing the total number of milliseconds.
   * @member {string}
   * [upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
   * The amount of time that the application or cluster must remain healthy
   * before the upgrade proceeds to the next upgrade domain. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   * @member {string}
   * [upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout] The
   * amount of time to retry health evaluation when the application or cluster
   * is unhealthy before FailureAction is executed. It is first interpreted as
   * a string representing an ISO 8601 duration. If that fails, then it is
   * interpreted as a number representing the total number of milliseconds.
   * @member {string}
   * [upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The amount
   * of time the overall upgrade has to complete before FailureAction is
   * executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing
   * the total number of milliseconds.
   * @member {string}
   * [upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout] The
   * amount of time each upgrade domain has to complete before FailureAction is
   * executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing
   * the total number of milliseconds.
   * @member {object} [upgradePolicy.applicationHealthPolicy] Defines a health
   * policy used to evaluate the health of an application or one of its
   * children entities.
   * @member {object}
   * [upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy] The
   * health policy used by default to evaluate the health of a service type.
   * @member {number}
   * [upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
   * The maximum percentage of services allowed to be unhealthy before your
   * application is considered in error.
   * @member {array}
   * [upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies] The map
   * with service type health policy per service type name. The map is empty by
   * default.
   * @member {boolean}
   * [upgradePolicy.applicationHealthPolicy.considerWarningAsError] Indicates
   * whether warnings are treated with the same severity as errors.
   * @member {number}
   * [upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
   * The maximum allowed percentage of unhealthy deployed applications. Allowed
   * values are Byte values from zero to 100.
   * The percentage represents the maximum tolerated percentage of deployed
   * applications that can be unhealthy before the application is considered in
   * error.
   * This is calculated by dividing the number of unhealthy deployed
   * applications over the number of nodes where the application is currently
   * deployed on in the cluster.
   * The computation rounds up to tolerate one failure on small numbers of
   * nodes. Default percentage is zero.
   * @member {object}
   * [upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
   * The health policy used by default to evaluate the health of a service
   * type.
   * @member {number}
   * [upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
   * The maximum percentage of services allowed to be unhealthy before your
   * application is considered in error.
   * @member {array}
   * [upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap] The map
   * with service type health policy per service type name. The map is empty by
   * default.
   * @member {number} [minimumNodes] The minimum number of nodes where Service
   * Fabric will reserve capacity for this application. Note that this does not
   * mean that the services of this application will be placed on all of those
   * nodes. If this property is set to zero, no capacity will be reserved. The
   * value of this property cannot be more than the value of the MaximumNodes
   * property.
   * @member {number} [maximumNodes] The maximum number of nodes where Service
   * Fabric will reserve capacity for this application. Note that this does not
   * mean that the services of this application will be placed on all of those
   * nodes. By default, the value of this property is zero and it means that
   * the services can be placed on any node. Default value: 0 .
   * @member {boolean} [removeApplicationCapacity] Remove the current
   * application capacity settings.
   * @member {array} [metrics] List of application capacity metric description.
   * @member {string} [provisioningState] The current deployment or
   * provisioning state, which only appears in the response
   * @member {string} [typeName] The application type name as defined in the
   * application manifest.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ApplicationResource
   *
   * @returns {object} metadata of ApplicationResource
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ApplicationResource',
      type: {
        name: 'Composite',
        className: 'ApplicationResource',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          typeVersion: {
            required: false,
            serializedName: 'properties.typeVersion',
            type: {
              name: 'String'
            }
          },
          parameters: {
            required: false,
            serializedName: 'properties.parameters',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ApplicationParameterElementType',
                  type: {
                    name: 'Composite',
                    className: 'ApplicationParameter'
                  }
              }
            }
          },
          upgradePolicy: {
            required: false,
            serializedName: 'properties.upgradePolicy',
            type: {
              name: 'Composite',
              className: 'ApplicationUpgradePolicy'
            }
          },
          minimumNodes: {
            required: false,
            serializedName: 'properties.minimumNodes',
            constraints: {
              InclusiveMinimum: 0
            },
            type: {
              name: 'Number'
            }
          },
          maximumNodes: {
            required: false,
            serializedName: 'properties.maximumNodes',
            defaultValue: 0,
            constraints: {
              InclusiveMinimum: 0
            },
            type: {
              name: 'Number'
            }
          },
          removeApplicationCapacity: {
            required: false,
            serializedName: 'properties.removeApplicationCapacity',
            type: {
              name: 'Boolean'
            }
          },
          metrics: {
            required: false,
            serializedName: 'properties.metrics',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ApplicationMetricDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ApplicationMetricDescription'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          typeName: {
            required: false,
            serializedName: 'properties.typeName',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ApplicationResource;
