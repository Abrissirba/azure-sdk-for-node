/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The policy used for monitoring the application upgrade
 *
 */
class RollingUpgradeMonitoringPolicy {
  /**
   * Create a RollingUpgradeMonitoringPolicy.
   * @member {string} [healthCheckWaitDuration] The amount of time to wait
   * after completing an upgrade domain before applying health policies. It is
   * first interpreted as a string representing an ISO 8601 duration. If that
   * fails, then it is interpreted as a number representing the total number of
   * milliseconds.
   * @member {string} [healthCheckStableDuration] The amount of time that the
   * application or cluster must remain healthy before the upgrade proceeds to
   * the next upgrade domain. It is first interpreted as a string representing
   * an ISO 8601 duration. If that fails, then it is interpreted as a number
   * representing the total number of milliseconds.
   * @member {string} [healthCheckRetryTimeout] The amount of time to retry
   * health evaluation when the application or cluster is unhealthy before
   * FailureAction is executed. It is first interpreted as a string
   * representing an ISO 8601 duration. If that fails, then it is interpreted
   * as a number representing the total number of milliseconds.
   * @member {string} [upgradeTimeout] The amount of time the overall upgrade
   * has to complete before FailureAction is executed. It is first interpreted
   * as a string representing an ISO 8601 duration. If that fails, then it is
   * interpreted as a number representing the total number of milliseconds.
   * @member {string} [upgradeDomainTimeout] The amount of time each upgrade
   * domain has to complete before FailureAction is executed. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   */
  constructor() {
  }

  /**
   * Defines the metadata of RollingUpgradeMonitoringPolicy
   *
   * @returns {object} metadata of RollingUpgradeMonitoringPolicy
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'RollingUpgradeMonitoringPolicy',
      type: {
        name: 'Composite',
        className: 'RollingUpgradeMonitoringPolicy',
        modelProperties: {
          healthCheckWaitDuration: {
            required: false,
            serializedName: 'healthCheckWaitDuration',
            type: {
              name: 'String'
            }
          },
          healthCheckStableDuration: {
            required: false,
            serializedName: 'healthCheckStableDuration',
            type: {
              name: 'String'
            }
          },
          healthCheckRetryTimeout: {
            required: false,
            serializedName: 'healthCheckRetryTimeout',
            type: {
              name: 'String'
            }
          },
          upgradeTimeout: {
            required: false,
            serializedName: 'upgradeTimeout',
            type: {
              name: 'String'
            }
          },
          upgradeDomainTimeout: {
            required: false,
            serializedName: 'upgradeDomainTimeout',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = RollingUpgradeMonitoringPolicy;
