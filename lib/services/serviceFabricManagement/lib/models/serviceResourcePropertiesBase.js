/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The common service resource properties.
 *
 */
class ServiceResourcePropertiesBase {
  /**
   * Create a ServiceResourcePropertiesBase.
   * @member {string} [placementConstraints] The placement constraints as a
   * string. Placement constraints are boolean expressions on node properties
   * and allow for restricting a service to particular nodes based on the
   * service requirements. For example, to place a service on nodes where
   * NodeType is blue specify the following: "NodeColor == blue)".
   * @member {array} [correlationScheme] A list that describes the correlation
   * of the service with other services.
   * @member {array} [serviceLoadMetrics] The service load metrics is given as
   * an array of ServiceLoadMetricDescription objects.
   * @member {array} [servicePlacementPolicies] A list that describes the
   * correlation of the service with other services.
   * @member {string} [defaultMoveCost] Specifies the move cost for the
   * service. Possible values include: 'Zero', 'Low', 'Medium', 'High'
   */
  constructor() {
  }

  /**
   * Defines the metadata of ServiceResourcePropertiesBase
   *
   * @returns {object} metadata of ServiceResourcePropertiesBase
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ServiceResourcePropertiesBase',
      type: {
        name: 'Composite',
        className: 'ServiceResourcePropertiesBase',
        modelProperties: {
          placementConstraints: {
            required: false,
            serializedName: 'placementConstraints',
            type: {
              name: 'String'
            }
          },
          correlationScheme: {
            required: false,
            serializedName: 'correlationScheme',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServiceCorrelationDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ServiceCorrelationDescription'
                  }
              }
            }
          },
          serviceLoadMetrics: {
            required: false,
            serializedName: 'serviceLoadMetrics',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServiceLoadMetricDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ServiceLoadMetricDescription'
                  }
              }
            }
          },
          servicePlacementPolicies: {
            required: false,
            serializedName: 'servicePlacementPolicies',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServicePlacementPolicyDescriptionElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'Type',
                      clientName: 'type'
                    },
                    uberParent: 'ServicePlacementPolicyDescription',
                    className: 'ServicePlacementPolicyDescription'
                  }
              }
            }
          },
          defaultMoveCost: {
            required: false,
            serializedName: 'defaultMoveCost',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ServiceResourcePropertiesBase;
