/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Describes the policy for a monitored application upgrade.
 *
 */
class ApplicationUpgradePolicy {
  /**
   * Create a ApplicationUpgradePolicy.
   * @member {number} [upgradeReplicaSetCheckTimeout] The maximum amount of
   * time to block processing of an upgrade domain and prevent loss of
   * availability when there are unexpected issues. When this timeout expires,
   * processing of the upgrade domain will proceed regardless of availability
   * loss issues. The timeout is reset at the start of each upgrade domain.
   * Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit
   * integer).
   * @member {boolean} [forceRestart] If true, then processes are forcefully
   * restarted during upgrade even when the code version has not changed (the
   * upgrade only changes configuration or data).
   * @member {object} [rollingUpgradeMonitoringPolicy] The policy used for
   * monitoring the application upgrade
   * @member {string} [rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
   * The amount of time to wait after completing an upgrade domain before
   * applying health policies. It is first interpreted as a string representing
   * an ISO 8601 duration. If that fails, then it is interpreted as a number
   * representing the total number of milliseconds.
   * @member {string}
   * [rollingUpgradeMonitoringPolicy.healthCheckStableDuration] The amount of
   * time that the application or cluster must remain healthy before the
   * upgrade proceeds to the next upgrade domain. It is first interpreted as a
   * string representing an ISO 8601 duration. If that fails, then it is
   * interpreted as a number representing the total number of milliseconds.
   * @member {string} [rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
   * The amount of time to retry health evaluation when the application or
   * cluster is unhealthy before FailureAction is executed. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   * @member {string} [rollingUpgradeMonitoringPolicy.upgradeTimeout] The
   * amount of time the overall upgrade has to complete before FailureAction is
   * executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing
   * the total number of milliseconds.
   * @member {string} [rollingUpgradeMonitoringPolicy.upgradeDomainTimeout] The
   * amount of time each upgrade domain has to complete before FailureAction is
   * executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing
   * the total number of milliseconds.
   * @member {object} [applicationHealthPolicy] Defines a health policy used to
   * evaluate the health of an application or one of its children entities.
   * @member {object} [applicationHealthPolicy.defaultServiceTypeHealthPolicy]
   * The health policy used by default to evaluate the health of a service
   * type.
   * @member {number}
   * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
   * The maximum percentage of services allowed to be unhealthy before your
   * application is considered in error.
   * @member {array} [applicationHealthPolicy.serviceTypeHealthPolicies] The
   * map with service type health policy per service type name. The map is
   * empty by default.
   * @member {boolean} [applicationHealthPolicy.considerWarningAsError]
   * Indicates whether warnings are treated with the same severity as errors.
   * @member {number}
   * [applicationHealthPolicy.maxPercentUnhealthyDeployedApplications] The
   * maximum allowed percentage of unhealthy deployed applications. Allowed
   * values are Byte values from zero to 100.
   * The percentage represents the maximum tolerated percentage of deployed
   * applications that can be unhealthy before the application is considered in
   * error.
   * This is calculated by dividing the number of unhealthy deployed
   * applications over the number of nodes where the application is currently
   * deployed on in the cluster.
   * The computation rounds up to tolerate one failure on small numbers of
   * nodes. Default percentage is zero.
   * @member {object} [applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
   * The health policy used by default to evaluate the health of a service
   * type.
   * @member {number}
   * [applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
   * The maximum percentage of services allowed to be unhealthy before your
   * application is considered in error.
   * @member {array} [applicationHealthPolicy.serviceTypeHealthPolicyMap] The
   * map with service type health policy per service type name. The map is
   * empty by default.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ApplicationUpgradePolicy
   *
   * @returns {object} metadata of ApplicationUpgradePolicy
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ApplicationUpgradePolicy',
      type: {
        name: 'Composite',
        className: 'ApplicationUpgradePolicy',
        modelProperties: {
          upgradeReplicaSetCheckTimeout: {
            required: false,
            serializedName: 'upgradeReplicaSetCheckTimeout',
            type: {
              name: 'Number'
            }
          },
          forceRestart: {
            required: false,
            serializedName: 'forceRestart',
            type: {
              name: 'Boolean'
            }
          },
          rollingUpgradeMonitoringPolicy: {
            required: false,
            serializedName: 'rollingUpgradeMonitoringPolicy',
            type: {
              name: 'Composite',
              className: 'RollingUpgradeMonitoringPolicy'
            }
          },
          applicationHealthPolicy: {
            required: false,
            serializedName: 'applicationHealthPolicy',
            type: {
              name: 'Composite',
              className: 'ApplicationHealthPolicy'
            }
          }
        }
      }
    };
  }
}

module.exports = ApplicationUpgradePolicy;
