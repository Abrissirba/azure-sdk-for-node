/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The service resource.
 *
 * @extends models['ProxyResource']
 */
class ServiceResource extends models['ProxyResource'] {
  /**
   * Create a ServiceResource.
   * @member {string} [placementConstraints] The placement constraints as a
   * string. Placement constraints are boolean expressions on node properties
   * and allow for restricting a service to particular nodes based on the
   * service requirements. For example, to place a service on nodes where
   * NodeType is blue specify the following: "NodeColor == blue)".
   * @member {array} [correlationScheme] A list that describes the correlation
   * of the service with other services.
   * @member {array} [serviceLoadMetrics] The service load metrics is given as
   * an array of ServiceLoadMetricDescription objects.
   * @member {array} [servicePlacementPolicies] A list that describes the
   * correlation of the service with other services.
   * @member {string} [defaultMoveCost] Specifies the move cost for the
   * service. Possible values include: 'Zero', 'Low', 'Medium', 'High'
   * @member {string} [provisioningState] The current deployment or
   * provisioning state, which only appears in the response
   * @member {string} [serviceTypeName] The name of the service type
   * @member {object} [partitionDescription] Describes how the service is
   * partitioned.
   * @member {string} [partitionDescription.partitionScheme] Polymorphic
   * Discriminator
   * @member {string} serviceKind Polymorphic Discriminator
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ServiceResource
   *
   * @returns {object} metadata of ServiceResource
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ServiceResource',
      type: {
        name: 'Composite',
        className: 'ServiceResource',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          placementConstraints: {
            required: false,
            serializedName: 'properties.placementConstraints',
            type: {
              name: 'String'
            }
          },
          correlationScheme: {
            required: false,
            serializedName: 'properties.correlationScheme',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServiceCorrelationDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ServiceCorrelationDescription'
                  }
              }
            }
          },
          serviceLoadMetrics: {
            required: false,
            serializedName: 'properties.serviceLoadMetrics',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServiceLoadMetricDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ServiceLoadMetricDescription'
                  }
              }
            }
          },
          servicePlacementPolicies: {
            required: false,
            serializedName: 'properties.servicePlacementPolicies',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServicePlacementPolicyDescriptionElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'Type',
                      clientName: 'type'
                    },
                    uberParent: 'ServicePlacementPolicyDescription',
                    className: 'ServicePlacementPolicyDescription'
                  }
              }
            }
          },
          defaultMoveCost: {
            required: false,
            serializedName: 'properties.defaultMoveCost',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          serviceTypeName: {
            required: false,
            serializedName: 'properties.serviceTypeName',
            type: {
              name: 'String'
            }
          },
          partitionDescription: {
            required: false,
            serializedName: 'properties.partitionDescription',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'PartitionScheme',
                clientName: 'partitionScheme'
              },
              uberParent: 'PartitionSchemeDescription',
              className: 'PartitionSchemeDescription'
            }
          },
          serviceKind: {
            required: true,
            serializedName: 'properties.serviceKind',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ServiceResource;
