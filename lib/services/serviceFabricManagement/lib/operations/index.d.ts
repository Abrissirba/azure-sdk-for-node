/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Clusters
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricManagementClient.
 */
export interface Clusters {


    /**
     * @summary Gets a Service Fabric cluster resource.
     *
     * Get a Service Fabric cluster resource created or in the process of being
     * created in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, clusterName: string, subscriptionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * @summary Gets a Service Fabric cluster resource.
     *
     * Get a Service Fabric cluster resource created or in the process of being
     * created in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, clusterName: string, subscriptionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    get(resourceGroupName: string, clusterName: string, subscriptionId: string, callback: ServiceCallback<models.Cluster>): void;
    get(resourceGroupName: string, clusterName: string, subscriptionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * @summary Creates or updates a Service Fabric cluster resource.
     *
     * Create or update a Service Fabric cluster resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} parameters The cluster resource.
     *
     * @param {array} [parameters.addOnFeatures] The list of add-on features to
     * enable in the cluster.
     *
     * @param {object} [parameters.azureActiveDirectory] The AAD authentication
     * settings of the cluster.
     *
     * @param {string} [parameters.azureActiveDirectory.tenantId] Azure active
     * directory tenant id.
     *
     * @param {string} [parameters.azureActiveDirectory.clusterApplication] Azure
     * active directory cluster application id.
     *
     * @param {string} [parameters.azureActiveDirectory.clientApplication] Azure
     * active directory client application id.
     *
     * @param {object} [parameters.certificate] The certificate to use for securing
     * the cluster. The certificate provided will be used for node to node security
     * within the cluster, SSL certificate for cluster management endpoint and
     * default admin client.
     *
     * @param {object} [parameters.certificateCommonNames] Describes a list of
     * server certificates referenced by common name that are used to secure the
     * cluster.
     *
     * @param {array} [parameters.clientCertificateCommonNames] The list of client
     * certificates referenced by common name that are allowed to manage the
     * cluster.
     *
     * @param {array} [parameters.clientCertificateThumbprints] The list of client
     * certificates referenced by thumbprint that are allowed to manage the
     * cluster.
     *
     * @param {string} [parameters.clusterCodeVersion] The Service Fabric runtime
     * version of the cluster. This property can only by set the user when
     * **upgradeMode** is set to 'Manual'. To get list of available Service Fabric
     * versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To
     * get the list of available version for existing clusters use
     * **availableClusterVersions**.
     *
     * @param {object} [parameters.diagnosticsStorageAccountConfig] The storage
     * account information for storing Service Fabric diagnostic logs.
     *
     * @param {string}
     * parameters.diagnosticsStorageAccountConfig.storageAccountName The Azure
     * storage account name.
     *
     * @param {string}
     * parameters.diagnosticsStorageAccountConfig.protectedAccountKeyName The
     * protected diagnostics storage key name.
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.blobEndpoint The
     * blob endpoint of the azure storage account.
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.queueEndpoint The
     * queue endpoint of the azure storage account.
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.tableEndpoint The
     * table endpoint of the azure storage account.
     *
     * @param {array} [parameters.fabricSettings] The list of custom fabric
     * settings to configure the cluster.
     *
     * @param {string} parameters.managementEndpoint The http management endpoint
     * of the cluster.
     *
     * @param {array} parameters.nodeTypes The list of node types in the cluster.
     *
     * @param {string} [parameters.reliabilityLevel] The reliability level sets the
     * replica set size of system services. Learn about
     * [ReliabilityLevel](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity).
     *
     * - None - Run the System services with a target replica set count of 1. This
     * should only be used for test clusters.
     * - Bronze - Run the System services with a target replica set count of 3.
     * This should only be used for test clusters.
     * - Silver - Run the System services with a target replica set count of 5.
     * - Gold - Run the System services with a target replica set count of 7.
     * - Platinum - Run the System services with a target replica set count of 9.
     * . Possible values include: 'None', 'Bronze', 'Silver', 'Gold', 'Platinum'
     *
     * @param {object} [parameters.reverseProxyCertificate] The server certificate
     * used by reverse proxy.
     *
     * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
     * the primary certificate.
     *
     * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
     * Thumbprint of the secondary certificate.
     *
     * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {object} [parameters.reverseProxyCertificateCommonNames] Describes a
     * list of server certificates referenced by common name that are used to
     * secure the cluster.
     *
     * @param {array} [parameters.reverseProxyCertificateCommonNames.commonNames]
     * The list of server certificates referenced by common name that are used to
     * secure the cluster.
     *
     * @param {string}
     * [parameters.reverseProxyCertificateCommonNames.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {object} [parameters.upgradeDescription] The policy to use when
     * upgrading the cluster.
     *
     * @param {boolean} [parameters.upgradeDescription.forceRestart] If true, then
     * processes are forcefully restarted during upgrade even when the code version
     * has not changed (the upgrade only changes configuration or data).
     *
     * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
     * The maximum amount of time to block processing of an upgrade domain and
     * revent loss of availability when there are unexpected issues. When this
     * timeout expires, processing of the upgrade domain will proceed regardless of
     * availability loss issues. The timeout is reset at the start of each upgrade
     * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
     * length of time to wait after completing an upgrade domain before performing
     * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
     * format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
     * amount of time that the application or cluster must remain healthy before
     * the upgrade proceeds to the next upgrade domain. The duration can be in
     * either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
     * amount of time to retry health evaluation when the application or cluster is
     * unhealthy before the upgrade rolls back. The timeout can be in either
     * hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.upgradeTimeout The amount of
     * time the overall upgrade has to complete before the upgrade rolls back. The
     * timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
     * amount of time each upgrade domain has to complete before the upgrade rolls
     * back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {object} parameters.upgradeDescription.healthPolicy The cluster
     * health policy used when upgrading the cluster.
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
     * maximum allowed percentage of unhealthy nodes before reporting an error. For
     * example, to allow 10% of nodes to be unhealthy, this value would be 10.
     *
     * The percentage represents the maximum tolerated percentage of nodes that can
     * be unhealthy before the cluster is considered in error.
     * If the percentage is respected but there is at least one unhealthy node, the
     * health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy nodes over
     * the total number of nodes in the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     * In large clusters, some nodes will always be down or out for repairs, so
     * this percentage should be configured to tolerate that.
     *
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * The maximum allowed percentage of unhealthy applications before reporting an
     * error. For example, to allow 10% of applications to be unhealthy, this value
     * would be 10.
     *
     * The percentage represents the maximum tolerated percentage of applications
     * that can be unhealthy before the cluster is considered in error.
     * If the percentage is respected but there is at least one unhealthy
     * application, the health is evaluated as Warning.
     * This is calculated by dividing the number of unhealthy applications over the
     * total number of application instances in the cluster, excluding applications
     * of application types that are included in the
     * ApplicationTypeHealthPolicyMap.
     * The computation rounds up to tolerate one failure on small numbers of
     * applications. Default percentage is zero.
     *
     *
     * @param {array}
     * [parameters.upgradeDescription.healthPolicy.applicationHealthPolicies]
     * Defines the application health policy map used to evaluate the health of an
     * application or one of its children entities.
     *
     * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] The
     * cluster delta health policy used when upgrading the cluster.
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
     * The maximum allowed percentage of nodes health degradation allowed during
     * cluster upgrades.
     * The delta is measured between the state of the nodes at the beginning of
     * upgrade and the state of the nodes at the time of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion to make
     * sure the global state of the cluster is within tolerated limits.
     *
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
     * The maximum allowed percentage of upgrade domain nodes health degradation
     * allowed during cluster upgrades.
     * The delta is measured between the state of the upgrade domain nodes at the
     * beginning of upgrade and the state of the upgrade domain nodes at the time
     * of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion for all
     * completed upgrade domains to make sure the state of the upgrade domains is
     * within tolerated limits.
     *
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
     * The maximum allowed percentage of applications health degradation allowed
     * during cluster upgrades.
     * The delta is measured between the state of the applications at the beginning
     * of upgrade and the state of the applications at the time of the health
     * evaluation.
     * The check is performed after every upgrade domain upgrade completion to make
     * sure the global state of the cluster is within tolerated limits. System
     * services are not included in this.
     *
     *
     * @param {array}
     * [parameters.upgradeDescription.deltaHealthPolicy.applicationDeltaHealthPolicies]
     * Defines the application delta health policy map used to evaluate the health
     * of an application or one of its child entities when upgrading the cluster.
     *
     * @param {string} [parameters.upgradeMode] The upgrade mode of the cluster
     * when new Service Fabric runtime version is available.
     *
     * - Automatic - The cluster will be automatically upgraded to the latest
     * Service Fabric runtime version as soon as it is available.
     * - Manual - The cluster will not be automatically upgraded to the latest
     * Service Fabric runtime version. The cluster is upgraded by setting the
     * **clusterCodeVersion** property in the cluster resource.
     * . Possible values include: 'Automatic', 'Manual'
     *
     * @param {string} [parameters.vmImage] The VM image VMSS has been configured
     * with. Generic names such as Windows or Linux can be used.
     *
     * @param {string} parameters.location Azure resource location.
     *
     * @param {object} [parameters.tags] Azure resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, clusterName: string, subscriptionId: string, parameters: models.Cluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * @summary Creates or updates a Service Fabric cluster resource.
     *
     * Create or update a Service Fabric cluster resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} parameters The cluster resource.
     *
     * @param {array} [parameters.addOnFeatures] The list of add-on features to
     * enable in the cluster.
     *
     * @param {object} [parameters.azureActiveDirectory] The AAD authentication
     * settings of the cluster.
     *
     * @param {string} [parameters.azureActiveDirectory.tenantId] Azure active
     * directory tenant id.
     *
     * @param {string} [parameters.azureActiveDirectory.clusterApplication] Azure
     * active directory cluster application id.
     *
     * @param {string} [parameters.azureActiveDirectory.clientApplication] Azure
     * active directory client application id.
     *
     * @param {object} [parameters.certificate] The certificate to use for securing
     * the cluster. The certificate provided will be used for node to node security
     * within the cluster, SSL certificate for cluster management endpoint and
     * default admin client.
     *
     * @param {object} [parameters.certificateCommonNames] Describes a list of
     * server certificates referenced by common name that are used to secure the
     * cluster.
     *
     * @param {array} [parameters.clientCertificateCommonNames] The list of client
     * certificates referenced by common name that are allowed to manage the
     * cluster.
     *
     * @param {array} [parameters.clientCertificateThumbprints] The list of client
     * certificates referenced by thumbprint that are allowed to manage the
     * cluster.
     *
     * @param {string} [parameters.clusterCodeVersion] The Service Fabric runtime
     * version of the cluster. This property can only by set the user when
     * **upgradeMode** is set to 'Manual'. To get list of available Service Fabric
     * versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To
     * get the list of available version for existing clusters use
     * **availableClusterVersions**.
     *
     * @param {object} [parameters.diagnosticsStorageAccountConfig] The storage
     * account information for storing Service Fabric diagnostic logs.
     *
     * @param {string}
     * parameters.diagnosticsStorageAccountConfig.storageAccountName The Azure
     * storage account name.
     *
     * @param {string}
     * parameters.diagnosticsStorageAccountConfig.protectedAccountKeyName The
     * protected diagnostics storage key name.
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.blobEndpoint The
     * blob endpoint of the azure storage account.
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.queueEndpoint The
     * queue endpoint of the azure storage account.
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.tableEndpoint The
     * table endpoint of the azure storage account.
     *
     * @param {array} [parameters.fabricSettings] The list of custom fabric
     * settings to configure the cluster.
     *
     * @param {string} parameters.managementEndpoint The http management endpoint
     * of the cluster.
     *
     * @param {array} parameters.nodeTypes The list of node types in the cluster.
     *
     * @param {string} [parameters.reliabilityLevel] The reliability level sets the
     * replica set size of system services. Learn about
     * [ReliabilityLevel](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity).
     *
     * - None - Run the System services with a target replica set count of 1. This
     * should only be used for test clusters.
     * - Bronze - Run the System services with a target replica set count of 3.
     * This should only be used for test clusters.
     * - Silver - Run the System services with a target replica set count of 5.
     * - Gold - Run the System services with a target replica set count of 7.
     * - Platinum - Run the System services with a target replica set count of 9.
     * . Possible values include: 'None', 'Bronze', 'Silver', 'Gold', 'Platinum'
     *
     * @param {object} [parameters.reverseProxyCertificate] The server certificate
     * used by reverse proxy.
     *
     * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
     * the primary certificate.
     *
     * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
     * Thumbprint of the secondary certificate.
     *
     * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {object} [parameters.reverseProxyCertificateCommonNames] Describes a
     * list of server certificates referenced by common name that are used to
     * secure the cluster.
     *
     * @param {array} [parameters.reverseProxyCertificateCommonNames.commonNames]
     * The list of server certificates referenced by common name that are used to
     * secure the cluster.
     *
     * @param {string}
     * [parameters.reverseProxyCertificateCommonNames.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {object} [parameters.upgradeDescription] The policy to use when
     * upgrading the cluster.
     *
     * @param {boolean} [parameters.upgradeDescription.forceRestart] If true, then
     * processes are forcefully restarted during upgrade even when the code version
     * has not changed (the upgrade only changes configuration or data).
     *
     * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
     * The maximum amount of time to block processing of an upgrade domain and
     * revent loss of availability when there are unexpected issues. When this
     * timeout expires, processing of the upgrade domain will proceed regardless of
     * availability loss issues. The timeout is reset at the start of each upgrade
     * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
     * length of time to wait after completing an upgrade domain before performing
     * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
     * format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
     * amount of time that the application or cluster must remain healthy before
     * the upgrade proceeds to the next upgrade domain. The duration can be in
     * either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
     * amount of time to retry health evaluation when the application or cluster is
     * unhealthy before the upgrade rolls back. The timeout can be in either
     * hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.upgradeTimeout The amount of
     * time the overall upgrade has to complete before the upgrade rolls back. The
     * timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
     * amount of time each upgrade domain has to complete before the upgrade rolls
     * back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {object} parameters.upgradeDescription.healthPolicy The cluster
     * health policy used when upgrading the cluster.
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
     * maximum allowed percentage of unhealthy nodes before reporting an error. For
     * example, to allow 10% of nodes to be unhealthy, this value would be 10.
     *
     * The percentage represents the maximum tolerated percentage of nodes that can
     * be unhealthy before the cluster is considered in error.
     * If the percentage is respected but there is at least one unhealthy node, the
     * health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy nodes over
     * the total number of nodes in the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     * In large clusters, some nodes will always be down or out for repairs, so
     * this percentage should be configured to tolerate that.
     *
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * The maximum allowed percentage of unhealthy applications before reporting an
     * error. For example, to allow 10% of applications to be unhealthy, this value
     * would be 10.
     *
     * The percentage represents the maximum tolerated percentage of applications
     * that can be unhealthy before the cluster is considered in error.
     * If the percentage is respected but there is at least one unhealthy
     * application, the health is evaluated as Warning.
     * This is calculated by dividing the number of unhealthy applications over the
     * total number of application instances in the cluster, excluding applications
     * of application types that are included in the
     * ApplicationTypeHealthPolicyMap.
     * The computation rounds up to tolerate one failure on small numbers of
     * applications. Default percentage is zero.
     *
     *
     * @param {array}
     * [parameters.upgradeDescription.healthPolicy.applicationHealthPolicies]
     * Defines the application health policy map used to evaluate the health of an
     * application or one of its children entities.
     *
     * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] The
     * cluster delta health policy used when upgrading the cluster.
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
     * The maximum allowed percentage of nodes health degradation allowed during
     * cluster upgrades.
     * The delta is measured between the state of the nodes at the beginning of
     * upgrade and the state of the nodes at the time of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion to make
     * sure the global state of the cluster is within tolerated limits.
     *
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
     * The maximum allowed percentage of upgrade domain nodes health degradation
     * allowed during cluster upgrades.
     * The delta is measured between the state of the upgrade domain nodes at the
     * beginning of upgrade and the state of the upgrade domain nodes at the time
     * of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion for all
     * completed upgrade domains to make sure the state of the upgrade domains is
     * within tolerated limits.
     *
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
     * The maximum allowed percentage of applications health degradation allowed
     * during cluster upgrades.
     * The delta is measured between the state of the applications at the beginning
     * of upgrade and the state of the applications at the time of the health
     * evaluation.
     * The check is performed after every upgrade domain upgrade completion to make
     * sure the global state of the cluster is within tolerated limits. System
     * services are not included in this.
     *
     *
     * @param {array}
     * [parameters.upgradeDescription.deltaHealthPolicy.applicationDeltaHealthPolicies]
     * Defines the application delta health policy map used to evaluate the health
     * of an application or one of its child entities when upgrading the cluster.
     *
     * @param {string} [parameters.upgradeMode] The upgrade mode of the cluster
     * when new Service Fabric runtime version is available.
     *
     * - Automatic - The cluster will be automatically upgraded to the latest
     * Service Fabric runtime version as soon as it is available.
     * - Manual - The cluster will not be automatically upgraded to the latest
     * Service Fabric runtime version. The cluster is upgraded by setting the
     * **clusterCodeVersion** property in the cluster resource.
     * . Possible values include: 'Automatic', 'Manual'
     *
     * @param {string} [parameters.vmImage] The VM image VMSS has been configured
     * with. Generic names such as Windows or Linux can be used.
     *
     * @param {string} parameters.location Azure resource location.
     *
     * @param {object} [parameters.tags] Azure resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, clusterName: string, subscriptionId: string, parameters: models.Cluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    create(resourceGroupName: string, clusterName: string, subscriptionId: string, parameters: models.Cluster, callback: ServiceCallback<models.Cluster>): void;
    create(resourceGroupName: string, clusterName: string, subscriptionId: string, parameters: models.Cluster, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * @summary Updates the configuration of a Service Fabric cluster resource.
     *
     * Update the configuration of a Service Fabric cluster resource with the
     * specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} parameters The parameters which contains the property value
     * and property name which used to update the cluster configuration.
     *
     * @param {array} [parameters.addOnFeatures] The list of add-on features to
     * enable in the cluster.
     *
     * @param {object} [parameters.certificate] The certificate to use for securing
     * the cluster. The certificate provided will be used for  node to node
     * security within the cluster, SSL certificate for cluster management endpoint
     * and default  admin client.
     *
     * @param {object} [parameters.certificateCommonNames] Describes a list of
     * server certificates referenced by common name that are used to secure the
     * cluster.
     *
     * @param {array} [parameters.certificateCommonNames.commonNames] The list of
     * server certificates referenced by common name that are used to secure the
     * cluster.
     *
     * @param {string} [parameters.certificateCommonNames.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {array} [parameters.clientCertificateCommonNames] The list of client
     * certificates referenced by common name that are allowed to manage the
     * cluster. This will overwrite the existing list.
     *
     * @param {array} [parameters.clientCertificateThumbprints] The list of client
     * certificates referenced by thumbprint that are allowed to manage the
     * cluster. This will overwrite the existing list.
     *
     * @param {string} [parameters.clusterCodeVersion] The Service Fabric runtime
     * version of the cluster. This property can only by set the user when
     * **upgradeMode** is set to 'Manual'. To get list of available Service Fabric
     * versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To
     * get the list of available version for existing clusters use
     * **availableClusterVersions**.
     *
     * @param {array} [parameters.fabricSettings] The list of custom fabric
     * settings to configure the cluster. This will overwrite the existing list.
     *
     * @param {array} [parameters.nodeTypes] The list of node types in the cluster.
     * This will overwrite the existing list.
     *
     * @param {string} [parameters.reliabilityLevel] The reliability level sets the
     * replica set size of system services. Learn about
     * [ReliabilityLevel](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity).
     *
     * - None - Run the System services with a target replica set count of 1. This
     * should only be used for test clusters.
     * - Bronze - Run the System services with a target replica set count of 3.
     * This should only be used for test clusters.
     * - Silver - Run the System services with a target replica set count of 5.
     * - Gold - Run the System services with a target replica set count of 7.
     * - Platinum - Run the System services with a target replica set count of 9.
     * . Possible values include: 'None', 'Bronze', 'Silver', 'Gold', 'Platinum'
     *
     * @param {object} [parameters.reverseProxyCertificate] The server certificate
     * used by reverse proxy.
     *
     * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
     * the primary certificate.
     *
     * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
     * Thumbprint of the secondary certificate.
     *
     * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {object} [parameters.upgradeDescription] The policy to use when
     * upgrading the cluster.
     *
     * @param {boolean} [parameters.upgradeDescription.forceRestart] If true, then
     * processes are forcefully restarted during upgrade even when the code version
     * has not changed (the upgrade only changes configuration or data).
     *
     * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
     * The maximum amount of time to block processing of an upgrade domain and
     * revent loss of availability when there are unexpected issues. When this
     * timeout expires, processing of the upgrade domain will proceed regardless of
     * availability loss issues. The timeout is reset at the start of each upgrade
     * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
     * length of time to wait after completing an upgrade domain before performing
     * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
     * format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
     * amount of time that the application or cluster must remain healthy before
     * the upgrade proceeds to the next upgrade domain. The duration can be in
     * either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
     * amount of time to retry health evaluation when the application or cluster is
     * unhealthy before the upgrade rolls back. The timeout can be in either
     * hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.upgradeTimeout The amount of
     * time the overall upgrade has to complete before the upgrade rolls back. The
     * timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
     * amount of time each upgrade domain has to complete before the upgrade rolls
     * back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {object} parameters.upgradeDescription.healthPolicy The cluster
     * health policy used when upgrading the cluster.
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
     * maximum allowed percentage of unhealthy nodes before reporting an error. For
     * example, to allow 10% of nodes to be unhealthy, this value would be 10.
     *
     * The percentage represents the maximum tolerated percentage of nodes that can
     * be unhealthy before the cluster is considered in error.
     * If the percentage is respected but there is at least one unhealthy node, the
     * health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy nodes over
     * the total number of nodes in the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     * In large clusters, some nodes will always be down or out for repairs, so
     * this percentage should be configured to tolerate that.
     *
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * The maximum allowed percentage of unhealthy applications before reporting an
     * error. For example, to allow 10% of applications to be unhealthy, this value
     * would be 10.
     *
     * The percentage represents the maximum tolerated percentage of applications
     * that can be unhealthy before the cluster is considered in error.
     * If the percentage is respected but there is at least one unhealthy
     * application, the health is evaluated as Warning.
     * This is calculated by dividing the number of unhealthy applications over the
     * total number of application instances in the cluster, excluding applications
     * of application types that are included in the
     * ApplicationTypeHealthPolicyMap.
     * The computation rounds up to tolerate one failure on small numbers of
     * applications. Default percentage is zero.
     *
     *
     * @param {array}
     * [parameters.upgradeDescription.healthPolicy.applicationHealthPolicies]
     * Defines the application health policy map used to evaluate the health of an
     * application or one of its children entities.
     *
     * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] The
     * cluster delta health policy used when upgrading the cluster.
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
     * The maximum allowed percentage of nodes health degradation allowed during
     * cluster upgrades.
     * The delta is measured between the state of the nodes at the beginning of
     * upgrade and the state of the nodes at the time of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion to make
     * sure the global state of the cluster is within tolerated limits.
     *
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
     * The maximum allowed percentage of upgrade domain nodes health degradation
     * allowed during cluster upgrades.
     * The delta is measured between the state of the upgrade domain nodes at the
     * beginning of upgrade and the state of the upgrade domain nodes at the time
     * of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion for all
     * completed upgrade domains to make sure the state of the upgrade domains is
     * within tolerated limits.
     *
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
     * The maximum allowed percentage of applications health degradation allowed
     * during cluster upgrades.
     * The delta is measured between the state of the applications at the beginning
     * of upgrade and the state of the applications at the time of the health
     * evaluation.
     * The check is performed after every upgrade domain upgrade completion to make
     * sure the global state of the cluster is within tolerated limits. System
     * services are not included in this.
     *
     *
     * @param {array}
     * [parameters.upgradeDescription.deltaHealthPolicy.applicationDeltaHealthPolicies]
     * Defines the application delta health policy map used to evaluate the health
     * of an application or one of its child entities when upgrading the cluster.
     *
     * @param {string} [parameters.upgradeMode] The upgrade mode of the cluster
     * when new Service Fabric runtime version is available.
     *
     * - Automatic - The cluster will be automatically upgraded to the latest
     * Service Fabric runtime version as soon as it is available.
     * - Manual - The cluster will not be automatically upgraded to the latest
     * Service Fabric runtime version. The cluster is upgraded by setting the
     * **clusterCodeVersion** property in the cluster resource.
     * . Possible values include: 'Automatic', 'Manual'
     *
     * @param {object} [parameters.tags] Cluster update parameters
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, subscriptionId: string, parameters: models.ClusterUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * @summary Updates the configuration of a Service Fabric cluster resource.
     *
     * Update the configuration of a Service Fabric cluster resource with the
     * specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} parameters The parameters which contains the property value
     * and property name which used to update the cluster configuration.
     *
     * @param {array} [parameters.addOnFeatures] The list of add-on features to
     * enable in the cluster.
     *
     * @param {object} [parameters.certificate] The certificate to use for securing
     * the cluster. The certificate provided will be used for  node to node
     * security within the cluster, SSL certificate for cluster management endpoint
     * and default  admin client.
     *
     * @param {object} [parameters.certificateCommonNames] Describes a list of
     * server certificates referenced by common name that are used to secure the
     * cluster.
     *
     * @param {array} [parameters.certificateCommonNames.commonNames] The list of
     * server certificates referenced by common name that are used to secure the
     * cluster.
     *
     * @param {string} [parameters.certificateCommonNames.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {array} [parameters.clientCertificateCommonNames] The list of client
     * certificates referenced by common name that are allowed to manage the
     * cluster. This will overwrite the existing list.
     *
     * @param {array} [parameters.clientCertificateThumbprints] The list of client
     * certificates referenced by thumbprint that are allowed to manage the
     * cluster. This will overwrite the existing list.
     *
     * @param {string} [parameters.clusterCodeVersion] The Service Fabric runtime
     * version of the cluster. This property can only by set the user when
     * **upgradeMode** is set to 'Manual'. To get list of available Service Fabric
     * versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To
     * get the list of available version for existing clusters use
     * **availableClusterVersions**.
     *
     * @param {array} [parameters.fabricSettings] The list of custom fabric
     * settings to configure the cluster. This will overwrite the existing list.
     *
     * @param {array} [parameters.nodeTypes] The list of node types in the cluster.
     * This will overwrite the existing list.
     *
     * @param {string} [parameters.reliabilityLevel] The reliability level sets the
     * replica set size of system services. Learn about
     * [ReliabilityLevel](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity).
     *
     * - None - Run the System services with a target replica set count of 1. This
     * should only be used for test clusters.
     * - Bronze - Run the System services with a target replica set count of 3.
     * This should only be used for test clusters.
     * - Silver - Run the System services with a target replica set count of 5.
     * - Gold - Run the System services with a target replica set count of 7.
     * - Platinum - Run the System services with a target replica set count of 9.
     * . Possible values include: 'None', 'Bronze', 'Silver', 'Gold', 'Platinum'
     *
     * @param {object} [parameters.reverseProxyCertificate] The server certificate
     * used by reverse proxy.
     *
     * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
     * the primary certificate.
     *
     * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
     * Thumbprint of the secondary certificate.
     *
     * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {object} [parameters.upgradeDescription] The policy to use when
     * upgrading the cluster.
     *
     * @param {boolean} [parameters.upgradeDescription.forceRestart] If true, then
     * processes are forcefully restarted during upgrade even when the code version
     * has not changed (the upgrade only changes configuration or data).
     *
     * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
     * The maximum amount of time to block processing of an upgrade domain and
     * revent loss of availability when there are unexpected issues. When this
     * timeout expires, processing of the upgrade domain will proceed regardless of
     * availability loss issues. The timeout is reset at the start of each upgrade
     * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
     * length of time to wait after completing an upgrade domain before performing
     * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
     * format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
     * amount of time that the application or cluster must remain healthy before
     * the upgrade proceeds to the next upgrade domain. The duration can be in
     * either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
     * amount of time to retry health evaluation when the application or cluster is
     * unhealthy before the upgrade rolls back. The timeout can be in either
     * hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.upgradeTimeout The amount of
     * time the overall upgrade has to complete before the upgrade rolls back. The
     * timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
     * amount of time each upgrade domain has to complete before the upgrade rolls
     * back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {object} parameters.upgradeDescription.healthPolicy The cluster
     * health policy used when upgrading the cluster.
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
     * maximum allowed percentage of unhealthy nodes before reporting an error. For
     * example, to allow 10% of nodes to be unhealthy, this value would be 10.
     *
     * The percentage represents the maximum tolerated percentage of nodes that can
     * be unhealthy before the cluster is considered in error.
     * If the percentage is respected but there is at least one unhealthy node, the
     * health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy nodes over
     * the total number of nodes in the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     * In large clusters, some nodes will always be down or out for repairs, so
     * this percentage should be configured to tolerate that.
     *
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * The maximum allowed percentage of unhealthy applications before reporting an
     * error. For example, to allow 10% of applications to be unhealthy, this value
     * would be 10.
     *
     * The percentage represents the maximum tolerated percentage of applications
     * that can be unhealthy before the cluster is considered in error.
     * If the percentage is respected but there is at least one unhealthy
     * application, the health is evaluated as Warning.
     * This is calculated by dividing the number of unhealthy applications over the
     * total number of application instances in the cluster, excluding applications
     * of application types that are included in the
     * ApplicationTypeHealthPolicyMap.
     * The computation rounds up to tolerate one failure on small numbers of
     * applications. Default percentage is zero.
     *
     *
     * @param {array}
     * [parameters.upgradeDescription.healthPolicy.applicationHealthPolicies]
     * Defines the application health policy map used to evaluate the health of an
     * application or one of its children entities.
     *
     * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] The
     * cluster delta health policy used when upgrading the cluster.
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
     * The maximum allowed percentage of nodes health degradation allowed during
     * cluster upgrades.
     * The delta is measured between the state of the nodes at the beginning of
     * upgrade and the state of the nodes at the time of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion to make
     * sure the global state of the cluster is within tolerated limits.
     *
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
     * The maximum allowed percentage of upgrade domain nodes health degradation
     * allowed during cluster upgrades.
     * The delta is measured between the state of the upgrade domain nodes at the
     * beginning of upgrade and the state of the upgrade domain nodes at the time
     * of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion for all
     * completed upgrade domains to make sure the state of the upgrade domains is
     * within tolerated limits.
     *
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
     * The maximum allowed percentage of applications health degradation allowed
     * during cluster upgrades.
     * The delta is measured between the state of the applications at the beginning
     * of upgrade and the state of the applications at the time of the health
     * evaluation.
     * The check is performed after every upgrade domain upgrade completion to make
     * sure the global state of the cluster is within tolerated limits. System
     * services are not included in this.
     *
     *
     * @param {array}
     * [parameters.upgradeDescription.deltaHealthPolicy.applicationDeltaHealthPolicies]
     * Defines the application delta health policy map used to evaluate the health
     * of an application or one of its child entities when upgrading the cluster.
     *
     * @param {string} [parameters.upgradeMode] The upgrade mode of the cluster
     * when new Service Fabric runtime version is available.
     *
     * - Automatic - The cluster will be automatically upgraded to the latest
     * Service Fabric runtime version as soon as it is available.
     * - Manual - The cluster will not be automatically upgraded to the latest
     * Service Fabric runtime version. The cluster is upgraded by setting the
     * **clusterCodeVersion** property in the cluster resource.
     * . Possible values include: 'Automatic', 'Manual'
     *
     * @param {object} [parameters.tags] Cluster update parameters
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, clusterName: string, subscriptionId: string, parameters: models.ClusterUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    update(resourceGroupName: string, clusterName: string, subscriptionId: string, parameters: models.ClusterUpdateParameters, callback: ServiceCallback<models.Cluster>): void;
    update(resourceGroupName: string, clusterName: string, subscriptionId: string, parameters: models.ClusterUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * @summary Deletes a Service Fabric cluster resource.
     *
     * Delete a Service Fabric cluster resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, clusterName: string, subscriptionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a Service Fabric cluster resource.
     *
     * Delete a Service Fabric cluster resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, clusterName: string, subscriptionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, clusterName: string, subscriptionId: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, clusterName: string, subscriptionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets the list of Service Fabric cluster resources created in the
     * specified resource group.
     *
     * Gets all Service Fabric cluster resources created or in the process of being
     * created in the resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, subscriptionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * @summary Gets the list of Service Fabric cluster resources created in the
     * specified resource group.
     *
     * Gets all Service Fabric cluster resources created or in the process of being
     * created in the resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, subscriptionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    listByResourceGroup(resourceGroupName: string, subscriptionId: string, callback: ServiceCallback<models.ClusterListResult>): void;
    listByResourceGroup(resourceGroupName: string, subscriptionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;


    /**
     * @summary Gets the list of Service Fabric cluster resources created in the
     * specified subscription.
     *
     * Gets all Service Fabric cluster resources created or in the process of being
     * created in the subscription.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(subscriptionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * @summary Gets the list of Service Fabric cluster resources created in the
     * specified subscription.
     *
     * Gets all Service Fabric cluster resources created or in the process of being
     * created in the subscription.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(subscriptionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    list(subscriptionId: string, callback: ServiceCallback<models.ClusterListResult>): void;
    list(subscriptionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;


    /**
     * @summary Creates or updates a Service Fabric cluster resource.
     *
     * Create or update a Service Fabric cluster resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} parameters The cluster resource.
     *
     * @param {array} [parameters.addOnFeatures] The list of add-on features to
     * enable in the cluster.
     *
     * @param {object} [parameters.azureActiveDirectory] The AAD authentication
     * settings of the cluster.
     *
     * @param {string} [parameters.azureActiveDirectory.tenantId] Azure active
     * directory tenant id.
     *
     * @param {string} [parameters.azureActiveDirectory.clusterApplication] Azure
     * active directory cluster application id.
     *
     * @param {string} [parameters.azureActiveDirectory.clientApplication] Azure
     * active directory client application id.
     *
     * @param {object} [parameters.certificate] The certificate to use for securing
     * the cluster. The certificate provided will be used for node to node security
     * within the cluster, SSL certificate for cluster management endpoint and
     * default admin client.
     *
     * @param {object} [parameters.certificateCommonNames] Describes a list of
     * server certificates referenced by common name that are used to secure the
     * cluster.
     *
     * @param {array} [parameters.clientCertificateCommonNames] The list of client
     * certificates referenced by common name that are allowed to manage the
     * cluster.
     *
     * @param {array} [parameters.clientCertificateThumbprints] The list of client
     * certificates referenced by thumbprint that are allowed to manage the
     * cluster.
     *
     * @param {string} [parameters.clusterCodeVersion] The Service Fabric runtime
     * version of the cluster. This property can only by set the user when
     * **upgradeMode** is set to 'Manual'. To get list of available Service Fabric
     * versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To
     * get the list of available version for existing clusters use
     * **availableClusterVersions**.
     *
     * @param {object} [parameters.diagnosticsStorageAccountConfig] The storage
     * account information for storing Service Fabric diagnostic logs.
     *
     * @param {string}
     * parameters.diagnosticsStorageAccountConfig.storageAccountName The Azure
     * storage account name.
     *
     * @param {string}
     * parameters.diagnosticsStorageAccountConfig.protectedAccountKeyName The
     * protected diagnostics storage key name.
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.blobEndpoint The
     * blob endpoint of the azure storage account.
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.queueEndpoint The
     * queue endpoint of the azure storage account.
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.tableEndpoint The
     * table endpoint of the azure storage account.
     *
     * @param {array} [parameters.fabricSettings] The list of custom fabric
     * settings to configure the cluster.
     *
     * @param {string} parameters.managementEndpoint The http management endpoint
     * of the cluster.
     *
     * @param {array} parameters.nodeTypes The list of node types in the cluster.
     *
     * @param {string} [parameters.reliabilityLevel] The reliability level sets the
     * replica set size of system services. Learn about
     * [ReliabilityLevel](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity).
     *
     * - None - Run the System services with a target replica set count of 1. This
     * should only be used for test clusters.
     * - Bronze - Run the System services with a target replica set count of 3.
     * This should only be used for test clusters.
     * - Silver - Run the System services with a target replica set count of 5.
     * - Gold - Run the System services with a target replica set count of 7.
     * - Platinum - Run the System services with a target replica set count of 9.
     * . Possible values include: 'None', 'Bronze', 'Silver', 'Gold', 'Platinum'
     *
     * @param {object} [parameters.reverseProxyCertificate] The server certificate
     * used by reverse proxy.
     *
     * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
     * the primary certificate.
     *
     * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
     * Thumbprint of the secondary certificate.
     *
     * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {object} [parameters.reverseProxyCertificateCommonNames] Describes a
     * list of server certificates referenced by common name that are used to
     * secure the cluster.
     *
     * @param {array} [parameters.reverseProxyCertificateCommonNames.commonNames]
     * The list of server certificates referenced by common name that are used to
     * secure the cluster.
     *
     * @param {string}
     * [parameters.reverseProxyCertificateCommonNames.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {object} [parameters.upgradeDescription] The policy to use when
     * upgrading the cluster.
     *
     * @param {boolean} [parameters.upgradeDescription.forceRestart] If true, then
     * processes are forcefully restarted during upgrade even when the code version
     * has not changed (the upgrade only changes configuration or data).
     *
     * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
     * The maximum amount of time to block processing of an upgrade domain and
     * revent loss of availability when there are unexpected issues. When this
     * timeout expires, processing of the upgrade domain will proceed regardless of
     * availability loss issues. The timeout is reset at the start of each upgrade
     * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
     * length of time to wait after completing an upgrade domain before performing
     * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
     * format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
     * amount of time that the application or cluster must remain healthy before
     * the upgrade proceeds to the next upgrade domain. The duration can be in
     * either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
     * amount of time to retry health evaluation when the application or cluster is
     * unhealthy before the upgrade rolls back. The timeout can be in either
     * hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.upgradeTimeout The amount of
     * time the overall upgrade has to complete before the upgrade rolls back. The
     * timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
     * amount of time each upgrade domain has to complete before the upgrade rolls
     * back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {object} parameters.upgradeDescription.healthPolicy The cluster
     * health policy used when upgrading the cluster.
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
     * maximum allowed percentage of unhealthy nodes before reporting an error. For
     * example, to allow 10% of nodes to be unhealthy, this value would be 10.
     *
     * The percentage represents the maximum tolerated percentage of nodes that can
     * be unhealthy before the cluster is considered in error.
     * If the percentage is respected but there is at least one unhealthy node, the
     * health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy nodes over
     * the total number of nodes in the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     * In large clusters, some nodes will always be down or out for repairs, so
     * this percentage should be configured to tolerate that.
     *
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * The maximum allowed percentage of unhealthy applications before reporting an
     * error. For example, to allow 10% of applications to be unhealthy, this value
     * would be 10.
     *
     * The percentage represents the maximum tolerated percentage of applications
     * that can be unhealthy before the cluster is considered in error.
     * If the percentage is respected but there is at least one unhealthy
     * application, the health is evaluated as Warning.
     * This is calculated by dividing the number of unhealthy applications over the
     * total number of application instances in the cluster, excluding applications
     * of application types that are included in the
     * ApplicationTypeHealthPolicyMap.
     * The computation rounds up to tolerate one failure on small numbers of
     * applications. Default percentage is zero.
     *
     *
     * @param {array}
     * [parameters.upgradeDescription.healthPolicy.applicationHealthPolicies]
     * Defines the application health policy map used to evaluate the health of an
     * application or one of its children entities.
     *
     * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] The
     * cluster delta health policy used when upgrading the cluster.
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
     * The maximum allowed percentage of nodes health degradation allowed during
     * cluster upgrades.
     * The delta is measured between the state of the nodes at the beginning of
     * upgrade and the state of the nodes at the time of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion to make
     * sure the global state of the cluster is within tolerated limits.
     *
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
     * The maximum allowed percentage of upgrade domain nodes health degradation
     * allowed during cluster upgrades.
     * The delta is measured between the state of the upgrade domain nodes at the
     * beginning of upgrade and the state of the upgrade domain nodes at the time
     * of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion for all
     * completed upgrade domains to make sure the state of the upgrade domains is
     * within tolerated limits.
     *
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
     * The maximum allowed percentage of applications health degradation allowed
     * during cluster upgrades.
     * The delta is measured between the state of the applications at the beginning
     * of upgrade and the state of the applications at the time of the health
     * evaluation.
     * The check is performed after every upgrade domain upgrade completion to make
     * sure the global state of the cluster is within tolerated limits. System
     * services are not included in this.
     *
     *
     * @param {array}
     * [parameters.upgradeDescription.deltaHealthPolicy.applicationDeltaHealthPolicies]
     * Defines the application delta health policy map used to evaluate the health
     * of an application or one of its child entities when upgrading the cluster.
     *
     * @param {string} [parameters.upgradeMode] The upgrade mode of the cluster
     * when new Service Fabric runtime version is available.
     *
     * - Automatic - The cluster will be automatically upgraded to the latest
     * Service Fabric runtime version as soon as it is available.
     * - Manual - The cluster will not be automatically upgraded to the latest
     * Service Fabric runtime version. The cluster is upgraded by setting the
     * **clusterCodeVersion** property in the cluster resource.
     * . Possible values include: 'Automatic', 'Manual'
     *
     * @param {string} [parameters.vmImage] The VM image VMSS has been configured
     * with. Generic names such as Windows or Linux can be used.
     *
     * @param {string} parameters.location Azure resource location.
     *
     * @param {object} [parameters.tags] Azure resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, subscriptionId: string, parameters: models.Cluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * @summary Creates or updates a Service Fabric cluster resource.
     *
     * Create or update a Service Fabric cluster resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} parameters The cluster resource.
     *
     * @param {array} [parameters.addOnFeatures] The list of add-on features to
     * enable in the cluster.
     *
     * @param {object} [parameters.azureActiveDirectory] The AAD authentication
     * settings of the cluster.
     *
     * @param {string} [parameters.azureActiveDirectory.tenantId] Azure active
     * directory tenant id.
     *
     * @param {string} [parameters.azureActiveDirectory.clusterApplication] Azure
     * active directory cluster application id.
     *
     * @param {string} [parameters.azureActiveDirectory.clientApplication] Azure
     * active directory client application id.
     *
     * @param {object} [parameters.certificate] The certificate to use for securing
     * the cluster. The certificate provided will be used for node to node security
     * within the cluster, SSL certificate for cluster management endpoint and
     * default admin client.
     *
     * @param {object} [parameters.certificateCommonNames] Describes a list of
     * server certificates referenced by common name that are used to secure the
     * cluster.
     *
     * @param {array} [parameters.clientCertificateCommonNames] The list of client
     * certificates referenced by common name that are allowed to manage the
     * cluster.
     *
     * @param {array} [parameters.clientCertificateThumbprints] The list of client
     * certificates referenced by thumbprint that are allowed to manage the
     * cluster.
     *
     * @param {string} [parameters.clusterCodeVersion] The Service Fabric runtime
     * version of the cluster. This property can only by set the user when
     * **upgradeMode** is set to 'Manual'. To get list of available Service Fabric
     * versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To
     * get the list of available version for existing clusters use
     * **availableClusterVersions**.
     *
     * @param {object} [parameters.diagnosticsStorageAccountConfig] The storage
     * account information for storing Service Fabric diagnostic logs.
     *
     * @param {string}
     * parameters.diagnosticsStorageAccountConfig.storageAccountName The Azure
     * storage account name.
     *
     * @param {string}
     * parameters.diagnosticsStorageAccountConfig.protectedAccountKeyName The
     * protected diagnostics storage key name.
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.blobEndpoint The
     * blob endpoint of the azure storage account.
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.queueEndpoint The
     * queue endpoint of the azure storage account.
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.tableEndpoint The
     * table endpoint of the azure storage account.
     *
     * @param {array} [parameters.fabricSettings] The list of custom fabric
     * settings to configure the cluster.
     *
     * @param {string} parameters.managementEndpoint The http management endpoint
     * of the cluster.
     *
     * @param {array} parameters.nodeTypes The list of node types in the cluster.
     *
     * @param {string} [parameters.reliabilityLevel] The reliability level sets the
     * replica set size of system services. Learn about
     * [ReliabilityLevel](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity).
     *
     * - None - Run the System services with a target replica set count of 1. This
     * should only be used for test clusters.
     * - Bronze - Run the System services with a target replica set count of 3.
     * This should only be used for test clusters.
     * - Silver - Run the System services with a target replica set count of 5.
     * - Gold - Run the System services with a target replica set count of 7.
     * - Platinum - Run the System services with a target replica set count of 9.
     * . Possible values include: 'None', 'Bronze', 'Silver', 'Gold', 'Platinum'
     *
     * @param {object} [parameters.reverseProxyCertificate] The server certificate
     * used by reverse proxy.
     *
     * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
     * the primary certificate.
     *
     * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
     * Thumbprint of the secondary certificate.
     *
     * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {object} [parameters.reverseProxyCertificateCommonNames] Describes a
     * list of server certificates referenced by common name that are used to
     * secure the cluster.
     *
     * @param {array} [parameters.reverseProxyCertificateCommonNames.commonNames]
     * The list of server certificates referenced by common name that are used to
     * secure the cluster.
     *
     * @param {string}
     * [parameters.reverseProxyCertificateCommonNames.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {object} [parameters.upgradeDescription] The policy to use when
     * upgrading the cluster.
     *
     * @param {boolean} [parameters.upgradeDescription.forceRestart] If true, then
     * processes are forcefully restarted during upgrade even when the code version
     * has not changed (the upgrade only changes configuration or data).
     *
     * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
     * The maximum amount of time to block processing of an upgrade domain and
     * revent loss of availability when there are unexpected issues. When this
     * timeout expires, processing of the upgrade domain will proceed regardless of
     * availability loss issues. The timeout is reset at the start of each upgrade
     * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
     * length of time to wait after completing an upgrade domain before performing
     * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
     * format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
     * amount of time that the application or cluster must remain healthy before
     * the upgrade proceeds to the next upgrade domain. The duration can be in
     * either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
     * amount of time to retry health evaluation when the application or cluster is
     * unhealthy before the upgrade rolls back. The timeout can be in either
     * hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.upgradeTimeout The amount of
     * time the overall upgrade has to complete before the upgrade rolls back. The
     * timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
     * amount of time each upgrade domain has to complete before the upgrade rolls
     * back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {object} parameters.upgradeDescription.healthPolicy The cluster
     * health policy used when upgrading the cluster.
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
     * maximum allowed percentage of unhealthy nodes before reporting an error. For
     * example, to allow 10% of nodes to be unhealthy, this value would be 10.
     *
     * The percentage represents the maximum tolerated percentage of nodes that can
     * be unhealthy before the cluster is considered in error.
     * If the percentage is respected but there is at least one unhealthy node, the
     * health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy nodes over
     * the total number of nodes in the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     * In large clusters, some nodes will always be down or out for repairs, so
     * this percentage should be configured to tolerate that.
     *
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * The maximum allowed percentage of unhealthy applications before reporting an
     * error. For example, to allow 10% of applications to be unhealthy, this value
     * would be 10.
     *
     * The percentage represents the maximum tolerated percentage of applications
     * that can be unhealthy before the cluster is considered in error.
     * If the percentage is respected but there is at least one unhealthy
     * application, the health is evaluated as Warning.
     * This is calculated by dividing the number of unhealthy applications over the
     * total number of application instances in the cluster, excluding applications
     * of application types that are included in the
     * ApplicationTypeHealthPolicyMap.
     * The computation rounds up to tolerate one failure on small numbers of
     * applications. Default percentage is zero.
     *
     *
     * @param {array}
     * [parameters.upgradeDescription.healthPolicy.applicationHealthPolicies]
     * Defines the application health policy map used to evaluate the health of an
     * application or one of its children entities.
     *
     * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] The
     * cluster delta health policy used when upgrading the cluster.
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
     * The maximum allowed percentage of nodes health degradation allowed during
     * cluster upgrades.
     * The delta is measured between the state of the nodes at the beginning of
     * upgrade and the state of the nodes at the time of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion to make
     * sure the global state of the cluster is within tolerated limits.
     *
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
     * The maximum allowed percentage of upgrade domain nodes health degradation
     * allowed during cluster upgrades.
     * The delta is measured between the state of the upgrade domain nodes at the
     * beginning of upgrade and the state of the upgrade domain nodes at the time
     * of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion for all
     * completed upgrade domains to make sure the state of the upgrade domains is
     * within tolerated limits.
     *
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
     * The maximum allowed percentage of applications health degradation allowed
     * during cluster upgrades.
     * The delta is measured between the state of the applications at the beginning
     * of upgrade and the state of the applications at the time of the health
     * evaluation.
     * The check is performed after every upgrade domain upgrade completion to make
     * sure the global state of the cluster is within tolerated limits. System
     * services are not included in this.
     *
     *
     * @param {array}
     * [parameters.upgradeDescription.deltaHealthPolicy.applicationDeltaHealthPolicies]
     * Defines the application delta health policy map used to evaluate the health
     * of an application or one of its child entities when upgrading the cluster.
     *
     * @param {string} [parameters.upgradeMode] The upgrade mode of the cluster
     * when new Service Fabric runtime version is available.
     *
     * - Automatic - The cluster will be automatically upgraded to the latest
     * Service Fabric runtime version as soon as it is available.
     * - Manual - The cluster will not be automatically upgraded to the latest
     * Service Fabric runtime version. The cluster is upgraded by setting the
     * **clusterCodeVersion** property in the cluster resource.
     * . Possible values include: 'Automatic', 'Manual'
     *
     * @param {string} [parameters.vmImage] The VM image VMSS has been configured
     * with. Generic names such as Windows or Linux can be used.
     *
     * @param {string} parameters.location Azure resource location.
     *
     * @param {object} [parameters.tags] Azure resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, clusterName: string, subscriptionId: string, parameters: models.Cluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    beginCreate(resourceGroupName: string, clusterName: string, subscriptionId: string, parameters: models.Cluster, callback: ServiceCallback<models.Cluster>): void;
    beginCreate(resourceGroupName: string, clusterName: string, subscriptionId: string, parameters: models.Cluster, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * @summary Updates the configuration of a Service Fabric cluster resource.
     *
     * Update the configuration of a Service Fabric cluster resource with the
     * specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} parameters The parameters which contains the property value
     * and property name which used to update the cluster configuration.
     *
     * @param {array} [parameters.addOnFeatures] The list of add-on features to
     * enable in the cluster.
     *
     * @param {object} [parameters.certificate] The certificate to use for securing
     * the cluster. The certificate provided will be used for  node to node
     * security within the cluster, SSL certificate for cluster management endpoint
     * and default  admin client.
     *
     * @param {object} [parameters.certificateCommonNames] Describes a list of
     * server certificates referenced by common name that are used to secure the
     * cluster.
     *
     * @param {array} [parameters.certificateCommonNames.commonNames] The list of
     * server certificates referenced by common name that are used to secure the
     * cluster.
     *
     * @param {string} [parameters.certificateCommonNames.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {array} [parameters.clientCertificateCommonNames] The list of client
     * certificates referenced by common name that are allowed to manage the
     * cluster. This will overwrite the existing list.
     *
     * @param {array} [parameters.clientCertificateThumbprints] The list of client
     * certificates referenced by thumbprint that are allowed to manage the
     * cluster. This will overwrite the existing list.
     *
     * @param {string} [parameters.clusterCodeVersion] The Service Fabric runtime
     * version of the cluster. This property can only by set the user when
     * **upgradeMode** is set to 'Manual'. To get list of available Service Fabric
     * versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To
     * get the list of available version for existing clusters use
     * **availableClusterVersions**.
     *
     * @param {array} [parameters.fabricSettings] The list of custom fabric
     * settings to configure the cluster. This will overwrite the existing list.
     *
     * @param {array} [parameters.nodeTypes] The list of node types in the cluster.
     * This will overwrite the existing list.
     *
     * @param {string} [parameters.reliabilityLevel] The reliability level sets the
     * replica set size of system services. Learn about
     * [ReliabilityLevel](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity).
     *
     * - None - Run the System services with a target replica set count of 1. This
     * should only be used for test clusters.
     * - Bronze - Run the System services with a target replica set count of 3.
     * This should only be used for test clusters.
     * - Silver - Run the System services with a target replica set count of 5.
     * - Gold - Run the System services with a target replica set count of 7.
     * - Platinum - Run the System services with a target replica set count of 9.
     * . Possible values include: 'None', 'Bronze', 'Silver', 'Gold', 'Platinum'
     *
     * @param {object} [parameters.reverseProxyCertificate] The server certificate
     * used by reverse proxy.
     *
     * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
     * the primary certificate.
     *
     * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
     * Thumbprint of the secondary certificate.
     *
     * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {object} [parameters.upgradeDescription] The policy to use when
     * upgrading the cluster.
     *
     * @param {boolean} [parameters.upgradeDescription.forceRestart] If true, then
     * processes are forcefully restarted during upgrade even when the code version
     * has not changed (the upgrade only changes configuration or data).
     *
     * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
     * The maximum amount of time to block processing of an upgrade domain and
     * revent loss of availability when there are unexpected issues. When this
     * timeout expires, processing of the upgrade domain will proceed regardless of
     * availability loss issues. The timeout is reset at the start of each upgrade
     * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
     * length of time to wait after completing an upgrade domain before performing
     * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
     * format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
     * amount of time that the application or cluster must remain healthy before
     * the upgrade proceeds to the next upgrade domain. The duration can be in
     * either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
     * amount of time to retry health evaluation when the application or cluster is
     * unhealthy before the upgrade rolls back. The timeout can be in either
     * hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.upgradeTimeout The amount of
     * time the overall upgrade has to complete before the upgrade rolls back. The
     * timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
     * amount of time each upgrade domain has to complete before the upgrade rolls
     * back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {object} parameters.upgradeDescription.healthPolicy The cluster
     * health policy used when upgrading the cluster.
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
     * maximum allowed percentage of unhealthy nodes before reporting an error. For
     * example, to allow 10% of nodes to be unhealthy, this value would be 10.
     *
     * The percentage represents the maximum tolerated percentage of nodes that can
     * be unhealthy before the cluster is considered in error.
     * If the percentage is respected but there is at least one unhealthy node, the
     * health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy nodes over
     * the total number of nodes in the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     * In large clusters, some nodes will always be down or out for repairs, so
     * this percentage should be configured to tolerate that.
     *
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * The maximum allowed percentage of unhealthy applications before reporting an
     * error. For example, to allow 10% of applications to be unhealthy, this value
     * would be 10.
     *
     * The percentage represents the maximum tolerated percentage of applications
     * that can be unhealthy before the cluster is considered in error.
     * If the percentage is respected but there is at least one unhealthy
     * application, the health is evaluated as Warning.
     * This is calculated by dividing the number of unhealthy applications over the
     * total number of application instances in the cluster, excluding applications
     * of application types that are included in the
     * ApplicationTypeHealthPolicyMap.
     * The computation rounds up to tolerate one failure on small numbers of
     * applications. Default percentage is zero.
     *
     *
     * @param {array}
     * [parameters.upgradeDescription.healthPolicy.applicationHealthPolicies]
     * Defines the application health policy map used to evaluate the health of an
     * application or one of its children entities.
     *
     * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] The
     * cluster delta health policy used when upgrading the cluster.
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
     * The maximum allowed percentage of nodes health degradation allowed during
     * cluster upgrades.
     * The delta is measured between the state of the nodes at the beginning of
     * upgrade and the state of the nodes at the time of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion to make
     * sure the global state of the cluster is within tolerated limits.
     *
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
     * The maximum allowed percentage of upgrade domain nodes health degradation
     * allowed during cluster upgrades.
     * The delta is measured between the state of the upgrade domain nodes at the
     * beginning of upgrade and the state of the upgrade domain nodes at the time
     * of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion for all
     * completed upgrade domains to make sure the state of the upgrade domains is
     * within tolerated limits.
     *
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
     * The maximum allowed percentage of applications health degradation allowed
     * during cluster upgrades.
     * The delta is measured between the state of the applications at the beginning
     * of upgrade and the state of the applications at the time of the health
     * evaluation.
     * The check is performed after every upgrade domain upgrade completion to make
     * sure the global state of the cluster is within tolerated limits. System
     * services are not included in this.
     *
     *
     * @param {array}
     * [parameters.upgradeDescription.deltaHealthPolicy.applicationDeltaHealthPolicies]
     * Defines the application delta health policy map used to evaluate the health
     * of an application or one of its child entities when upgrading the cluster.
     *
     * @param {string} [parameters.upgradeMode] The upgrade mode of the cluster
     * when new Service Fabric runtime version is available.
     *
     * - Automatic - The cluster will be automatically upgraded to the latest
     * Service Fabric runtime version as soon as it is available.
     * - Manual - The cluster will not be automatically upgraded to the latest
     * Service Fabric runtime version. The cluster is upgraded by setting the
     * **clusterCodeVersion** property in the cluster resource.
     * . Possible values include: 'Automatic', 'Manual'
     *
     * @param {object} [parameters.tags] Cluster update parameters
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, subscriptionId: string, parameters: models.ClusterUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * @summary Updates the configuration of a Service Fabric cluster resource.
     *
     * Update the configuration of a Service Fabric cluster resource with the
     * specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} parameters The parameters which contains the property value
     * and property name which used to update the cluster configuration.
     *
     * @param {array} [parameters.addOnFeatures] The list of add-on features to
     * enable in the cluster.
     *
     * @param {object} [parameters.certificate] The certificate to use for securing
     * the cluster. The certificate provided will be used for  node to node
     * security within the cluster, SSL certificate for cluster management endpoint
     * and default  admin client.
     *
     * @param {object} [parameters.certificateCommonNames] Describes a list of
     * server certificates referenced by common name that are used to secure the
     * cluster.
     *
     * @param {array} [parameters.certificateCommonNames.commonNames] The list of
     * server certificates referenced by common name that are used to secure the
     * cluster.
     *
     * @param {string} [parameters.certificateCommonNames.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {array} [parameters.clientCertificateCommonNames] The list of client
     * certificates referenced by common name that are allowed to manage the
     * cluster. This will overwrite the existing list.
     *
     * @param {array} [parameters.clientCertificateThumbprints] The list of client
     * certificates referenced by thumbprint that are allowed to manage the
     * cluster. This will overwrite the existing list.
     *
     * @param {string} [parameters.clusterCodeVersion] The Service Fabric runtime
     * version of the cluster. This property can only by set the user when
     * **upgradeMode** is set to 'Manual'. To get list of available Service Fabric
     * versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To
     * get the list of available version for existing clusters use
     * **availableClusterVersions**.
     *
     * @param {array} [parameters.fabricSettings] The list of custom fabric
     * settings to configure the cluster. This will overwrite the existing list.
     *
     * @param {array} [parameters.nodeTypes] The list of node types in the cluster.
     * This will overwrite the existing list.
     *
     * @param {string} [parameters.reliabilityLevel] The reliability level sets the
     * replica set size of system services. Learn about
     * [ReliabilityLevel](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity).
     *
     * - None - Run the System services with a target replica set count of 1. This
     * should only be used for test clusters.
     * - Bronze - Run the System services with a target replica set count of 3.
     * This should only be used for test clusters.
     * - Silver - Run the System services with a target replica set count of 5.
     * - Gold - Run the System services with a target replica set count of 7.
     * - Platinum - Run the System services with a target replica set count of 9.
     * . Possible values include: 'None', 'Bronze', 'Silver', 'Gold', 'Platinum'
     *
     * @param {object} [parameters.reverseProxyCertificate] The server certificate
     * used by reverse proxy.
     *
     * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
     * the primary certificate.
     *
     * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
     * Thumbprint of the secondary certificate.
     *
     * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {object} [parameters.upgradeDescription] The policy to use when
     * upgrading the cluster.
     *
     * @param {boolean} [parameters.upgradeDescription.forceRestart] If true, then
     * processes are forcefully restarted during upgrade even when the code version
     * has not changed (the upgrade only changes configuration or data).
     *
     * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
     * The maximum amount of time to block processing of an upgrade domain and
     * revent loss of availability when there are unexpected issues. When this
     * timeout expires, processing of the upgrade domain will proceed regardless of
     * availability loss issues. The timeout is reset at the start of each upgrade
     * domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
     * length of time to wait after completing an upgrade domain before performing
     * health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
     * format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
     * amount of time that the application or cluster must remain healthy before
     * the upgrade proceeds to the next upgrade domain. The duration can be in
     * either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
     * amount of time to retry health evaluation when the application or cluster is
     * unhealthy before the upgrade rolls back. The timeout can be in either
     * hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.upgradeTimeout The amount of
     * time the overall upgrade has to complete before the upgrade rolls back. The
     * timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
     * amount of time each upgrade domain has to complete before the upgrade rolls
     * back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     *
     * @param {object} parameters.upgradeDescription.healthPolicy The cluster
     * health policy used when upgrading the cluster.
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
     * maximum allowed percentage of unhealthy nodes before reporting an error. For
     * example, to allow 10% of nodes to be unhealthy, this value would be 10.
     *
     * The percentage represents the maximum tolerated percentage of nodes that can
     * be unhealthy before the cluster is considered in error.
     * If the percentage is respected but there is at least one unhealthy node, the
     * health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy nodes over
     * the total number of nodes in the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     * In large clusters, some nodes will always be down or out for repairs, so
     * this percentage should be configured to tolerate that.
     *
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * The maximum allowed percentage of unhealthy applications before reporting an
     * error. For example, to allow 10% of applications to be unhealthy, this value
     * would be 10.
     *
     * The percentage represents the maximum tolerated percentage of applications
     * that can be unhealthy before the cluster is considered in error.
     * If the percentage is respected but there is at least one unhealthy
     * application, the health is evaluated as Warning.
     * This is calculated by dividing the number of unhealthy applications over the
     * total number of application instances in the cluster, excluding applications
     * of application types that are included in the
     * ApplicationTypeHealthPolicyMap.
     * The computation rounds up to tolerate one failure on small numbers of
     * applications. Default percentage is zero.
     *
     *
     * @param {array}
     * [parameters.upgradeDescription.healthPolicy.applicationHealthPolicies]
     * Defines the application health policy map used to evaluate the health of an
     * application or one of its children entities.
     *
     * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] The
     * cluster delta health policy used when upgrading the cluster.
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
     * The maximum allowed percentage of nodes health degradation allowed during
     * cluster upgrades.
     * The delta is measured between the state of the nodes at the beginning of
     * upgrade and the state of the nodes at the time of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion to make
     * sure the global state of the cluster is within tolerated limits.
     *
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
     * The maximum allowed percentage of upgrade domain nodes health degradation
     * allowed during cluster upgrades.
     * The delta is measured between the state of the upgrade domain nodes at the
     * beginning of upgrade and the state of the upgrade domain nodes at the time
     * of the health evaluation.
     * The check is performed after every upgrade domain upgrade completion for all
     * completed upgrade domains to make sure the state of the upgrade domains is
     * within tolerated limits.
     *
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
     * The maximum allowed percentage of applications health degradation allowed
     * during cluster upgrades.
     * The delta is measured between the state of the applications at the beginning
     * of upgrade and the state of the applications at the time of the health
     * evaluation.
     * The check is performed after every upgrade domain upgrade completion to make
     * sure the global state of the cluster is within tolerated limits. System
     * services are not included in this.
     *
     *
     * @param {array}
     * [parameters.upgradeDescription.deltaHealthPolicy.applicationDeltaHealthPolicies]
     * Defines the application delta health policy map used to evaluate the health
     * of an application or one of its child entities when upgrading the cluster.
     *
     * @param {string} [parameters.upgradeMode] The upgrade mode of the cluster
     * when new Service Fabric runtime version is available.
     *
     * - Automatic - The cluster will be automatically upgraded to the latest
     * Service Fabric runtime version as soon as it is available.
     * - Manual - The cluster will not be automatically upgraded to the latest
     * Service Fabric runtime version. The cluster is upgraded by setting the
     * **clusterCodeVersion** property in the cluster resource.
     * . Possible values include: 'Automatic', 'Manual'
     *
     * @param {object} [parameters.tags] Cluster update parameters
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, clusterName: string, subscriptionId: string, parameters: models.ClusterUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    beginUpdate(resourceGroupName: string, clusterName: string, subscriptionId: string, parameters: models.ClusterUpdateParameters, callback: ServiceCallback<models.Cluster>): void;
    beginUpdate(resourceGroupName: string, clusterName: string, subscriptionId: string, parameters: models.ClusterUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;
}

/**
 * @class
 * ClusterVersions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricManagementClient.
 */
export interface ClusterVersions {


    /**
     * @summary Gets information about a Service Fabric cluster code version
     * available in the specified location.
     *
     * Gets information about an available Service Fabric cluster code version.
     *
     * @param {string} location The location for the cluster code versions. This is
     * different from cluster location.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} clusterVersion The cluster code version.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterCodeVersionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(location: string, subscriptionId: string, clusterVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterCodeVersionsListResult>>;

    /**
     * @summary Gets information about a Service Fabric cluster code version
     * available in the specified location.
     *
     * Gets information about an available Service Fabric cluster code version.
     *
     * @param {string} location The location for the cluster code versions. This is
     * different from cluster location.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} clusterVersion The cluster code version.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterCodeVersionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterCodeVersionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterCodeVersionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(location: string, subscriptionId: string, clusterVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterCodeVersionsListResult>;
    get(location: string, subscriptionId: string, clusterVersion: string, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;
    get(location: string, subscriptionId: string, clusterVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;


    /**
     * @summary Gets information about a Service Fabric cluster code version
     * available for the specified environment.
     *
     * Gets information about an available Service Fabric cluster code version by
     * environment.
     *
     * @param {string} location The location for the cluster code versions. This is
     * different from cluster location.
     *
     * @param {string} environment The operating system of the cluster. The default
     * means all. Possible values include: 'Windows', 'Linux'
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} clusterVersion The cluster code version.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterCodeVersionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByEnvironmentWithHttpOperationResponse(location: string, environment: string, subscriptionId: string, clusterVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterCodeVersionsListResult>>;

    /**
     * @summary Gets information about a Service Fabric cluster code version
     * available for the specified environment.
     *
     * Gets information about an available Service Fabric cluster code version by
     * environment.
     *
     * @param {string} location The location for the cluster code versions. This is
     * different from cluster location.
     *
     * @param {string} environment The operating system of the cluster. The default
     * means all. Possible values include: 'Windows', 'Linux'
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} clusterVersion The cluster code version.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterCodeVersionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterCodeVersionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterCodeVersionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByEnvironment(location: string, environment: string, subscriptionId: string, clusterVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterCodeVersionsListResult>;
    getByEnvironment(location: string, environment: string, subscriptionId: string, clusterVersion: string, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;
    getByEnvironment(location: string, environment: string, subscriptionId: string, clusterVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;


    /**
     * @summary Gets the list of Service Fabric cluster code versions available for
     * the specified location.
     *
     * Gets all available code versions for Service Fabric cluster resources by
     * location.
     *
     * @param {string} location The location for the cluster code versions. This is
     * different from cluster location.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterCodeVersionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(location: string, subscriptionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterCodeVersionsListResult>>;

    /**
     * @summary Gets the list of Service Fabric cluster code versions available for
     * the specified location.
     *
     * Gets all available code versions for Service Fabric cluster resources by
     * location.
     *
     * @param {string} location The location for the cluster code versions. This is
     * different from cluster location.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterCodeVersionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterCodeVersionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterCodeVersionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(location: string, subscriptionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterCodeVersionsListResult>;
    list(location: string, subscriptionId: string, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;
    list(location: string, subscriptionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;


    /**
     * @summary Gets the list of Service Fabric cluster code versions available for
     * the specified environment.
     *
     * Gets all available code versions for Service Fabric cluster resources by
     * environment.
     *
     * @param {string} location The location for the cluster code versions. This is
     * different from cluster location.
     *
     * @param {string} environment The operating system of the cluster. The default
     * means all. Possible values include: 'Windows', 'Linux'
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterCodeVersionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByEnvironmentWithHttpOperationResponse(location: string, environment: string, subscriptionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterCodeVersionsListResult>>;

    /**
     * @summary Gets the list of Service Fabric cluster code versions available for
     * the specified environment.
     *
     * Gets all available code versions for Service Fabric cluster resources by
     * environment.
     *
     * @param {string} location The location for the cluster code versions. This is
     * different from cluster location.
     *
     * @param {string} environment The operating system of the cluster. The default
     * means all. Possible values include: 'Windows', 'Linux'
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterCodeVersionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterCodeVersionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterCodeVersionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByEnvironment(location: string, environment: string, subscriptionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterCodeVersionsListResult>;
    listByEnvironment(location: string, environment: string, subscriptionId: string, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;
    listByEnvironment(location: string, environment: string, subscriptionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricManagementClient.
 */
export interface Operations {


    /**
     * @summary Lists all of the available Service Fabric resource provider API
     * operations.
     *
     * Get the list of available Service Fabric resource provider API operations.
     *
     * @param {string} apiVersion The version of the Service Fabric resouce
     * provider API
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * @summary Lists all of the available Service Fabric resource provider API
     * operations.
     *
     * Get the list of available Service Fabric resource provider API operations.
     *
     * @param {string} apiVersion The version of the Service Fabric resouce
     * provider API
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(apiVersion: string, callback: ServiceCallback<models.OperationListResult>): void;
    list(apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * @summary Lists all of the available Service Fabric resource provider API
     * operations.
     *
     * Get the list of available Service Fabric resource provider API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * @summary Lists all of the available Service Fabric resource provider API
     * operations.
     *
     * Get the list of available Service Fabric resource provider API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * ApplicationTypes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricManagementClient.
 */
export interface ApplicationTypes {


    /**
     * @summary Gets a Service Fabric application type name resource.
     *
     * Get a Service Fabric application type name resource created or in the
     * process of being created in the Service Fabric cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationTypeResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationTypeResource>>;

    /**
     * @summary Gets a Service Fabric application type name resource.
     *
     * Get a Service Fabric application type name resource created or in the
     * process of being created in the Service Fabric cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationTypeResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationTypeResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationTypeResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationTypeResource>;
    get(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, callback: ServiceCallback<models.ApplicationTypeResource>): void;
    get(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationTypeResource>): void;


    /**
     * @summary Creates or updates a Service Fabric application type name resource.
     *
     * Create or update a Service Fabric application type name resource with the
     * specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {object} parameters The application type name resource.
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationTypeResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, parameters: models.ApplicationTypeResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationTypeResource>>;

    /**
     * @summary Creates or updates a Service Fabric application type name resource.
     *
     * Create or update a Service Fabric application type name resource with the
     * specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {object} parameters The application type name resource.
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationTypeResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationTypeResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationTypeResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, parameters: models.ApplicationTypeResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationTypeResource>;
    create(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, parameters: models.ApplicationTypeResource, callback: ServiceCallback<models.ApplicationTypeResource>): void;
    create(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, parameters: models.ApplicationTypeResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationTypeResource>): void;


    /**
     * @summary Deletes a Service Fabric application type name resource.
     *
     * Delete a Service Fabric application type name resource with the specified
     * name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a Service Fabric application type name resource.
     *
     * Delete a Service Fabric application type name resource with the specified
     * name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, callback: ServiceCallback<void>): void;
    deleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets the list of application type name resources created in the
     * specified Service Fabric cluster resource.
     *
     * Gets all application type name resources created or in the process of being
     * created in the Service Fabric cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationTypeResourceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationTypeResourceList>>;

    /**
     * @summary Gets the list of application type name resources created in the
     * specified Service Fabric cluster resource.
     *
     * Gets all application type name resources created or in the process of being
     * created in the Service Fabric cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationTypeResourceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationTypeResourceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationTypeResourceList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(subscriptionId: string, resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationTypeResourceList>;
    list(subscriptionId: string, resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.ApplicationTypeResourceList>): void;
    list(subscriptionId: string, resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationTypeResourceList>): void;


    /**
     * @summary Deletes a Service Fabric application type name resource.
     *
     * Delete a Service Fabric application type name resource with the specified
     * name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a Service Fabric application type name resource.
     *
     * Delete a Service Fabric application type name resource with the specified
     * name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * ApplicationTypeVersions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricManagementClient.
 */
export interface ApplicationTypeVersions {


    /**
     * @summary Gets a Service Fabric application type version resource.
     *
     * Get a Service Fabric application type version resource created or in the
     * process of being created in the Service Fabric application type name
     * resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {string} version The application type version.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationTypeVersionResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationTypeVersionResource>>;

    /**
     * @summary Gets a Service Fabric application type version resource.
     *
     * Get a Service Fabric application type version resource created or in the
     * process of being created in the Service Fabric application type name
     * resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {string} version The application type version.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationTypeVersionResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationTypeVersionResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationTypeVersionResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationTypeVersionResource>;
    get(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, callback: ServiceCallback<models.ApplicationTypeVersionResource>): void;
    get(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationTypeVersionResource>): void;


    /**
     * @summary Creates or updates a Service Fabric application type version
     * resource.
     *
     * Create or update a Service Fabric application type version resource with the
     * specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {string} version The application type version.
     *
     * @param {object} parameters The application type version resource.
     *
     * @param {string} parameters.appPackageUrl The URL to the application package
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationTypeVersionResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, parameters: models.ApplicationTypeVersionResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationTypeVersionResource>>;

    /**
     * @summary Creates or updates a Service Fabric application type version
     * resource.
     *
     * Create or update a Service Fabric application type version resource with the
     * specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {string} version The application type version.
     *
     * @param {object} parameters The application type version resource.
     *
     * @param {string} parameters.appPackageUrl The URL to the application package
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationTypeVersionResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationTypeVersionResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationTypeVersionResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, parameters: models.ApplicationTypeVersionResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationTypeVersionResource>;
    create(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, parameters: models.ApplicationTypeVersionResource, callback: ServiceCallback<models.ApplicationTypeVersionResource>): void;
    create(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, parameters: models.ApplicationTypeVersionResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationTypeVersionResource>): void;


    /**
     * @summary Deletes a Service Fabric application type version resource.
     *
     * Delete a Service Fabric application type version resource with the specified
     * name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {string} version The application type version.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a Service Fabric application type version resource.
     *
     * Delete a Service Fabric application type version resource with the specified
     * name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {string} version The application type version.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, callback: ServiceCallback<void>): void;
    deleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets the list of application type version resources created in the
     * specified Service Fabric application type name resource.
     *
     * Gets all application type version resources created or in the process of
     * being created in the Service Fabric application type name resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationTypeVersionResourceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationTypeVersionResourceList>>;

    /**
     * @summary Gets the list of application type version resources created in the
     * specified Service Fabric application type name resource.
     *
     * Gets all application type version resources created or in the process of
     * being created in the Service Fabric application type name resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationTypeVersionResourceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationTypeVersionResourceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationTypeVersionResourceList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationTypeVersionResourceList>;
    list(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, callback: ServiceCallback<models.ApplicationTypeVersionResourceList>): void;
    list(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationTypeVersionResourceList>): void;


    /**
     * @summary Creates or updates a Service Fabric application type version
     * resource.
     *
     * Create or update a Service Fabric application type version resource with the
     * specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {string} version The application type version.
     *
     * @param {object} parameters The application type version resource.
     *
     * @param {string} parameters.appPackageUrl The URL to the application package
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationTypeVersionResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, parameters: models.ApplicationTypeVersionResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationTypeVersionResource>>;

    /**
     * @summary Creates or updates a Service Fabric application type version
     * resource.
     *
     * Create or update a Service Fabric application type version resource with the
     * specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {string} version The application type version.
     *
     * @param {object} parameters The application type version resource.
     *
     * @param {string} parameters.appPackageUrl The URL to the application package
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationTypeVersionResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationTypeVersionResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationTypeVersionResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, parameters: models.ApplicationTypeVersionResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationTypeVersionResource>;
    beginCreate(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, parameters: models.ApplicationTypeVersionResource, callback: ServiceCallback<models.ApplicationTypeVersionResource>): void;
    beginCreate(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, parameters: models.ApplicationTypeVersionResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationTypeVersionResource>): void;


    /**
     * @summary Deletes a Service Fabric application type version resource.
     *
     * Delete a Service Fabric application type version resource with the specified
     * name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {string} version The application type version.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a Service Fabric application type version resource.
     *
     * Delete a Service Fabric application type version resource with the specified
     * name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationTypeName The name of the application type name
     * resource.
     *
     * @param {string} version The application type version.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationTypeName: string, version: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Applications
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricManagementClient.
 */
export interface Applications {


    /**
     * @summary Gets a Service Fabric application resource.
     *
     * Get a Service Fabric application resource created or in the process of being
     * created in the Service Fabric cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationResource>>;

    /**
     * @summary Gets a Service Fabric application resource.
     *
     * Get a Service Fabric application resource created or in the process of being
     * created in the Service Fabric cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationResource>;
    get(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, callback: ServiceCallback<models.ApplicationResource>): void;
    get(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationResource>): void;


    /**
     * @summary Creates or updates a Service Fabric application resource.
     *
     * Create or update a Service Fabric application resource with the specified
     * name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {object} parameters The application resource.
     *
     * @param {string} [parameters.typeVersion] The version of the application type
     * as defined in the application manifest.
     *
     * @param {array} [parameters.parameters] List of application parameters with
     * overridden values from their default values specified in the application
     * manifest.
     *
     * @param {object} [parameters.upgradePolicy] Describes the policy for a
     * monitored application upgrade.
     *
     * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
     * maximum amount of time to block processing of an upgrade domain and prevent
     * loss of availability when there are unexpected issues. When this timeout
     * expires, processing of the upgrade domain will proceed regardless of
     * availability loss issues. The timeout is reset at the start of each upgrade
     * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
     * 32-bit integer).
     *
     * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
     * processes are forcefully restarted during upgrade even when the code version
     * has not changed (the upgrade only changes configuration or data).
     *
     * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
     * The policy used for monitoring the application upgrade
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
     * The amount of time to wait after completing an upgrade domain before
     * applying health policies. It is first interpreted as a string representing
     * an ISO 8601 duration. If that fails, then it is interpreted as a number
     * representing the total number of milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
     * The amount of time that the application or cluster must remain healthy
     * before the upgrade proceeds to the next upgrade domain. It is first
     * interpreted as a string representing an ISO 8601 duration. If that fails,
     * then it is interpreted as a number representing the total number of
     * milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
     * The amount of time to retry health evaluation when the application or
     * cluster is unhealthy before FailureAction is executed. It is first
     * interpreted as a string representing an ISO 8601 duration. If that fails,
     * then it is interpreted as a number representing the total number of
     * milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
     * amount of time the overall upgrade has to complete before FailureAction is
     * executed. It is first interpreted as a string representing an ISO 8601
     * duration. If that fails, then it is interpreted as a number representing the
     * total number of milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
     * The amount of time each upgrade domain has to complete before FailureAction
     * is executed. It is first interpreted as a string representing an ISO 8601
     * duration. If that fails, then it is interpreted as a number representing the
     * total number of milliseconds.
     *
     * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
     * health policy used to evaluate the health of an application or one of its
     * children entities.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
     * The health policy used by default to evaluate the health of a service type.
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
     * The map with service type health policy per service type name. The map is
     * empty by default.
     *
     * @param {boolean}
     * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
     * Indicates whether warnings are treated with the same severity as errors.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
     * The maximum allowed percentage of unhealthy deployed applications. Allowed
     * values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed
     * applications that can be unhealthy before the application is considered in
     * error.
     * This is calculated by dividing the number of unhealthy deployed applications
     * over the number of nodes where the application is currently deployed on in
     * the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
     * The health policy used by default to evaluate the health of a service type.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
     * The maximum percentage of services allowed to be unhealthy before your
     * application is considered in error.
     *
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
     * The map with service type health policy per service type name. The map is
     * empty by default.
     *
     * @param {number} [parameters.minimumNodes] The minimum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. If this property is set to zero, no capacity will be reserved.
     * The value of this property cannot be more than the value of the MaximumNodes
     * property.
     *
     * @param {number} [parameters.maximumNodes] The maximum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. By default, the value of this property is zero and it means
     * that the services can be placed on any node.
     *
     * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
     * application capacity settings.
     *
     * @param {array} [parameters.metrics] List of application capacity metric
     * description.
     *
     * @param {string} [parameters.typeName] The application type name as defined
     * in the application manifest.
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.ApplicationResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationResource>>;

    /**
     * @summary Creates or updates a Service Fabric application resource.
     *
     * Create or update a Service Fabric application resource with the specified
     * name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {object} parameters The application resource.
     *
     * @param {string} [parameters.typeVersion] The version of the application type
     * as defined in the application manifest.
     *
     * @param {array} [parameters.parameters] List of application parameters with
     * overridden values from their default values specified in the application
     * manifest.
     *
     * @param {object} [parameters.upgradePolicy] Describes the policy for a
     * monitored application upgrade.
     *
     * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
     * maximum amount of time to block processing of an upgrade domain and prevent
     * loss of availability when there are unexpected issues. When this timeout
     * expires, processing of the upgrade domain will proceed regardless of
     * availability loss issues. The timeout is reset at the start of each upgrade
     * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
     * 32-bit integer).
     *
     * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
     * processes are forcefully restarted during upgrade even when the code version
     * has not changed (the upgrade only changes configuration or data).
     *
     * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
     * The policy used for monitoring the application upgrade
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
     * The amount of time to wait after completing an upgrade domain before
     * applying health policies. It is first interpreted as a string representing
     * an ISO 8601 duration. If that fails, then it is interpreted as a number
     * representing the total number of milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
     * The amount of time that the application or cluster must remain healthy
     * before the upgrade proceeds to the next upgrade domain. It is first
     * interpreted as a string representing an ISO 8601 duration. If that fails,
     * then it is interpreted as a number representing the total number of
     * milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
     * The amount of time to retry health evaluation when the application or
     * cluster is unhealthy before FailureAction is executed. It is first
     * interpreted as a string representing an ISO 8601 duration. If that fails,
     * then it is interpreted as a number representing the total number of
     * milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
     * amount of time the overall upgrade has to complete before FailureAction is
     * executed. It is first interpreted as a string representing an ISO 8601
     * duration. If that fails, then it is interpreted as a number representing the
     * total number of milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
     * The amount of time each upgrade domain has to complete before FailureAction
     * is executed. It is first interpreted as a string representing an ISO 8601
     * duration. If that fails, then it is interpreted as a number representing the
     * total number of milliseconds.
     *
     * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
     * health policy used to evaluate the health of an application or one of its
     * children entities.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
     * The health policy used by default to evaluate the health of a service type.
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
     * The map with service type health policy per service type name. The map is
     * empty by default.
     *
     * @param {boolean}
     * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
     * Indicates whether warnings are treated with the same severity as errors.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
     * The maximum allowed percentage of unhealthy deployed applications. Allowed
     * values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed
     * applications that can be unhealthy before the application is considered in
     * error.
     * This is calculated by dividing the number of unhealthy deployed applications
     * over the number of nodes where the application is currently deployed on in
     * the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
     * The health policy used by default to evaluate the health of a service type.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
     * The maximum percentage of services allowed to be unhealthy before your
     * application is considered in error.
     *
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
     * The map with service type health policy per service type name. The map is
     * empty by default.
     *
     * @param {number} [parameters.minimumNodes] The minimum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. If this property is set to zero, no capacity will be reserved.
     * The value of this property cannot be more than the value of the MaximumNodes
     * property.
     *
     * @param {number} [parameters.maximumNodes] The maximum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. By default, the value of this property is zero and it means
     * that the services can be placed on any node.
     *
     * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
     * application capacity settings.
     *
     * @param {array} [parameters.metrics] List of application capacity metric
     * description.
     *
     * @param {string} [parameters.typeName] The application type name as defined
     * in the application manifest.
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.ApplicationResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationResource>;
    create(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.ApplicationResource, callback: ServiceCallback<models.ApplicationResource>): void;
    create(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.ApplicationResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationResource>): void;


    /**
     * @summary Updates a Service Fabric application resource.
     *
     * Update a Service Fabric application resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {object} parameters The application resource for patch operations.
     *
     * @param {string} [parameters.typeVersion] The version of the application type
     * as defined in the application manifest.
     *
     * @param {array} [parameters.parameters] List of application parameters with
     * overridden values from their default values specified in the application
     * manifest.
     *
     * @param {object} [parameters.upgradePolicy] Describes the policy for a
     * monitored application upgrade.
     *
     * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
     * maximum amount of time to block processing of an upgrade domain and prevent
     * loss of availability when there are unexpected issues. When this timeout
     * expires, processing of the upgrade domain will proceed regardless of
     * availability loss issues. The timeout is reset at the start of each upgrade
     * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
     * 32-bit integer).
     *
     * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
     * processes are forcefully restarted during upgrade even when the code version
     * has not changed (the upgrade only changes configuration or data).
     *
     * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
     * The policy used for monitoring the application upgrade
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
     * The amount of time to wait after completing an upgrade domain before
     * applying health policies. It is first interpreted as a string representing
     * an ISO 8601 duration. If that fails, then it is interpreted as a number
     * representing the total number of milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
     * The amount of time that the application or cluster must remain healthy
     * before the upgrade proceeds to the next upgrade domain. It is first
     * interpreted as a string representing an ISO 8601 duration. If that fails,
     * then it is interpreted as a number representing the total number of
     * milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
     * The amount of time to retry health evaluation when the application or
     * cluster is unhealthy before FailureAction is executed. It is first
     * interpreted as a string representing an ISO 8601 duration. If that fails,
     * then it is interpreted as a number representing the total number of
     * milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
     * amount of time the overall upgrade has to complete before FailureAction is
     * executed. It is first interpreted as a string representing an ISO 8601
     * duration. If that fails, then it is interpreted as a number representing the
     * total number of milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
     * The amount of time each upgrade domain has to complete before FailureAction
     * is executed. It is first interpreted as a string representing an ISO 8601
     * duration. If that fails, then it is interpreted as a number representing the
     * total number of milliseconds.
     *
     * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
     * health policy used to evaluate the health of an application or one of its
     * children entities.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
     * The health policy used by default to evaluate the health of a service type.
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
     * The map with service type health policy per service type name. The map is
     * empty by default.
     *
     * @param {boolean}
     * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
     * Indicates whether warnings are treated with the same severity as errors.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
     * The maximum allowed percentage of unhealthy deployed applications. Allowed
     * values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed
     * applications that can be unhealthy before the application is considered in
     * error.
     * This is calculated by dividing the number of unhealthy deployed applications
     * over the number of nodes where the application is currently deployed on in
     * the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
     * The health policy used by default to evaluate the health of a service type.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
     * The maximum percentage of services allowed to be unhealthy before your
     * application is considered in error.
     *
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
     * The map with service type health policy per service type name. The map is
     * empty by default.
     *
     * @param {number} [parameters.minimumNodes] The minimum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. If this property is set to zero, no capacity will be reserved.
     * The value of this property cannot be more than the value of the MaximumNodes
     * property.
     *
     * @param {number} [parameters.maximumNodes] The maximum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. By default, the value of this property is zero and it means
     * that the services can be placed on any node.
     *
     * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
     * application capacity settings.
     *
     * @param {array} [parameters.metrics] List of application capacity metric
     * description.
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationResourceUpdate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.ApplicationResourceUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationResourceUpdate>>;

    /**
     * @summary Updates a Service Fabric application resource.
     *
     * Update a Service Fabric application resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {object} parameters The application resource for patch operations.
     *
     * @param {string} [parameters.typeVersion] The version of the application type
     * as defined in the application manifest.
     *
     * @param {array} [parameters.parameters] List of application parameters with
     * overridden values from their default values specified in the application
     * manifest.
     *
     * @param {object} [parameters.upgradePolicy] Describes the policy for a
     * monitored application upgrade.
     *
     * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
     * maximum amount of time to block processing of an upgrade domain and prevent
     * loss of availability when there are unexpected issues. When this timeout
     * expires, processing of the upgrade domain will proceed regardless of
     * availability loss issues. The timeout is reset at the start of each upgrade
     * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
     * 32-bit integer).
     *
     * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
     * processes are forcefully restarted during upgrade even when the code version
     * has not changed (the upgrade only changes configuration or data).
     *
     * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
     * The policy used for monitoring the application upgrade
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
     * The amount of time to wait after completing an upgrade domain before
     * applying health policies. It is first interpreted as a string representing
     * an ISO 8601 duration. If that fails, then it is interpreted as a number
     * representing the total number of milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
     * The amount of time that the application or cluster must remain healthy
     * before the upgrade proceeds to the next upgrade domain. It is first
     * interpreted as a string representing an ISO 8601 duration. If that fails,
     * then it is interpreted as a number representing the total number of
     * milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
     * The amount of time to retry health evaluation when the application or
     * cluster is unhealthy before FailureAction is executed. It is first
     * interpreted as a string representing an ISO 8601 duration. If that fails,
     * then it is interpreted as a number representing the total number of
     * milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
     * amount of time the overall upgrade has to complete before FailureAction is
     * executed. It is first interpreted as a string representing an ISO 8601
     * duration. If that fails, then it is interpreted as a number representing the
     * total number of milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
     * The amount of time each upgrade domain has to complete before FailureAction
     * is executed. It is first interpreted as a string representing an ISO 8601
     * duration. If that fails, then it is interpreted as a number representing the
     * total number of milliseconds.
     *
     * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
     * health policy used to evaluate the health of an application or one of its
     * children entities.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
     * The health policy used by default to evaluate the health of a service type.
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
     * The map with service type health policy per service type name. The map is
     * empty by default.
     *
     * @param {boolean}
     * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
     * Indicates whether warnings are treated with the same severity as errors.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
     * The maximum allowed percentage of unhealthy deployed applications. Allowed
     * values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed
     * applications that can be unhealthy before the application is considered in
     * error.
     * This is calculated by dividing the number of unhealthy deployed applications
     * over the number of nodes where the application is currently deployed on in
     * the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
     * The health policy used by default to evaluate the health of a service type.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
     * The maximum percentage of services allowed to be unhealthy before your
     * application is considered in error.
     *
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
     * The map with service type health policy per service type name. The map is
     * empty by default.
     *
     * @param {number} [parameters.minimumNodes] The minimum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. If this property is set to zero, no capacity will be reserved.
     * The value of this property cannot be more than the value of the MaximumNodes
     * property.
     *
     * @param {number} [parameters.maximumNodes] The maximum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. By default, the value of this property is zero and it means
     * that the services can be placed on any node.
     *
     * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
     * application capacity settings.
     *
     * @param {array} [parameters.metrics] List of application capacity metric
     * description.
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationResourceUpdate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationResourceUpdate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationResourceUpdate} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.ApplicationResourceUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationResourceUpdate>;
    update(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.ApplicationResourceUpdate, callback: ServiceCallback<models.ApplicationResourceUpdate>): void;
    update(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.ApplicationResourceUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationResourceUpdate>): void;


    /**
     * @summary Deletes a Service Fabric application resource.
     *
     * Delete a Service Fabric application resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a Service Fabric application resource.
     *
     * Delete a Service Fabric application resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, callback: ServiceCallback<void>): void;
    deleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets the list of application resources created in the specified
     * Service Fabric cluster resource.
     *
     * Gets all application resources created or in the process of being created in
     * the Service Fabric cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationResourceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationResourceList>>;

    /**
     * @summary Gets the list of application resources created in the specified
     * Service Fabric cluster resource.
     *
     * Gets all application resources created or in the process of being created in
     * the Service Fabric cluster resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationResourceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationResourceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationResourceList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(subscriptionId: string, resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationResourceList>;
    list(subscriptionId: string, resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.ApplicationResourceList>): void;
    list(subscriptionId: string, resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationResourceList>): void;


    /**
     * @summary Creates or updates a Service Fabric application resource.
     *
     * Create or update a Service Fabric application resource with the specified
     * name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {object} parameters The application resource.
     *
     * @param {string} [parameters.typeVersion] The version of the application type
     * as defined in the application manifest.
     *
     * @param {array} [parameters.parameters] List of application parameters with
     * overridden values from their default values specified in the application
     * manifest.
     *
     * @param {object} [parameters.upgradePolicy] Describes the policy for a
     * monitored application upgrade.
     *
     * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
     * maximum amount of time to block processing of an upgrade domain and prevent
     * loss of availability when there are unexpected issues. When this timeout
     * expires, processing of the upgrade domain will proceed regardless of
     * availability loss issues. The timeout is reset at the start of each upgrade
     * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
     * 32-bit integer).
     *
     * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
     * processes are forcefully restarted during upgrade even when the code version
     * has not changed (the upgrade only changes configuration or data).
     *
     * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
     * The policy used for monitoring the application upgrade
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
     * The amount of time to wait after completing an upgrade domain before
     * applying health policies. It is first interpreted as a string representing
     * an ISO 8601 duration. If that fails, then it is interpreted as a number
     * representing the total number of milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
     * The amount of time that the application or cluster must remain healthy
     * before the upgrade proceeds to the next upgrade domain. It is first
     * interpreted as a string representing an ISO 8601 duration. If that fails,
     * then it is interpreted as a number representing the total number of
     * milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
     * The amount of time to retry health evaluation when the application or
     * cluster is unhealthy before FailureAction is executed. It is first
     * interpreted as a string representing an ISO 8601 duration. If that fails,
     * then it is interpreted as a number representing the total number of
     * milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
     * amount of time the overall upgrade has to complete before FailureAction is
     * executed. It is first interpreted as a string representing an ISO 8601
     * duration. If that fails, then it is interpreted as a number representing the
     * total number of milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
     * The amount of time each upgrade domain has to complete before FailureAction
     * is executed. It is first interpreted as a string representing an ISO 8601
     * duration. If that fails, then it is interpreted as a number representing the
     * total number of milliseconds.
     *
     * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
     * health policy used to evaluate the health of an application or one of its
     * children entities.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
     * The health policy used by default to evaluate the health of a service type.
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
     * The map with service type health policy per service type name. The map is
     * empty by default.
     *
     * @param {boolean}
     * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
     * Indicates whether warnings are treated with the same severity as errors.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
     * The maximum allowed percentage of unhealthy deployed applications. Allowed
     * values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed
     * applications that can be unhealthy before the application is considered in
     * error.
     * This is calculated by dividing the number of unhealthy deployed applications
     * over the number of nodes where the application is currently deployed on in
     * the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
     * The health policy used by default to evaluate the health of a service type.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
     * The maximum percentage of services allowed to be unhealthy before your
     * application is considered in error.
     *
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
     * The map with service type health policy per service type name. The map is
     * empty by default.
     *
     * @param {number} [parameters.minimumNodes] The minimum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. If this property is set to zero, no capacity will be reserved.
     * The value of this property cannot be more than the value of the MaximumNodes
     * property.
     *
     * @param {number} [parameters.maximumNodes] The maximum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. By default, the value of this property is zero and it means
     * that the services can be placed on any node.
     *
     * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
     * application capacity settings.
     *
     * @param {array} [parameters.metrics] List of application capacity metric
     * description.
     *
     * @param {string} [parameters.typeName] The application type name as defined
     * in the application manifest.
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.ApplicationResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationResource>>;

    /**
     * @summary Creates or updates a Service Fabric application resource.
     *
     * Create or update a Service Fabric application resource with the specified
     * name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {object} parameters The application resource.
     *
     * @param {string} [parameters.typeVersion] The version of the application type
     * as defined in the application manifest.
     *
     * @param {array} [parameters.parameters] List of application parameters with
     * overridden values from their default values specified in the application
     * manifest.
     *
     * @param {object} [parameters.upgradePolicy] Describes the policy for a
     * monitored application upgrade.
     *
     * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
     * maximum amount of time to block processing of an upgrade domain and prevent
     * loss of availability when there are unexpected issues. When this timeout
     * expires, processing of the upgrade domain will proceed regardless of
     * availability loss issues. The timeout is reset at the start of each upgrade
     * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
     * 32-bit integer).
     *
     * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
     * processes are forcefully restarted during upgrade even when the code version
     * has not changed (the upgrade only changes configuration or data).
     *
     * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
     * The policy used for monitoring the application upgrade
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
     * The amount of time to wait after completing an upgrade domain before
     * applying health policies. It is first interpreted as a string representing
     * an ISO 8601 duration. If that fails, then it is interpreted as a number
     * representing the total number of milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
     * The amount of time that the application or cluster must remain healthy
     * before the upgrade proceeds to the next upgrade domain. It is first
     * interpreted as a string representing an ISO 8601 duration. If that fails,
     * then it is interpreted as a number representing the total number of
     * milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
     * The amount of time to retry health evaluation when the application or
     * cluster is unhealthy before FailureAction is executed. It is first
     * interpreted as a string representing an ISO 8601 duration. If that fails,
     * then it is interpreted as a number representing the total number of
     * milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
     * amount of time the overall upgrade has to complete before FailureAction is
     * executed. It is first interpreted as a string representing an ISO 8601
     * duration. If that fails, then it is interpreted as a number representing the
     * total number of milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
     * The amount of time each upgrade domain has to complete before FailureAction
     * is executed. It is first interpreted as a string representing an ISO 8601
     * duration. If that fails, then it is interpreted as a number representing the
     * total number of milliseconds.
     *
     * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
     * health policy used to evaluate the health of an application or one of its
     * children entities.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
     * The health policy used by default to evaluate the health of a service type.
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
     * The map with service type health policy per service type name. The map is
     * empty by default.
     *
     * @param {boolean}
     * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
     * Indicates whether warnings are treated with the same severity as errors.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
     * The maximum allowed percentage of unhealthy deployed applications. Allowed
     * values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed
     * applications that can be unhealthy before the application is considered in
     * error.
     * This is calculated by dividing the number of unhealthy deployed applications
     * over the number of nodes where the application is currently deployed on in
     * the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
     * The health policy used by default to evaluate the health of a service type.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
     * The maximum percentage of services allowed to be unhealthy before your
     * application is considered in error.
     *
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
     * The map with service type health policy per service type name. The map is
     * empty by default.
     *
     * @param {number} [parameters.minimumNodes] The minimum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. If this property is set to zero, no capacity will be reserved.
     * The value of this property cannot be more than the value of the MaximumNodes
     * property.
     *
     * @param {number} [parameters.maximumNodes] The maximum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. By default, the value of this property is zero and it means
     * that the services can be placed on any node.
     *
     * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
     * application capacity settings.
     *
     * @param {array} [parameters.metrics] List of application capacity metric
     * description.
     *
     * @param {string} [parameters.typeName] The application type name as defined
     * in the application manifest.
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.ApplicationResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationResource>;
    beginCreate(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.ApplicationResource, callback: ServiceCallback<models.ApplicationResource>): void;
    beginCreate(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.ApplicationResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationResource>): void;


    /**
     * @summary Updates a Service Fabric application resource.
     *
     * Update a Service Fabric application resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {object} parameters The application resource for patch operations.
     *
     * @param {string} [parameters.typeVersion] The version of the application type
     * as defined in the application manifest.
     *
     * @param {array} [parameters.parameters] List of application parameters with
     * overridden values from their default values specified in the application
     * manifest.
     *
     * @param {object} [parameters.upgradePolicy] Describes the policy for a
     * monitored application upgrade.
     *
     * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
     * maximum amount of time to block processing of an upgrade domain and prevent
     * loss of availability when there are unexpected issues. When this timeout
     * expires, processing of the upgrade domain will proceed regardless of
     * availability loss issues. The timeout is reset at the start of each upgrade
     * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
     * 32-bit integer).
     *
     * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
     * processes are forcefully restarted during upgrade even when the code version
     * has not changed (the upgrade only changes configuration or data).
     *
     * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
     * The policy used for monitoring the application upgrade
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
     * The amount of time to wait after completing an upgrade domain before
     * applying health policies. It is first interpreted as a string representing
     * an ISO 8601 duration. If that fails, then it is interpreted as a number
     * representing the total number of milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
     * The amount of time that the application or cluster must remain healthy
     * before the upgrade proceeds to the next upgrade domain. It is first
     * interpreted as a string representing an ISO 8601 duration. If that fails,
     * then it is interpreted as a number representing the total number of
     * milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
     * The amount of time to retry health evaluation when the application or
     * cluster is unhealthy before FailureAction is executed. It is first
     * interpreted as a string representing an ISO 8601 duration. If that fails,
     * then it is interpreted as a number representing the total number of
     * milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
     * amount of time the overall upgrade has to complete before FailureAction is
     * executed. It is first interpreted as a string representing an ISO 8601
     * duration. If that fails, then it is interpreted as a number representing the
     * total number of milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
     * The amount of time each upgrade domain has to complete before FailureAction
     * is executed. It is first interpreted as a string representing an ISO 8601
     * duration. If that fails, then it is interpreted as a number representing the
     * total number of milliseconds.
     *
     * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
     * health policy used to evaluate the health of an application or one of its
     * children entities.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
     * The health policy used by default to evaluate the health of a service type.
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
     * The map with service type health policy per service type name. The map is
     * empty by default.
     *
     * @param {boolean}
     * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
     * Indicates whether warnings are treated with the same severity as errors.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
     * The maximum allowed percentage of unhealthy deployed applications. Allowed
     * values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed
     * applications that can be unhealthy before the application is considered in
     * error.
     * This is calculated by dividing the number of unhealthy deployed applications
     * over the number of nodes where the application is currently deployed on in
     * the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
     * The health policy used by default to evaluate the health of a service type.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
     * The maximum percentage of services allowed to be unhealthy before your
     * application is considered in error.
     *
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
     * The map with service type health policy per service type name. The map is
     * empty by default.
     *
     * @param {number} [parameters.minimumNodes] The minimum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. If this property is set to zero, no capacity will be reserved.
     * The value of this property cannot be more than the value of the MaximumNodes
     * property.
     *
     * @param {number} [parameters.maximumNodes] The maximum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. By default, the value of this property is zero and it means
     * that the services can be placed on any node.
     *
     * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
     * application capacity settings.
     *
     * @param {array} [parameters.metrics] List of application capacity metric
     * description.
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationResourceUpdate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.ApplicationResourceUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationResourceUpdate>>;

    /**
     * @summary Updates a Service Fabric application resource.
     *
     * Update a Service Fabric application resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {object} parameters The application resource for patch operations.
     *
     * @param {string} [parameters.typeVersion] The version of the application type
     * as defined in the application manifest.
     *
     * @param {array} [parameters.parameters] List of application parameters with
     * overridden values from their default values specified in the application
     * manifest.
     *
     * @param {object} [parameters.upgradePolicy] Describes the policy for a
     * monitored application upgrade.
     *
     * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
     * maximum amount of time to block processing of an upgrade domain and prevent
     * loss of availability when there are unexpected issues. When this timeout
     * expires, processing of the upgrade domain will proceed regardless of
     * availability loss issues. The timeout is reset at the start of each upgrade
     * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
     * 32-bit integer).
     *
     * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
     * processes are forcefully restarted during upgrade even when the code version
     * has not changed (the upgrade only changes configuration or data).
     *
     * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
     * The policy used for monitoring the application upgrade
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
     * The amount of time to wait after completing an upgrade domain before
     * applying health policies. It is first interpreted as a string representing
     * an ISO 8601 duration. If that fails, then it is interpreted as a number
     * representing the total number of milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
     * The amount of time that the application or cluster must remain healthy
     * before the upgrade proceeds to the next upgrade domain. It is first
     * interpreted as a string representing an ISO 8601 duration. If that fails,
     * then it is interpreted as a number representing the total number of
     * milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
     * The amount of time to retry health evaluation when the application or
     * cluster is unhealthy before FailureAction is executed. It is first
     * interpreted as a string representing an ISO 8601 duration. If that fails,
     * then it is interpreted as a number representing the total number of
     * milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
     * amount of time the overall upgrade has to complete before FailureAction is
     * executed. It is first interpreted as a string representing an ISO 8601
     * duration. If that fails, then it is interpreted as a number representing the
     * total number of milliseconds.
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
     * The amount of time each upgrade domain has to complete before FailureAction
     * is executed. It is first interpreted as a string representing an ISO 8601
     * duration. If that fails, then it is interpreted as a number representing the
     * total number of milliseconds.
     *
     * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
     * health policy used to evaluate the health of an application or one of its
     * children entities.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
     * The health policy used by default to evaluate the health of a service type.
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
     * The map with service type health policy per service type name. The map is
     * empty by default.
     *
     * @param {boolean}
     * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
     * Indicates whether warnings are treated with the same severity as errors.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
     * The maximum allowed percentage of unhealthy deployed applications. Allowed
     * values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed
     * applications that can be unhealthy before the application is considered in
     * error.
     * This is calculated by dividing the number of unhealthy deployed applications
     * over the number of nodes where the application is currently deployed on in
     * the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
     * The health policy used by default to evaluate the health of a service type.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
     * The maximum percentage of services allowed to be unhealthy before your
     * application is considered in error.
     *
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
     * The map with service type health policy per service type name. The map is
     * empty by default.
     *
     * @param {number} [parameters.minimumNodes] The minimum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. If this property is set to zero, no capacity will be reserved.
     * The value of this property cannot be more than the value of the MaximumNodes
     * property.
     *
     * @param {number} [parameters.maximumNodes] The maximum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. By default, the value of this property is zero and it means
     * that the services can be placed on any node.
     *
     * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
     * application capacity settings.
     *
     * @param {array} [parameters.metrics] List of application capacity metric
     * description.
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationResourceUpdate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationResourceUpdate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationResourceUpdate} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.ApplicationResourceUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationResourceUpdate>;
    beginUpdate(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.ApplicationResourceUpdate, callback: ServiceCallback<models.ApplicationResourceUpdate>): void;
    beginUpdate(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.ApplicationResourceUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationResourceUpdate>): void;


    /**
     * @summary Deletes a Service Fabric application resource.
     *
     * Delete a Service Fabric application resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a Service Fabric application resource.
     *
     * Delete a Service Fabric application resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Services
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricManagementClient.
 */
export interface Services {


    /**
     * @summary Gets a Service Fabric service resource.
     *
     * Get a Service Fabric service resource created or in the process of being
     * created in the Service Fabric application resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {string} serviceName The name of the service resource in the format
     * of {applicationName}~{serviceName}.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceResource>>;

    /**
     * @summary Gets a Service Fabric service resource.
     *
     * Get a Service Fabric service resource created or in the process of being
     * created in the Service Fabric application resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {string} serviceName The name of the service resource in the format
     * of {applicationName}~{serviceName}.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceResource>;
    get(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, callback: ServiceCallback<models.ServiceResource>): void;
    get(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceResource>): void;


    /**
     * @summary Creates or updates a Service Fabric service resource.
     *
     * Create or update a Service Fabric service resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {string} serviceName The name of the service resource in the format
     * of {applicationName}~{serviceName}.
     *
     * @param {object} parameters The service resource.
     *
     * @param {string} [parameters.placementConstraints] The placement constraints
     * as a string. Placement constraints are boolean expressions on node
     * properties and allow for restricting a service to particular nodes based on
     * the service requirements. For example, to place a service on nodes where
     * NodeType is blue specify the following: "NodeColor == blue)".
     *
     * @param {array} [parameters.correlationScheme] A list that describes the
     * correlation of the service with other services.
     *
     * @param {array} [parameters.serviceLoadMetrics] The service load metrics is
     * given as an array of ServiceLoadMetricDescription objects.
     *
     * @param {array} [parameters.servicePlacementPolicies] A list that describes
     * the correlation of the service with other services.
     *
     * @param {string} [parameters.defaultMoveCost] Specifies the move cost for the
     * service. Possible values include: 'Zero', 'Low', 'Medium', 'High'
     *
     * @param {string} [parameters.serviceTypeName] The name of the service type
     *
     * @param {object} [parameters.partitionDescription] Describes how the service
     * is partitioned.
     *
     * @param {string} parameters.partitionDescription.partitionScheme Polymorphic
     * Discriminator
     *
     * @param {string} parameters.serviceKind Polymorphic Discriminator
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: models.ServiceResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceResource>>;

    /**
     * @summary Creates or updates a Service Fabric service resource.
     *
     * Create or update a Service Fabric service resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {string} serviceName The name of the service resource in the format
     * of {applicationName}~{serviceName}.
     *
     * @param {object} parameters The service resource.
     *
     * @param {string} [parameters.placementConstraints] The placement constraints
     * as a string. Placement constraints are boolean expressions on node
     * properties and allow for restricting a service to particular nodes based on
     * the service requirements. For example, to place a service on nodes where
     * NodeType is blue specify the following: "NodeColor == blue)".
     *
     * @param {array} [parameters.correlationScheme] A list that describes the
     * correlation of the service with other services.
     *
     * @param {array} [parameters.serviceLoadMetrics] The service load metrics is
     * given as an array of ServiceLoadMetricDescription objects.
     *
     * @param {array} [parameters.servicePlacementPolicies] A list that describes
     * the correlation of the service with other services.
     *
     * @param {string} [parameters.defaultMoveCost] Specifies the move cost for the
     * service. Possible values include: 'Zero', 'Low', 'Medium', 'High'
     *
     * @param {string} [parameters.serviceTypeName] The name of the service type
     *
     * @param {object} [parameters.partitionDescription] Describes how the service
     * is partitioned.
     *
     * @param {string} parameters.partitionDescription.partitionScheme Polymorphic
     * Discriminator
     *
     * @param {string} parameters.serviceKind Polymorphic Discriminator
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: models.ServiceResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceResource>;
    create(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: models.ServiceResource, callback: ServiceCallback<models.ServiceResource>): void;
    create(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: models.ServiceResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceResource>): void;


    /**
     * @summary Updates a Service Fabric service resource.
     *
     * Update a Service Fabric service resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {string} serviceName The name of the service resource in the format
     * of {applicationName}~{serviceName}.
     *
     * @param {object} parameters The service resource for patch operations.
     *
     * @param {string} [parameters.placementConstraints] The placement constraints
     * as a string. Placement constraints are boolean expressions on node
     * properties and allow for restricting a service to particular nodes based on
     * the service requirements. For example, to place a service on nodes where
     * NodeType is blue specify the following: "NodeColor == blue)".
     *
     * @param {array} [parameters.correlationScheme] A list that describes the
     * correlation of the service with other services.
     *
     * @param {array} [parameters.serviceLoadMetrics] The service load metrics is
     * given as an array of ServiceLoadMetricDescription objects.
     *
     * @param {array} [parameters.servicePlacementPolicies] A list that describes
     * the correlation of the service with other services.
     *
     * @param {string} [parameters.defaultMoveCost] Specifies the move cost for the
     * service. Possible values include: 'Zero', 'Low', 'Medium', 'High'
     *
     * @param {string} parameters.serviceKind Polymorphic Discriminator
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceResourceUpdate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: models.ServiceResourceUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceResourceUpdate>>;

    /**
     * @summary Updates a Service Fabric service resource.
     *
     * Update a Service Fabric service resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {string} serviceName The name of the service resource in the format
     * of {applicationName}~{serviceName}.
     *
     * @param {object} parameters The service resource for patch operations.
     *
     * @param {string} [parameters.placementConstraints] The placement constraints
     * as a string. Placement constraints are boolean expressions on node
     * properties and allow for restricting a service to particular nodes based on
     * the service requirements. For example, to place a service on nodes where
     * NodeType is blue specify the following: "NodeColor == blue)".
     *
     * @param {array} [parameters.correlationScheme] A list that describes the
     * correlation of the service with other services.
     *
     * @param {array} [parameters.serviceLoadMetrics] The service load metrics is
     * given as an array of ServiceLoadMetricDescription objects.
     *
     * @param {array} [parameters.servicePlacementPolicies] A list that describes
     * the correlation of the service with other services.
     *
     * @param {string} [parameters.defaultMoveCost] Specifies the move cost for the
     * service. Possible values include: 'Zero', 'Low', 'Medium', 'High'
     *
     * @param {string} parameters.serviceKind Polymorphic Discriminator
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceResourceUpdate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceResourceUpdate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceResourceUpdate} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: models.ServiceResourceUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceResourceUpdate>;
    update(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: models.ServiceResourceUpdate, callback: ServiceCallback<models.ServiceResourceUpdate>): void;
    update(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: models.ServiceResourceUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceResourceUpdate>): void;


    /**
     * @summary Deletes a Service Fabric service resource.
     *
     * Delete a Service Fabric service resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {string} serviceName The name of the service resource in the format
     * of {applicationName}~{serviceName}.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a Service Fabric service resource.
     *
     * Delete a Service Fabric service resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {string} serviceName The name of the service resource in the format
     * of {applicationName}~{serviceName}.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets the list of service resources created in the specified Service
     * Fabric application resource.
     *
     * Gets all service resources created or in the process of being created in the
     * Service Fabric application resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceResourceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceResourceList>>;

    /**
     * @summary Gets the list of service resources created in the specified Service
     * Fabric application resource.
     *
     * Gets all service resources created or in the process of being created in the
     * Service Fabric application resource.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceResourceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceResourceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceResourceList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceResourceList>;
    list(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, callback: ServiceCallback<models.ServiceResourceList>): void;
    list(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceResourceList>): void;


    /**
     * @summary Creates or updates a Service Fabric service resource.
     *
     * Create or update a Service Fabric service resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {string} serviceName The name of the service resource in the format
     * of {applicationName}~{serviceName}.
     *
     * @param {object} parameters The service resource.
     *
     * @param {string} [parameters.placementConstraints] The placement constraints
     * as a string. Placement constraints are boolean expressions on node
     * properties and allow for restricting a service to particular nodes based on
     * the service requirements. For example, to place a service on nodes where
     * NodeType is blue specify the following: "NodeColor == blue)".
     *
     * @param {array} [parameters.correlationScheme] A list that describes the
     * correlation of the service with other services.
     *
     * @param {array} [parameters.serviceLoadMetrics] The service load metrics is
     * given as an array of ServiceLoadMetricDescription objects.
     *
     * @param {array} [parameters.servicePlacementPolicies] A list that describes
     * the correlation of the service with other services.
     *
     * @param {string} [parameters.defaultMoveCost] Specifies the move cost for the
     * service. Possible values include: 'Zero', 'Low', 'Medium', 'High'
     *
     * @param {string} [parameters.serviceTypeName] The name of the service type
     *
     * @param {object} [parameters.partitionDescription] Describes how the service
     * is partitioned.
     *
     * @param {string} parameters.partitionDescription.partitionScheme Polymorphic
     * Discriminator
     *
     * @param {string} parameters.serviceKind Polymorphic Discriminator
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: models.ServiceResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceResource>>;

    /**
     * @summary Creates or updates a Service Fabric service resource.
     *
     * Create or update a Service Fabric service resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {string} serviceName The name of the service resource in the format
     * of {applicationName}~{serviceName}.
     *
     * @param {object} parameters The service resource.
     *
     * @param {string} [parameters.placementConstraints] The placement constraints
     * as a string. Placement constraints are boolean expressions on node
     * properties and allow for restricting a service to particular nodes based on
     * the service requirements. For example, to place a service on nodes where
     * NodeType is blue specify the following: "NodeColor == blue)".
     *
     * @param {array} [parameters.correlationScheme] A list that describes the
     * correlation of the service with other services.
     *
     * @param {array} [parameters.serviceLoadMetrics] The service load metrics is
     * given as an array of ServiceLoadMetricDescription objects.
     *
     * @param {array} [parameters.servicePlacementPolicies] A list that describes
     * the correlation of the service with other services.
     *
     * @param {string} [parameters.defaultMoveCost] Specifies the move cost for the
     * service. Possible values include: 'Zero', 'Low', 'Medium', 'High'
     *
     * @param {string} [parameters.serviceTypeName] The name of the service type
     *
     * @param {object} [parameters.partitionDescription] Describes how the service
     * is partitioned.
     *
     * @param {string} parameters.partitionDescription.partitionScheme Polymorphic
     * Discriminator
     *
     * @param {string} parameters.serviceKind Polymorphic Discriminator
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: models.ServiceResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceResource>;
    beginCreate(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: models.ServiceResource, callback: ServiceCallback<models.ServiceResource>): void;
    beginCreate(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: models.ServiceResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceResource>): void;


    /**
     * @summary Updates a Service Fabric service resource.
     *
     * Update a Service Fabric service resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {string} serviceName The name of the service resource in the format
     * of {applicationName}~{serviceName}.
     *
     * @param {object} parameters The service resource for patch operations.
     *
     * @param {string} [parameters.placementConstraints] The placement constraints
     * as a string. Placement constraints are boolean expressions on node
     * properties and allow for restricting a service to particular nodes based on
     * the service requirements. For example, to place a service on nodes where
     * NodeType is blue specify the following: "NodeColor == blue)".
     *
     * @param {array} [parameters.correlationScheme] A list that describes the
     * correlation of the service with other services.
     *
     * @param {array} [parameters.serviceLoadMetrics] The service load metrics is
     * given as an array of ServiceLoadMetricDescription objects.
     *
     * @param {array} [parameters.servicePlacementPolicies] A list that describes
     * the correlation of the service with other services.
     *
     * @param {string} [parameters.defaultMoveCost] Specifies the move cost for the
     * service. Possible values include: 'Zero', 'Low', 'Medium', 'High'
     *
     * @param {string} parameters.serviceKind Polymorphic Discriminator
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceResourceUpdate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: models.ServiceResourceUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceResourceUpdate>>;

    /**
     * @summary Updates a Service Fabric service resource.
     *
     * Update a Service Fabric service resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {string} serviceName The name of the service resource in the format
     * of {applicationName}~{serviceName}.
     *
     * @param {object} parameters The service resource for patch operations.
     *
     * @param {string} [parameters.placementConstraints] The placement constraints
     * as a string. Placement constraints are boolean expressions on node
     * properties and allow for restricting a service to particular nodes based on
     * the service requirements. For example, to place a service on nodes where
     * NodeType is blue specify the following: "NodeColor == blue)".
     *
     * @param {array} [parameters.correlationScheme] A list that describes the
     * correlation of the service with other services.
     *
     * @param {array} [parameters.serviceLoadMetrics] The service load metrics is
     * given as an array of ServiceLoadMetricDescription objects.
     *
     * @param {array} [parameters.servicePlacementPolicies] A list that describes
     * the correlation of the service with other services.
     *
     * @param {string} [parameters.defaultMoveCost] Specifies the move cost for the
     * service. Possible values include: 'Zero', 'Low', 'Medium', 'High'
     *
     * @param {string} parameters.serviceKind Polymorphic Discriminator
     *
     * @param {string} [parameters.location] Azure resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceResourceUpdate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceResourceUpdate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceResourceUpdate} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: models.ServiceResourceUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceResourceUpdate>;
    beginUpdate(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: models.ServiceResourceUpdate, callback: ServiceCallback<models.ServiceResourceUpdate>): void;
    beginUpdate(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, parameters: models.ServiceResourceUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceResourceUpdate>): void;


    /**
     * @summary Deletes a Service Fabric service resource.
     *
     * Delete a Service Fabric service resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {string} serviceName The name of the service resource in the format
     * of {applicationName}~{serviceName}.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a Service Fabric service resource.
     *
     * Delete a Service Fabric service resource with the specified name.
     *
     * @param {string} subscriptionId The customer subscription identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource.
     *
     * @param {string} applicationName The name of the application resource.
     *
     * @param {string} serviceName The name of the service resource in the format
     * of {applicationName}~{serviceName}.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(subscriptionId: string, resourceGroupName: string, clusterName: string, applicationName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}
