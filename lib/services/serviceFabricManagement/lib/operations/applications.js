/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * @summary Gets a Service Fabric application resource.
 *
 * Get a Service Fabric application resource created or in the process of being
 * created in the Service Fabric cluster resource.
 *
 * @param {string} subscriptionId The customer subscription identifier.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} clusterName The name of the cluster resource.
 *
 * @param {string} applicationName The name of the application resource.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationResource} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(subscriptionId, resourceGroupName, clusterName, applicationName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-07-01-preview';
  // Validate
  try {
    if (subscriptionId === null || subscriptionId === undefined || typeof subscriptionId.valueOf() !== 'string') {
      throw new Error('subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (clusterName === null || clusterName === undefined || typeof clusterName.valueOf() !== 'string') {
      throw new Error('clusterName cannot be null or undefined and it must be of type string.');
    }
    if (applicationName === null || applicationName === undefined || typeof applicationName.valueOf() !== 'string') {
      throw new Error('applicationName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{clusterName}', encodeURIComponent(clusterName));
  requestUrl = requestUrl.replace('{applicationName}', encodeURIComponent(applicationName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationResource']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * @summary Creates or updates a Service Fabric application resource.
 *
 * Create or update a Service Fabric application resource with the specified
 * name.
 *
 * @param {string} subscriptionId The customer subscription identifier.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} clusterName The name of the cluster resource.
 *
 * @param {string} applicationName The name of the application resource.
 *
 * @param {object} parameters The application resource.
 *
 * @param {string} [parameters.typeVersion] The version of the application type
 * as defined in the application manifest.
 *
 * @param {array} [parameters.parameters] List of application parameters with
 * overridden values from their default values specified in the application
 * manifest.
 *
 * @param {object} [parameters.upgradePolicy] Describes the policy for a
 * monitored application upgrade.
 *
 * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
 * maximum amount of time to block processing of an upgrade domain and prevent
 * loss of availability when there are unexpected issues. When this timeout
 * expires, processing of the upgrade domain will proceed regardless of
 * availability loss issues. The timeout is reset at the start of each upgrade
 * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
 * 32-bit integer).
 *
 * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
 * processes are forcefully restarted during upgrade even when the code version
 * has not changed (the upgrade only changes configuration or data).
 *
 * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
 * The policy used for monitoring the application upgrade
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
 * The amount of time to wait after completing an upgrade domain before
 * applying health policies. It is first interpreted as a string representing
 * an ISO 8601 duration. If that fails, then it is interpreted as a number
 * representing the total number of milliseconds.
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
 * The amount of time that the application or cluster must remain healthy
 * before the upgrade proceeds to the next upgrade domain. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
 * The amount of time to retry health evaluation when the application or
 * cluster is unhealthy before FailureAction is executed. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
 * amount of time the overall upgrade has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
 * The amount of time each upgrade domain has to complete before FailureAction
 * is executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 *
 * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
 * health policy used to evaluate the health of an application or one of its
 * children entities.
 *
 *
 * @param {object}
 * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
 * The health policy used by default to evaluate the health of a service type.
 *
 * @param {array}
 * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
 * The map with service type health policy per service type name. The map is
 * empty by default.
 *
 * @param {boolean}
 * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
 * Indicates whether warnings are treated with the same severity as errors.
 *
 * @param {number}
 * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
 * The maximum allowed percentage of unhealthy deployed applications. Allowed
 * values are Byte values from zero to 100.
 * The percentage represents the maximum tolerated percentage of deployed
 * applications that can be unhealthy before the application is considered in
 * error.
 * This is calculated by dividing the number of unhealthy deployed applications
 * over the number of nodes where the application is currently deployed on in
 * the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 *
 *
 * @param {object}
 * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
 * The health policy used by default to evaluate the health of a service type.
 *
 * @param {number}
 * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
 * The maximum percentage of services allowed to be unhealthy before your
 * application is considered in error.
 *
 *
 * @param {array}
 * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
 * The map with service type health policy per service type name. The map is
 * empty by default.
 *
 * @param {number} [parameters.minimumNodes] The minimum number of nodes where
 * Service Fabric will reserve capacity for this application. Note that this
 * does not mean that the services of this application will be placed on all of
 * those nodes. If this property is set to zero, no capacity will be reserved.
 * The value of this property cannot be more than the value of the MaximumNodes
 * property.
 *
 * @param {number} [parameters.maximumNodes] The maximum number of nodes where
 * Service Fabric will reserve capacity for this application. Note that this
 * does not mean that the services of this application will be placed on all of
 * those nodes. By default, the value of this property is zero and it means
 * that the services can be placed on any node.
 *
 * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
 * application capacity settings.
 *
 * @param {array} [parameters.metrics] List of application capacity metric
 * description.
 *
 * @param {string} [parameters.typeName] The application type name as defined
 * in the application manifest.
 *
 * @param {string} [parameters.location] Azure resource location.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationResource} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _create(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreate(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationResource']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * @summary Updates a Service Fabric application resource.
 *
 * Update a Service Fabric application resource with the specified name.
 *
 * @param {string} subscriptionId The customer subscription identifier.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} clusterName The name of the cluster resource.
 *
 * @param {string} applicationName The name of the application resource.
 *
 * @param {object} parameters The application resource for patch operations.
 *
 * @param {string} [parameters.typeVersion] The version of the application type
 * as defined in the application manifest.
 *
 * @param {array} [parameters.parameters] List of application parameters with
 * overridden values from their default values specified in the application
 * manifest.
 *
 * @param {object} [parameters.upgradePolicy] Describes the policy for a
 * monitored application upgrade.
 *
 * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
 * maximum amount of time to block processing of an upgrade domain and prevent
 * loss of availability when there are unexpected issues. When this timeout
 * expires, processing of the upgrade domain will proceed regardless of
 * availability loss issues. The timeout is reset at the start of each upgrade
 * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
 * 32-bit integer).
 *
 * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
 * processes are forcefully restarted during upgrade even when the code version
 * has not changed (the upgrade only changes configuration or data).
 *
 * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
 * The policy used for monitoring the application upgrade
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
 * The amount of time to wait after completing an upgrade domain before
 * applying health policies. It is first interpreted as a string representing
 * an ISO 8601 duration. If that fails, then it is interpreted as a number
 * representing the total number of milliseconds.
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
 * The amount of time that the application or cluster must remain healthy
 * before the upgrade proceeds to the next upgrade domain. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
 * The amount of time to retry health evaluation when the application or
 * cluster is unhealthy before FailureAction is executed. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
 * amount of time the overall upgrade has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
 * The amount of time each upgrade domain has to complete before FailureAction
 * is executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 *
 * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
 * health policy used to evaluate the health of an application or one of its
 * children entities.
 *
 *
 * @param {object}
 * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
 * The health policy used by default to evaluate the health of a service type.
 *
 * @param {array}
 * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
 * The map with service type health policy per service type name. The map is
 * empty by default.
 *
 * @param {boolean}
 * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
 * Indicates whether warnings are treated with the same severity as errors.
 *
 * @param {number}
 * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
 * The maximum allowed percentage of unhealthy deployed applications. Allowed
 * values are Byte values from zero to 100.
 * The percentage represents the maximum tolerated percentage of deployed
 * applications that can be unhealthy before the application is considered in
 * error.
 * This is calculated by dividing the number of unhealthy deployed applications
 * over the number of nodes where the application is currently deployed on in
 * the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 *
 *
 * @param {object}
 * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
 * The health policy used by default to evaluate the health of a service type.
 *
 * @param {number}
 * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
 * The maximum percentage of services allowed to be unhealthy before your
 * application is considered in error.
 *
 *
 * @param {array}
 * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
 * The map with service type health policy per service type name. The map is
 * empty by default.
 *
 * @param {number} [parameters.minimumNodes] The minimum number of nodes where
 * Service Fabric will reserve capacity for this application. Note that this
 * does not mean that the services of this application will be placed on all of
 * those nodes. If this property is set to zero, no capacity will be reserved.
 * The value of this property cannot be more than the value of the MaximumNodes
 * property.
 *
 * @param {number} [parameters.maximumNodes] The maximum number of nodes where
 * Service Fabric will reserve capacity for this application. Note that this
 * does not mean that the services of this application will be placed on all of
 * those nodes. By default, the value of this property is zero and it means
 * that the services can be placed on any node.
 *
 * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
 * application capacity settings.
 *
 * @param {array} [parameters.metrics] List of application capacity metric
 * description.
 *
 * @param {string} [parameters.location] Azure resource location.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationResourceUpdate} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _update(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginUpdate(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationResourceUpdate']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * @summary Deletes a Service Fabric application resource.
 *
 * Delete a Service Fabric application resource with the specified name.
 *
 * @param {string} subscriptionId The customer subscription identifier.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} clusterName The name of the cluster resource.
 *
 * @param {string} applicationName The name of the application resource.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(subscriptionId, resourceGroupName, clusterName, applicationName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginDeleteMethod(subscriptionId, resourceGroupName, clusterName, applicationName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * @summary Gets the list of application resources created in the specified
 * Service Fabric cluster resource.
 *
 * Gets all application resources created or in the process of being created in
 * the Service Fabric cluster resource.
 *
 * @param {string} subscriptionId The customer subscription identifier.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} clusterName The name of the cluster resource.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationResourceList} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(subscriptionId, resourceGroupName, clusterName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-07-01-preview';
  // Validate
  try {
    if (subscriptionId === null || subscriptionId === undefined || typeof subscriptionId.valueOf() !== 'string') {
      throw new Error('subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (clusterName === null || clusterName === undefined || typeof clusterName.valueOf() !== 'string') {
      throw new Error('clusterName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{clusterName}', encodeURIComponent(clusterName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationResourceList']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates or updates a Service Fabric application resource.
 *
 * Create or update a Service Fabric application resource with the specified
 * name.
 *
 * @param {string} subscriptionId The customer subscription identifier.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} clusterName The name of the cluster resource.
 *
 * @param {string} applicationName The name of the application resource.
 *
 * @param {object} parameters The application resource.
 *
 * @param {string} [parameters.typeVersion] The version of the application type
 * as defined in the application manifest.
 *
 * @param {array} [parameters.parameters] List of application parameters with
 * overridden values from their default values specified in the application
 * manifest.
 *
 * @param {object} [parameters.upgradePolicy] Describes the policy for a
 * monitored application upgrade.
 *
 * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
 * maximum amount of time to block processing of an upgrade domain and prevent
 * loss of availability when there are unexpected issues. When this timeout
 * expires, processing of the upgrade domain will proceed regardless of
 * availability loss issues. The timeout is reset at the start of each upgrade
 * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
 * 32-bit integer).
 *
 * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
 * processes are forcefully restarted during upgrade even when the code version
 * has not changed (the upgrade only changes configuration or data).
 *
 * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
 * The policy used for monitoring the application upgrade
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
 * The amount of time to wait after completing an upgrade domain before
 * applying health policies. It is first interpreted as a string representing
 * an ISO 8601 duration. If that fails, then it is interpreted as a number
 * representing the total number of milliseconds.
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
 * The amount of time that the application or cluster must remain healthy
 * before the upgrade proceeds to the next upgrade domain. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
 * The amount of time to retry health evaluation when the application or
 * cluster is unhealthy before FailureAction is executed. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
 * amount of time the overall upgrade has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
 * The amount of time each upgrade domain has to complete before FailureAction
 * is executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 *
 * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
 * health policy used to evaluate the health of an application or one of its
 * children entities.
 *
 *
 * @param {object}
 * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
 * The health policy used by default to evaluate the health of a service type.
 *
 * @param {array}
 * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
 * The map with service type health policy per service type name. The map is
 * empty by default.
 *
 * @param {boolean}
 * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
 * Indicates whether warnings are treated with the same severity as errors.
 *
 * @param {number}
 * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
 * The maximum allowed percentage of unhealthy deployed applications. Allowed
 * values are Byte values from zero to 100.
 * The percentage represents the maximum tolerated percentage of deployed
 * applications that can be unhealthy before the application is considered in
 * error.
 * This is calculated by dividing the number of unhealthy deployed applications
 * over the number of nodes where the application is currently deployed on in
 * the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 *
 *
 * @param {object}
 * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
 * The health policy used by default to evaluate the health of a service type.
 *
 * @param {number}
 * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
 * The maximum percentage of services allowed to be unhealthy before your
 * application is considered in error.
 *
 *
 * @param {array}
 * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
 * The map with service type health policy per service type name. The map is
 * empty by default.
 *
 * @param {number} [parameters.minimumNodes] The minimum number of nodes where
 * Service Fabric will reserve capacity for this application. Note that this
 * does not mean that the services of this application will be placed on all of
 * those nodes. If this property is set to zero, no capacity will be reserved.
 * The value of this property cannot be more than the value of the MaximumNodes
 * property.
 *
 * @param {number} [parameters.maximumNodes] The maximum number of nodes where
 * Service Fabric will reserve capacity for this application. Note that this
 * does not mean that the services of this application will be placed on all of
 * those nodes. By default, the value of this property is zero and it means
 * that the services can be placed on any node.
 *
 * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
 * application capacity settings.
 *
 * @param {array} [parameters.metrics] List of application capacity metric
 * description.
 *
 * @param {string} [parameters.typeName] The application type name as defined
 * in the application manifest.
 *
 * @param {string} [parameters.location] Azure resource location.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationResource} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreate(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-07-01-preview';
  // Validate
  try {
    if (subscriptionId === null || subscriptionId === undefined || typeof subscriptionId.valueOf() !== 'string') {
      throw new Error('subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (clusterName === null || clusterName === undefined || typeof clusterName.valueOf() !== 'string') {
      throw new Error('clusterName cannot be null or undefined and it must be of type string.');
    }
    if (applicationName === null || applicationName === undefined || typeof applicationName.valueOf() !== 'string') {
      throw new Error('applicationName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{clusterName}', encodeURIComponent(clusterName));
  requestUrl = requestUrl.replace('{applicationName}', encodeURIComponent(applicationName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['ApplicationResource']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 202) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationResource']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Updates a Service Fabric application resource.
 *
 * Update a Service Fabric application resource with the specified name.
 *
 * @param {string} subscriptionId The customer subscription identifier.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} clusterName The name of the cluster resource.
 *
 * @param {string} applicationName The name of the application resource.
 *
 * @param {object} parameters The application resource for patch operations.
 *
 * @param {string} [parameters.typeVersion] The version of the application type
 * as defined in the application manifest.
 *
 * @param {array} [parameters.parameters] List of application parameters with
 * overridden values from their default values specified in the application
 * manifest.
 *
 * @param {object} [parameters.upgradePolicy] Describes the policy for a
 * monitored application upgrade.
 *
 * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
 * maximum amount of time to block processing of an upgrade domain and prevent
 * loss of availability when there are unexpected issues. When this timeout
 * expires, processing of the upgrade domain will proceed regardless of
 * availability loss issues. The timeout is reset at the start of each upgrade
 * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
 * 32-bit integer).
 *
 * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
 * processes are forcefully restarted during upgrade even when the code version
 * has not changed (the upgrade only changes configuration or data).
 *
 * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
 * The policy used for monitoring the application upgrade
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
 * The amount of time to wait after completing an upgrade domain before
 * applying health policies. It is first interpreted as a string representing
 * an ISO 8601 duration. If that fails, then it is interpreted as a number
 * representing the total number of milliseconds.
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
 * The amount of time that the application or cluster must remain healthy
 * before the upgrade proceeds to the next upgrade domain. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
 * The amount of time to retry health evaluation when the application or
 * cluster is unhealthy before FailureAction is executed. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
 * amount of time the overall upgrade has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 *
 * @param {string}
 * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
 * The amount of time each upgrade domain has to complete before FailureAction
 * is executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 *
 * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
 * health policy used to evaluate the health of an application or one of its
 * children entities.
 *
 *
 * @param {object}
 * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
 * The health policy used by default to evaluate the health of a service type.
 *
 * @param {array}
 * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
 * The map with service type health policy per service type name. The map is
 * empty by default.
 *
 * @param {boolean}
 * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
 * Indicates whether warnings are treated with the same severity as errors.
 *
 * @param {number}
 * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
 * The maximum allowed percentage of unhealthy deployed applications. Allowed
 * values are Byte values from zero to 100.
 * The percentage represents the maximum tolerated percentage of deployed
 * applications that can be unhealthy before the application is considered in
 * error.
 * This is calculated by dividing the number of unhealthy deployed applications
 * over the number of nodes where the application is currently deployed on in
 * the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 *
 *
 * @param {object}
 * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
 * The health policy used by default to evaluate the health of a service type.
 *
 * @param {number}
 * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
 * The maximum percentage of services allowed to be unhealthy before your
 * application is considered in error.
 *
 *
 * @param {array}
 * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
 * The map with service type health policy per service type name. The map is
 * empty by default.
 *
 * @param {number} [parameters.minimumNodes] The minimum number of nodes where
 * Service Fabric will reserve capacity for this application. Note that this
 * does not mean that the services of this application will be placed on all of
 * those nodes. If this property is set to zero, no capacity will be reserved.
 * The value of this property cannot be more than the value of the MaximumNodes
 * property.
 *
 * @param {number} [parameters.maximumNodes] The maximum number of nodes where
 * Service Fabric will reserve capacity for this application. Note that this
 * does not mean that the services of this application will be placed on all of
 * those nodes. By default, the value of this property is zero and it means
 * that the services can be placed on any node.
 *
 * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
 * application capacity settings.
 *
 * @param {array} [parameters.metrics] List of application capacity metric
 * description.
 *
 * @param {string} [parameters.location] Azure resource location.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationResourceUpdate} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginUpdate(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-07-01-preview';
  // Validate
  try {
    if (subscriptionId === null || subscriptionId === undefined || typeof subscriptionId.valueOf() !== 'string') {
      throw new Error('subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (clusterName === null || clusterName === undefined || typeof clusterName.valueOf() !== 'string') {
      throw new Error('clusterName cannot be null or undefined and it must be of type string.');
    }
    if (applicationName === null || applicationName === undefined || typeof applicationName.valueOf() !== 'string') {
      throw new Error('applicationName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{clusterName}', encodeURIComponent(clusterName));
  requestUrl = requestUrl.replace('{applicationName}', encodeURIComponent(applicationName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['ApplicationResourceUpdate']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 202) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationResourceUpdate']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Deletes a Service Fabric application resource.
 *
 * Delete a Service Fabric application resource with the specified name.
 *
 * @param {string} subscriptionId The customer subscription identifier.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} clusterName The name of the cluster resource.
 *
 * @param {string} applicationName The name of the application resource.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginDeleteMethod(subscriptionId, resourceGroupName, clusterName, applicationName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-07-01-preview';
  // Validate
  try {
    if (subscriptionId === null || subscriptionId === undefined || typeof subscriptionId.valueOf() !== 'string') {
      throw new Error('subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (clusterName === null || clusterName === undefined || typeof clusterName.valueOf() !== 'string') {
      throw new Error('clusterName cannot be null or undefined and it must be of type string.');
    }
    if (applicationName === null || applicationName === undefined || typeof applicationName.valueOf() !== 'string') {
      throw new Error('applicationName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{clusterName}', encodeURIComponent(clusterName));
  requestUrl = requestUrl.replace('{applicationName}', encodeURIComponent(applicationName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 202 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Applications. */
class Applications {
  /**
   * Create a Applications.
   * @param {ServiceFabricManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._get = _get;
    this._create = _create;
    this._update = _update;
    this._deleteMethod = _deleteMethod;
    this._list = _list;
    this._beginCreate = _beginCreate;
    this._beginUpdate = _beginUpdate;
    this._beginDeleteMethod = _beginDeleteMethod;
  }

  /**
   * @summary Gets a Service Fabric application resource.
   *
   * Get a Service Fabric application resource created or in the process of being
   * created in the Service Fabric cluster resource.
   *
   * @param {string} subscriptionId The customer subscription identifier.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource.
   *
   * @param {string} applicationName The name of the application resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationResource>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(subscriptionId, resourceGroupName, clusterName, applicationName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(subscriptionId, resourceGroupName, clusterName, applicationName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets a Service Fabric application resource.
   *
   * Get a Service Fabric application resource created or in the process of being
   * created in the Service Fabric cluster resource.
   *
   * @param {string} subscriptionId The customer subscription identifier.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource.
   *
   * @param {string} applicationName The name of the application resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationResource} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationResource} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(subscriptionId, resourceGroupName, clusterName, applicationName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(subscriptionId, resourceGroupName, clusterName, applicationName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(subscriptionId, resourceGroupName, clusterName, applicationName, options, optionalCallback);
    }
  }

  /**
   * @summary Creates or updates a Service Fabric application resource.
   *
   * Create or update a Service Fabric application resource with the specified
   * name.
   *
   * @param {string} subscriptionId The customer subscription identifier.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource.
   *
   * @param {string} applicationName The name of the application resource.
   *
   * @param {object} parameters The application resource.
   *
   * @param {string} [parameters.typeVersion] The version of the application type
   * as defined in the application manifest.
   *
   * @param {array} [parameters.parameters] List of application parameters with
   * overridden values from their default values specified in the application
   * manifest.
   *
   * @param {object} [parameters.upgradePolicy] Describes the policy for a
   * monitored application upgrade.
   *
   * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
   * maximum amount of time to block processing of an upgrade domain and prevent
   * loss of availability when there are unexpected issues. When this timeout
   * expires, processing of the upgrade domain will proceed regardless of
   * availability loss issues. The timeout is reset at the start of each upgrade
   * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
   * 32-bit integer).
   *
   * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
   * processes are forcefully restarted during upgrade even when the code version
   * has not changed (the upgrade only changes configuration or data).
   *
   * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
   * The policy used for monitoring the application upgrade
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
   * The amount of time to wait after completing an upgrade domain before
   * applying health policies. It is first interpreted as a string representing
   * an ISO 8601 duration. If that fails, then it is interpreted as a number
   * representing the total number of milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
   * The amount of time that the application or cluster must remain healthy
   * before the upgrade proceeds to the next upgrade domain. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
   * The amount of time to retry health evaluation when the application or
   * cluster is unhealthy before FailureAction is executed. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
   * amount of time the overall upgrade has to complete before FailureAction is
   * executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing the
   * total number of milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
   * The amount of time each upgrade domain has to complete before FailureAction
   * is executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing the
   * total number of milliseconds.
   *
   * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
   * health policy used to evaluate the health of an application or one of its
   * children entities.
   *
   *
   * @param {object}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
   * The health policy used by default to evaluate the health of a service type.
   *
   * @param {array}
   * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
   * The map with service type health policy per service type name. The map is
   * empty by default.
   *
   * @param {boolean}
   * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
   * Indicates whether warnings are treated with the same severity as errors.
   *
   * @param {number}
   * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
   * The maximum allowed percentage of unhealthy deployed applications. Allowed
   * values are Byte values from zero to 100.
   * The percentage represents the maximum tolerated percentage of deployed
   * applications that can be unhealthy before the application is considered in
   * error.
   * This is calculated by dividing the number of unhealthy deployed applications
   * over the number of nodes where the application is currently deployed on in
   * the cluster.
   * The computation rounds up to tolerate one failure on small numbers of nodes.
   * Default percentage is zero.
   *
   *
   * @param {object}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
   * The health policy used by default to evaluate the health of a service type.
   *
   * @param {number}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
   * The maximum percentage of services allowed to be unhealthy before your
   * application is considered in error.
   *
   *
   * @param {array}
   * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
   * The map with service type health policy per service type name. The map is
   * empty by default.
   *
   * @param {number} [parameters.minimumNodes] The minimum number of nodes where
   * Service Fabric will reserve capacity for this application. Note that this
   * does not mean that the services of this application will be placed on all of
   * those nodes. If this property is set to zero, no capacity will be reserved.
   * The value of this property cannot be more than the value of the MaximumNodes
   * property.
   *
   * @param {number} [parameters.maximumNodes] The maximum number of nodes where
   * Service Fabric will reserve capacity for this application. Note that this
   * does not mean that the services of this application will be placed on all of
   * those nodes. By default, the value of this property is zero and it means
   * that the services can be placed on any node.
   *
   * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
   * application capacity settings.
   *
   * @param {array} [parameters.metrics] List of application capacity metric
   * description.
   *
   * @param {string} [parameters.typeName] The application type name as defined
   * in the application manifest.
   *
   * @param {string} [parameters.location] Azure resource location.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationResource>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createWithHttpOperationResponse(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._create(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates or updates a Service Fabric application resource.
   *
   * Create or update a Service Fabric application resource with the specified
   * name.
   *
   * @param {string} subscriptionId The customer subscription identifier.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource.
   *
   * @param {string} applicationName The name of the application resource.
   *
   * @param {object} parameters The application resource.
   *
   * @param {string} [parameters.typeVersion] The version of the application type
   * as defined in the application manifest.
   *
   * @param {array} [parameters.parameters] List of application parameters with
   * overridden values from their default values specified in the application
   * manifest.
   *
   * @param {object} [parameters.upgradePolicy] Describes the policy for a
   * monitored application upgrade.
   *
   * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
   * maximum amount of time to block processing of an upgrade domain and prevent
   * loss of availability when there are unexpected issues. When this timeout
   * expires, processing of the upgrade domain will proceed regardless of
   * availability loss issues. The timeout is reset at the start of each upgrade
   * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
   * 32-bit integer).
   *
   * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
   * processes are forcefully restarted during upgrade even when the code version
   * has not changed (the upgrade only changes configuration or data).
   *
   * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
   * The policy used for monitoring the application upgrade
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
   * The amount of time to wait after completing an upgrade domain before
   * applying health policies. It is first interpreted as a string representing
   * an ISO 8601 duration. If that fails, then it is interpreted as a number
   * representing the total number of milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
   * The amount of time that the application or cluster must remain healthy
   * before the upgrade proceeds to the next upgrade domain. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
   * The amount of time to retry health evaluation when the application or
   * cluster is unhealthy before FailureAction is executed. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
   * amount of time the overall upgrade has to complete before FailureAction is
   * executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing the
   * total number of milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
   * The amount of time each upgrade domain has to complete before FailureAction
   * is executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing the
   * total number of milliseconds.
   *
   * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
   * health policy used to evaluate the health of an application or one of its
   * children entities.
   *
   *
   * @param {object}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
   * The health policy used by default to evaluate the health of a service type.
   *
   * @param {array}
   * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
   * The map with service type health policy per service type name. The map is
   * empty by default.
   *
   * @param {boolean}
   * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
   * Indicates whether warnings are treated with the same severity as errors.
   *
   * @param {number}
   * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
   * The maximum allowed percentage of unhealthy deployed applications. Allowed
   * values are Byte values from zero to 100.
   * The percentage represents the maximum tolerated percentage of deployed
   * applications that can be unhealthy before the application is considered in
   * error.
   * This is calculated by dividing the number of unhealthy deployed applications
   * over the number of nodes where the application is currently deployed on in
   * the cluster.
   * The computation rounds up to tolerate one failure on small numbers of nodes.
   * Default percentage is zero.
   *
   *
   * @param {object}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
   * The health policy used by default to evaluate the health of a service type.
   *
   * @param {number}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
   * The maximum percentage of services allowed to be unhealthy before your
   * application is considered in error.
   *
   *
   * @param {array}
   * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
   * The map with service type health policy per service type name. The map is
   * empty by default.
   *
   * @param {number} [parameters.minimumNodes] The minimum number of nodes where
   * Service Fabric will reserve capacity for this application. Note that this
   * does not mean that the services of this application will be placed on all of
   * those nodes. If this property is set to zero, no capacity will be reserved.
   * The value of this property cannot be more than the value of the MaximumNodes
   * property.
   *
   * @param {number} [parameters.maximumNodes] The maximum number of nodes where
   * Service Fabric will reserve capacity for this application. Note that this
   * does not mean that the services of this application will be placed on all of
   * those nodes. By default, the value of this property is zero and it means
   * that the services can be placed on any node.
   *
   * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
   * application capacity settings.
   *
   * @param {array} [parameters.metrics] List of application capacity metric
   * description.
   *
   * @param {string} [parameters.typeName] The application type name as defined
   * in the application manifest.
   *
   * @param {string} [parameters.location] Azure resource location.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationResource} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationResource} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  create(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._create(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._create(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, optionalCallback);
    }
  }

  /**
   * @summary Updates a Service Fabric application resource.
   *
   * Update a Service Fabric application resource with the specified name.
   *
   * @param {string} subscriptionId The customer subscription identifier.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource.
   *
   * @param {string} applicationName The name of the application resource.
   *
   * @param {object} parameters The application resource for patch operations.
   *
   * @param {string} [parameters.typeVersion] The version of the application type
   * as defined in the application manifest.
   *
   * @param {array} [parameters.parameters] List of application parameters with
   * overridden values from their default values specified in the application
   * manifest.
   *
   * @param {object} [parameters.upgradePolicy] Describes the policy for a
   * monitored application upgrade.
   *
   * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
   * maximum amount of time to block processing of an upgrade domain and prevent
   * loss of availability when there are unexpected issues. When this timeout
   * expires, processing of the upgrade domain will proceed regardless of
   * availability loss issues. The timeout is reset at the start of each upgrade
   * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
   * 32-bit integer).
   *
   * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
   * processes are forcefully restarted during upgrade even when the code version
   * has not changed (the upgrade only changes configuration or data).
   *
   * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
   * The policy used for monitoring the application upgrade
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
   * The amount of time to wait after completing an upgrade domain before
   * applying health policies. It is first interpreted as a string representing
   * an ISO 8601 duration. If that fails, then it is interpreted as a number
   * representing the total number of milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
   * The amount of time that the application or cluster must remain healthy
   * before the upgrade proceeds to the next upgrade domain. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
   * The amount of time to retry health evaluation when the application or
   * cluster is unhealthy before FailureAction is executed. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
   * amount of time the overall upgrade has to complete before FailureAction is
   * executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing the
   * total number of milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
   * The amount of time each upgrade domain has to complete before FailureAction
   * is executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing the
   * total number of milliseconds.
   *
   * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
   * health policy used to evaluate the health of an application or one of its
   * children entities.
   *
   *
   * @param {object}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
   * The health policy used by default to evaluate the health of a service type.
   *
   * @param {array}
   * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
   * The map with service type health policy per service type name. The map is
   * empty by default.
   *
   * @param {boolean}
   * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
   * Indicates whether warnings are treated with the same severity as errors.
   *
   * @param {number}
   * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
   * The maximum allowed percentage of unhealthy deployed applications. Allowed
   * values are Byte values from zero to 100.
   * The percentage represents the maximum tolerated percentage of deployed
   * applications that can be unhealthy before the application is considered in
   * error.
   * This is calculated by dividing the number of unhealthy deployed applications
   * over the number of nodes where the application is currently deployed on in
   * the cluster.
   * The computation rounds up to tolerate one failure on small numbers of nodes.
   * Default percentage is zero.
   *
   *
   * @param {object}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
   * The health policy used by default to evaluate the health of a service type.
   *
   * @param {number}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
   * The maximum percentage of services allowed to be unhealthy before your
   * application is considered in error.
   *
   *
   * @param {array}
   * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
   * The map with service type health policy per service type name. The map is
   * empty by default.
   *
   * @param {number} [parameters.minimumNodes] The minimum number of nodes where
   * Service Fabric will reserve capacity for this application. Note that this
   * does not mean that the services of this application will be placed on all of
   * those nodes. If this property is set to zero, no capacity will be reserved.
   * The value of this property cannot be more than the value of the MaximumNodes
   * property.
   *
   * @param {number} [parameters.maximumNodes] The maximum number of nodes where
   * Service Fabric will reserve capacity for this application. Note that this
   * does not mean that the services of this application will be placed on all of
   * those nodes. By default, the value of this property is zero and it means
   * that the services can be placed on any node.
   *
   * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
   * application capacity settings.
   *
   * @param {array} [parameters.metrics] List of application capacity metric
   * description.
   *
   * @param {string} [parameters.location] Azure resource location.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationResourceUpdate>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateWithHttpOperationResponse(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._update(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Updates a Service Fabric application resource.
   *
   * Update a Service Fabric application resource with the specified name.
   *
   * @param {string} subscriptionId The customer subscription identifier.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource.
   *
   * @param {string} applicationName The name of the application resource.
   *
   * @param {object} parameters The application resource for patch operations.
   *
   * @param {string} [parameters.typeVersion] The version of the application type
   * as defined in the application manifest.
   *
   * @param {array} [parameters.parameters] List of application parameters with
   * overridden values from their default values specified in the application
   * manifest.
   *
   * @param {object} [parameters.upgradePolicy] Describes the policy for a
   * monitored application upgrade.
   *
   * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
   * maximum amount of time to block processing of an upgrade domain and prevent
   * loss of availability when there are unexpected issues. When this timeout
   * expires, processing of the upgrade domain will proceed regardless of
   * availability loss issues. The timeout is reset at the start of each upgrade
   * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
   * 32-bit integer).
   *
   * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
   * processes are forcefully restarted during upgrade even when the code version
   * has not changed (the upgrade only changes configuration or data).
   *
   * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
   * The policy used for monitoring the application upgrade
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
   * The amount of time to wait after completing an upgrade domain before
   * applying health policies. It is first interpreted as a string representing
   * an ISO 8601 duration. If that fails, then it is interpreted as a number
   * representing the total number of milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
   * The amount of time that the application or cluster must remain healthy
   * before the upgrade proceeds to the next upgrade domain. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
   * The amount of time to retry health evaluation when the application or
   * cluster is unhealthy before FailureAction is executed. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
   * amount of time the overall upgrade has to complete before FailureAction is
   * executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing the
   * total number of milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
   * The amount of time each upgrade domain has to complete before FailureAction
   * is executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing the
   * total number of milliseconds.
   *
   * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
   * health policy used to evaluate the health of an application or one of its
   * children entities.
   *
   *
   * @param {object}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
   * The health policy used by default to evaluate the health of a service type.
   *
   * @param {array}
   * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
   * The map with service type health policy per service type name. The map is
   * empty by default.
   *
   * @param {boolean}
   * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
   * Indicates whether warnings are treated with the same severity as errors.
   *
   * @param {number}
   * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
   * The maximum allowed percentage of unhealthy deployed applications. Allowed
   * values are Byte values from zero to 100.
   * The percentage represents the maximum tolerated percentage of deployed
   * applications that can be unhealthy before the application is considered in
   * error.
   * This is calculated by dividing the number of unhealthy deployed applications
   * over the number of nodes where the application is currently deployed on in
   * the cluster.
   * The computation rounds up to tolerate one failure on small numbers of nodes.
   * Default percentage is zero.
   *
   *
   * @param {object}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
   * The health policy used by default to evaluate the health of a service type.
   *
   * @param {number}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
   * The maximum percentage of services allowed to be unhealthy before your
   * application is considered in error.
   *
   *
   * @param {array}
   * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
   * The map with service type health policy per service type name. The map is
   * empty by default.
   *
   * @param {number} [parameters.minimumNodes] The minimum number of nodes where
   * Service Fabric will reserve capacity for this application. Note that this
   * does not mean that the services of this application will be placed on all of
   * those nodes. If this property is set to zero, no capacity will be reserved.
   * The value of this property cannot be more than the value of the MaximumNodes
   * property.
   *
   * @param {number} [parameters.maximumNodes] The maximum number of nodes where
   * Service Fabric will reserve capacity for this application. Note that this
   * does not mean that the services of this application will be placed on all of
   * those nodes. By default, the value of this property is zero and it means
   * that the services can be placed on any node.
   *
   * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
   * application capacity settings.
   *
   * @param {array} [parameters.metrics] List of application capacity metric
   * description.
   *
   * @param {string} [parameters.location] Azure resource location.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationResourceUpdate} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationResourceUpdate} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  update(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._update(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._update(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, optionalCallback);
    }
  }

  /**
   * @summary Deletes a Service Fabric application resource.
   *
   * Delete a Service Fabric application resource with the specified name.
   *
   * @param {string} subscriptionId The customer subscription identifier.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource.
   *
   * @param {string} applicationName The name of the application resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(subscriptionId, resourceGroupName, clusterName, applicationName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(subscriptionId, resourceGroupName, clusterName, applicationName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Deletes a Service Fabric application resource.
   *
   * Delete a Service Fabric application resource with the specified name.
   *
   * @param {string} subscriptionId The customer subscription identifier.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource.
   *
   * @param {string} applicationName The name of the application resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(subscriptionId, resourceGroupName, clusterName, applicationName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(subscriptionId, resourceGroupName, clusterName, applicationName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(subscriptionId, resourceGroupName, clusterName, applicationName, options, optionalCallback);
    }
  }

  /**
   * @summary Gets the list of application resources created in the specified
   * Service Fabric cluster resource.
   *
   * Gets all application resources created or in the process of being created in
   * the Service Fabric cluster resource.
   *
   * @param {string} subscriptionId The customer subscription identifier.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationResourceList>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(subscriptionId, resourceGroupName, clusterName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(subscriptionId, resourceGroupName, clusterName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets the list of application resources created in the specified
   * Service Fabric cluster resource.
   *
   * Gets all application resources created or in the process of being created in
   * the Service Fabric cluster resource.
   *
   * @param {string} subscriptionId The customer subscription identifier.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationResourceList} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationResourceList} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(subscriptionId, resourceGroupName, clusterName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(subscriptionId, resourceGroupName, clusterName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(subscriptionId, resourceGroupName, clusterName, options, optionalCallback);
    }
  }

  /**
   * @summary Creates or updates a Service Fabric application resource.
   *
   * Create or update a Service Fabric application resource with the specified
   * name.
   *
   * @param {string} subscriptionId The customer subscription identifier.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource.
   *
   * @param {string} applicationName The name of the application resource.
   *
   * @param {object} parameters The application resource.
   *
   * @param {string} [parameters.typeVersion] The version of the application type
   * as defined in the application manifest.
   *
   * @param {array} [parameters.parameters] List of application parameters with
   * overridden values from their default values specified in the application
   * manifest.
   *
   * @param {object} [parameters.upgradePolicy] Describes the policy for a
   * monitored application upgrade.
   *
   * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
   * maximum amount of time to block processing of an upgrade domain and prevent
   * loss of availability when there are unexpected issues. When this timeout
   * expires, processing of the upgrade domain will proceed regardless of
   * availability loss issues. The timeout is reset at the start of each upgrade
   * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
   * 32-bit integer).
   *
   * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
   * processes are forcefully restarted during upgrade even when the code version
   * has not changed (the upgrade only changes configuration or data).
   *
   * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
   * The policy used for monitoring the application upgrade
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
   * The amount of time to wait after completing an upgrade domain before
   * applying health policies. It is first interpreted as a string representing
   * an ISO 8601 duration. If that fails, then it is interpreted as a number
   * representing the total number of milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
   * The amount of time that the application or cluster must remain healthy
   * before the upgrade proceeds to the next upgrade domain. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
   * The amount of time to retry health evaluation when the application or
   * cluster is unhealthy before FailureAction is executed. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
   * amount of time the overall upgrade has to complete before FailureAction is
   * executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing the
   * total number of milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
   * The amount of time each upgrade domain has to complete before FailureAction
   * is executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing the
   * total number of milliseconds.
   *
   * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
   * health policy used to evaluate the health of an application or one of its
   * children entities.
   *
   *
   * @param {object}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
   * The health policy used by default to evaluate the health of a service type.
   *
   * @param {array}
   * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
   * The map with service type health policy per service type name. The map is
   * empty by default.
   *
   * @param {boolean}
   * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
   * Indicates whether warnings are treated with the same severity as errors.
   *
   * @param {number}
   * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
   * The maximum allowed percentage of unhealthy deployed applications. Allowed
   * values are Byte values from zero to 100.
   * The percentage represents the maximum tolerated percentage of deployed
   * applications that can be unhealthy before the application is considered in
   * error.
   * This is calculated by dividing the number of unhealthy deployed applications
   * over the number of nodes where the application is currently deployed on in
   * the cluster.
   * The computation rounds up to tolerate one failure on small numbers of nodes.
   * Default percentage is zero.
   *
   *
   * @param {object}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
   * The health policy used by default to evaluate the health of a service type.
   *
   * @param {number}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
   * The maximum percentage of services allowed to be unhealthy before your
   * application is considered in error.
   *
   *
   * @param {array}
   * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
   * The map with service type health policy per service type name. The map is
   * empty by default.
   *
   * @param {number} [parameters.minimumNodes] The minimum number of nodes where
   * Service Fabric will reserve capacity for this application. Note that this
   * does not mean that the services of this application will be placed on all of
   * those nodes. If this property is set to zero, no capacity will be reserved.
   * The value of this property cannot be more than the value of the MaximumNodes
   * property.
   *
   * @param {number} [parameters.maximumNodes] The maximum number of nodes where
   * Service Fabric will reserve capacity for this application. Note that this
   * does not mean that the services of this application will be placed on all of
   * those nodes. By default, the value of this property is zero and it means
   * that the services can be placed on any node.
   *
   * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
   * application capacity settings.
   *
   * @param {array} [parameters.metrics] List of application capacity metric
   * description.
   *
   * @param {string} [parameters.typeName] The application type name as defined
   * in the application manifest.
   *
   * @param {string} [parameters.location] Azure resource location.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationResource>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateWithHttpOperationResponse(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreate(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates or updates a Service Fabric application resource.
   *
   * Create or update a Service Fabric application resource with the specified
   * name.
   *
   * @param {string} subscriptionId The customer subscription identifier.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource.
   *
   * @param {string} applicationName The name of the application resource.
   *
   * @param {object} parameters The application resource.
   *
   * @param {string} [parameters.typeVersion] The version of the application type
   * as defined in the application manifest.
   *
   * @param {array} [parameters.parameters] List of application parameters with
   * overridden values from their default values specified in the application
   * manifest.
   *
   * @param {object} [parameters.upgradePolicy] Describes the policy for a
   * monitored application upgrade.
   *
   * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
   * maximum amount of time to block processing of an upgrade domain and prevent
   * loss of availability when there are unexpected issues. When this timeout
   * expires, processing of the upgrade domain will proceed regardless of
   * availability loss issues. The timeout is reset at the start of each upgrade
   * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
   * 32-bit integer).
   *
   * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
   * processes are forcefully restarted during upgrade even when the code version
   * has not changed (the upgrade only changes configuration or data).
   *
   * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
   * The policy used for monitoring the application upgrade
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
   * The amount of time to wait after completing an upgrade domain before
   * applying health policies. It is first interpreted as a string representing
   * an ISO 8601 duration. If that fails, then it is interpreted as a number
   * representing the total number of milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
   * The amount of time that the application or cluster must remain healthy
   * before the upgrade proceeds to the next upgrade domain. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
   * The amount of time to retry health evaluation when the application or
   * cluster is unhealthy before FailureAction is executed. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
   * amount of time the overall upgrade has to complete before FailureAction is
   * executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing the
   * total number of milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
   * The amount of time each upgrade domain has to complete before FailureAction
   * is executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing the
   * total number of milliseconds.
   *
   * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
   * health policy used to evaluate the health of an application or one of its
   * children entities.
   *
   *
   * @param {object}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
   * The health policy used by default to evaluate the health of a service type.
   *
   * @param {array}
   * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
   * The map with service type health policy per service type name. The map is
   * empty by default.
   *
   * @param {boolean}
   * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
   * Indicates whether warnings are treated with the same severity as errors.
   *
   * @param {number}
   * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
   * The maximum allowed percentage of unhealthy deployed applications. Allowed
   * values are Byte values from zero to 100.
   * The percentage represents the maximum tolerated percentage of deployed
   * applications that can be unhealthy before the application is considered in
   * error.
   * This is calculated by dividing the number of unhealthy deployed applications
   * over the number of nodes where the application is currently deployed on in
   * the cluster.
   * The computation rounds up to tolerate one failure on small numbers of nodes.
   * Default percentage is zero.
   *
   *
   * @param {object}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
   * The health policy used by default to evaluate the health of a service type.
   *
   * @param {number}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
   * The maximum percentage of services allowed to be unhealthy before your
   * application is considered in error.
   *
   *
   * @param {array}
   * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
   * The map with service type health policy per service type name. The map is
   * empty by default.
   *
   * @param {number} [parameters.minimumNodes] The minimum number of nodes where
   * Service Fabric will reserve capacity for this application. Note that this
   * does not mean that the services of this application will be placed on all of
   * those nodes. If this property is set to zero, no capacity will be reserved.
   * The value of this property cannot be more than the value of the MaximumNodes
   * property.
   *
   * @param {number} [parameters.maximumNodes] The maximum number of nodes where
   * Service Fabric will reserve capacity for this application. Note that this
   * does not mean that the services of this application will be placed on all of
   * those nodes. By default, the value of this property is zero and it means
   * that the services can be placed on any node.
   *
   * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
   * application capacity settings.
   *
   * @param {array} [parameters.metrics] List of application capacity metric
   * description.
   *
   * @param {string} [parameters.typeName] The application type name as defined
   * in the application manifest.
   *
   * @param {string} [parameters.location] Azure resource location.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationResource} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationResource} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreate(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreate(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreate(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, optionalCallback);
    }
  }

  /**
   * @summary Updates a Service Fabric application resource.
   *
   * Update a Service Fabric application resource with the specified name.
   *
   * @param {string} subscriptionId The customer subscription identifier.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource.
   *
   * @param {string} applicationName The name of the application resource.
   *
   * @param {object} parameters The application resource for patch operations.
   *
   * @param {string} [parameters.typeVersion] The version of the application type
   * as defined in the application manifest.
   *
   * @param {array} [parameters.parameters] List of application parameters with
   * overridden values from their default values specified in the application
   * manifest.
   *
   * @param {object} [parameters.upgradePolicy] Describes the policy for a
   * monitored application upgrade.
   *
   * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
   * maximum amount of time to block processing of an upgrade domain and prevent
   * loss of availability when there are unexpected issues. When this timeout
   * expires, processing of the upgrade domain will proceed regardless of
   * availability loss issues. The timeout is reset at the start of each upgrade
   * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
   * 32-bit integer).
   *
   * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
   * processes are forcefully restarted during upgrade even when the code version
   * has not changed (the upgrade only changes configuration or data).
   *
   * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
   * The policy used for monitoring the application upgrade
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
   * The amount of time to wait after completing an upgrade domain before
   * applying health policies. It is first interpreted as a string representing
   * an ISO 8601 duration. If that fails, then it is interpreted as a number
   * representing the total number of milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
   * The amount of time that the application or cluster must remain healthy
   * before the upgrade proceeds to the next upgrade domain. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
   * The amount of time to retry health evaluation when the application or
   * cluster is unhealthy before FailureAction is executed. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
   * amount of time the overall upgrade has to complete before FailureAction is
   * executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing the
   * total number of milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
   * The amount of time each upgrade domain has to complete before FailureAction
   * is executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing the
   * total number of milliseconds.
   *
   * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
   * health policy used to evaluate the health of an application or one of its
   * children entities.
   *
   *
   * @param {object}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
   * The health policy used by default to evaluate the health of a service type.
   *
   * @param {array}
   * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
   * The map with service type health policy per service type name. The map is
   * empty by default.
   *
   * @param {boolean}
   * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
   * Indicates whether warnings are treated with the same severity as errors.
   *
   * @param {number}
   * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
   * The maximum allowed percentage of unhealthy deployed applications. Allowed
   * values are Byte values from zero to 100.
   * The percentage represents the maximum tolerated percentage of deployed
   * applications that can be unhealthy before the application is considered in
   * error.
   * This is calculated by dividing the number of unhealthy deployed applications
   * over the number of nodes where the application is currently deployed on in
   * the cluster.
   * The computation rounds up to tolerate one failure on small numbers of nodes.
   * Default percentage is zero.
   *
   *
   * @param {object}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
   * The health policy used by default to evaluate the health of a service type.
   *
   * @param {number}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
   * The maximum percentage of services allowed to be unhealthy before your
   * application is considered in error.
   *
   *
   * @param {array}
   * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
   * The map with service type health policy per service type name. The map is
   * empty by default.
   *
   * @param {number} [parameters.minimumNodes] The minimum number of nodes where
   * Service Fabric will reserve capacity for this application. Note that this
   * does not mean that the services of this application will be placed on all of
   * those nodes. If this property is set to zero, no capacity will be reserved.
   * The value of this property cannot be more than the value of the MaximumNodes
   * property.
   *
   * @param {number} [parameters.maximumNodes] The maximum number of nodes where
   * Service Fabric will reserve capacity for this application. Note that this
   * does not mean that the services of this application will be placed on all of
   * those nodes. By default, the value of this property is zero and it means
   * that the services can be placed on any node.
   *
   * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
   * application capacity settings.
   *
   * @param {array} [parameters.metrics] List of application capacity metric
   * description.
   *
   * @param {string} [parameters.location] Azure resource location.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationResourceUpdate>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginUpdateWithHttpOperationResponse(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginUpdate(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Updates a Service Fabric application resource.
   *
   * Update a Service Fabric application resource with the specified name.
   *
   * @param {string} subscriptionId The customer subscription identifier.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource.
   *
   * @param {string} applicationName The name of the application resource.
   *
   * @param {object} parameters The application resource for patch operations.
   *
   * @param {string} [parameters.typeVersion] The version of the application type
   * as defined in the application manifest.
   *
   * @param {array} [parameters.parameters] List of application parameters with
   * overridden values from their default values specified in the application
   * manifest.
   *
   * @param {object} [parameters.upgradePolicy] Describes the policy for a
   * monitored application upgrade.
   *
   * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout] The
   * maximum amount of time to block processing of an upgrade domain and prevent
   * loss of availability when there are unexpected issues. When this timeout
   * expires, processing of the upgrade domain will proceed regardless of
   * availability loss issues. The timeout is reset at the start of each upgrade
   * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
   * 32-bit integer).
   *
   * @param {boolean} [parameters.upgradePolicy.forceRestart] If true, then
   * processes are forcefully restarted during upgrade even when the code version
   * has not changed (the upgrade only changes configuration or data).
   *
   * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
   * The policy used for monitoring the application upgrade
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
   * The amount of time to wait after completing an upgrade domain before
   * applying health policies. It is first interpreted as a string representing
   * an ISO 8601 duration. If that fails, then it is interpreted as a number
   * representing the total number of milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
   * The amount of time that the application or cluster must remain healthy
   * before the upgrade proceeds to the next upgrade domain. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
   * The amount of time to retry health evaluation when the application or
   * cluster is unhealthy before FailureAction is executed. It is first
   * interpreted as a string representing an ISO 8601 duration. If that fails,
   * then it is interpreted as a number representing the total number of
   * milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout] The
   * amount of time the overall upgrade has to complete before FailureAction is
   * executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing the
   * total number of milliseconds.
   *
   * @param {string}
   * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
   * The amount of time each upgrade domain has to complete before FailureAction
   * is executed. It is first interpreted as a string representing an ISO 8601
   * duration. If that fails, then it is interpreted as a number representing the
   * total number of milliseconds.
   *
   * @param {object} [parameters.upgradePolicy.applicationHealthPolicy] Defines a
   * health policy used to evaluate the health of an application or one of its
   * children entities.
   *
   *
   * @param {object}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
   * The health policy used by default to evaluate the health of a service type.
   *
   * @param {array}
   * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicies]
   * The map with service type health policy per service type name. The map is
   * empty by default.
   *
   * @param {boolean}
   * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
   * Indicates whether warnings are treated with the same severity as errors.
   *
   * @param {number}
   * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
   * The maximum allowed percentage of unhealthy deployed applications. Allowed
   * values are Byte values from zero to 100.
   * The percentage represents the maximum tolerated percentage of deployed
   * applications that can be unhealthy before the application is considered in
   * error.
   * This is calculated by dividing the number of unhealthy deployed applications
   * over the number of nodes where the application is currently deployed on in
   * the cluster.
   * The computation rounds up to tolerate one failure on small numbers of nodes.
   * Default percentage is zero.
   *
   *
   * @param {object}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1]
   * The health policy used by default to evaluate the health of a service type.
   *
   * @param {number}
   * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy1.maxPercentUnhealthyServices]
   * The maximum percentage of services allowed to be unhealthy before your
   * application is considered in error.
   *
   *
   * @param {array}
   * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
   * The map with service type health policy per service type name. The map is
   * empty by default.
   *
   * @param {number} [parameters.minimumNodes] The minimum number of nodes where
   * Service Fabric will reserve capacity for this application. Note that this
   * does not mean that the services of this application will be placed on all of
   * those nodes. If this property is set to zero, no capacity will be reserved.
   * The value of this property cannot be more than the value of the MaximumNodes
   * property.
   *
   * @param {number} [parameters.maximumNodes] The maximum number of nodes where
   * Service Fabric will reserve capacity for this application. Note that this
   * does not mean that the services of this application will be placed on all of
   * those nodes. By default, the value of this property is zero and it means
   * that the services can be placed on any node.
   *
   * @param {boolean} [parameters.removeApplicationCapacity] Remove the current
   * application capacity settings.
   *
   * @param {array} [parameters.metrics] List of application capacity metric
   * description.
   *
   * @param {string} [parameters.location] Azure resource location.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationResourceUpdate} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationResourceUpdate} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginUpdate(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginUpdate(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginUpdate(subscriptionId, resourceGroupName, clusterName, applicationName, parameters, options, optionalCallback);
    }
  }

  /**
   * @summary Deletes a Service Fabric application resource.
   *
   * Delete a Service Fabric application resource with the specified name.
   *
   * @param {string} subscriptionId The customer subscription identifier.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource.
   *
   * @param {string} applicationName The name of the application resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginDeleteMethodWithHttpOperationResponse(subscriptionId, resourceGroupName, clusterName, applicationName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginDeleteMethod(subscriptionId, resourceGroupName, clusterName, applicationName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Deletes a Service Fabric application resource.
   *
   * Delete a Service Fabric application resource with the specified name.
   *
   * @param {string} subscriptionId The customer subscription identifier.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} clusterName The name of the cluster resource.
   *
   * @param {string} applicationName The name of the application resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteMethod(subscriptionId, resourceGroupName, clusterName, applicationName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginDeleteMethod(subscriptionId, resourceGroupName, clusterName, applicationName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginDeleteMethod(subscriptionId, resourceGroupName, clusterName, applicationName, options, optionalCallback);
    }
  }

}

module.exports = Applications;
