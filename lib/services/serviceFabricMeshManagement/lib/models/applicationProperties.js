/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * This type describes properties of an application resource.
 *
 */
class ApplicationProperties {
  /**
   * Create a ApplicationProperties.
   * @member {string} [description] User readable description of the
   * application.
   * @member {string} [debugParams] Internal use.
   * @member {array} [services] describes the services in the application.
   * @member {string} [healthState] Describes the health state of an
   * application resource. Possible values include: 'Invalid', 'Ok', 'Warning',
   * 'Error', 'Unknown'
   * @member {string} [unhealthyEvaluation] When the application's health state
   * is not 'Ok', this additional details from service fabric Health Manager
   * for the user to know why the application is marked unhealthy.
   * @member {string} [status] Status of the application resource. Possible
   * values include: 'Invalid', 'Ready', 'Upgrading', 'Creating', 'Deleting',
   * 'Failed'
   * @member {string} [statusDetails] Gives additional information about the
   * current status of the application deployment.
   * @member {array} [serviceNames] Names of the services in the application.
   * @member {object} [diagnostics] Describes the diagnostics definition and
   * usage for an application resource.
   * @member {array} [diagnostics.sinks] List of supported sinks that can be
   * referenced.
   * @member {boolean} [diagnostics.enabled] Status of whether or not sinks are
   * enabled.
   * @member {string} [diagnostics.defaultSinkRefs] The sinks to be used if
   * diagnostics is enabled. Sink choices can be overridden at the service and
   * code package level.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ApplicationProperties
   *
   * @returns {object} metadata of ApplicationProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ApplicationProperties',
      type: {
        name: 'Composite',
        className: 'ApplicationProperties',
        modelProperties: {
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          debugParams: {
            required: false,
            serializedName: 'debugParams',
            type: {
              name: 'String'
            }
          },
          services: {
            required: false,
            serializedName: 'services',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServiceResourceDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ServiceResourceDescription'
                  }
              }
            }
          },
          healthState: {
            required: false,
            readOnly: true,
            serializedName: 'healthState',
            type: {
              name: 'String'
            }
          },
          unhealthyEvaluation: {
            required: false,
            readOnly: true,
            serializedName: 'unhealthyEvaluation',
            type: {
              name: 'String'
            }
          },
          status: {
            required: false,
            readOnly: true,
            serializedName: 'status',
            type: {
              name: 'String'
            }
          },
          statusDetails: {
            required: false,
            readOnly: true,
            serializedName: 'statusDetails',
            type: {
              name: 'String'
            }
          },
          serviceNames: {
            required: false,
            readOnly: true,
            serializedName: 'serviceNames',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          diagnostics: {
            required: false,
            serializedName: 'diagnostics',
            type: {
              name: 'Composite',
              className: 'DiagnosticsDescription'
            }
          }
        }
      }
    };
  }
}

module.exports = ApplicationProperties;
