/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource } from 'ms-rest-azure';
import { CloudError } from 'ms-rest-azure';
import * as moment from 'moment';

export { BaseResource } from 'ms-rest-azure';
export { CloudError } from 'ms-rest-azure';


/**
 * @class
 * Initializes a new instance of the AvailableOperationDisplay class.
 * @constructor
 * An operation available at the listed Azure resource provider.
 *
 * @property {string} [provider] Name of the operation provider.
 * @property {string} [resource] Name of the resource on which the operation is
 * available.
 * @property {string} [operation] Name of the available operation.
 * @property {string} [description] Description of the available operation.
 */
export interface AvailableOperationDisplay {
  provider?: string;
  resource?: string;
  operation?: string;
  description?: string;
}

/**
 * @class
 * Initializes a new instance of the ErrorDetailsModel class.
 * @constructor
 * Error model details information
 *
 * @property {string} code
 * @property {string} message Error message.
 */
export interface ErrorDetailsModel {
  code: string;
  message: string;
}

/**
 * @class
 * Initializes a new instance of the ErrorErrorModel class.
 * @constructor
 * Error model information
 *
 * @property {string} code
 * @property {string} [message] Error message.
 * @property {string} [innerError]
 * @property {array} [details] List of error message details.
 */
export interface ErrorErrorModel {
  code: string;
  message?: string;
  innerError?: string;
  details?: ErrorDetailsModel[];
}

/**
 * @class
 * Initializes a new instance of the ErrorModel class.
 * @constructor
 * The error details.
 *
 * @property {object} error Error model information
 * @property {string} [error.code]
 * @property {string} [error.message] Error message.
 * @property {string} [error.innerError]
 * @property {array} [error.details] List of error message details.
 */
export interface ErrorModel {
  error: ErrorErrorModel;
}

/**
 * @class
 * Initializes a new instance of the OperationResult class.
 * @constructor
 * List of operations available at the listed Azure resource provider.
 *
 * @property {string} [name] The name of the operation.
 * @property {object} [display] The object that represents the operation.
 * @property {string} [display.provider] Name of the operation provider.
 * @property {string} [display.resource] Name of the resource on which the
 * operation is available.
 * @property {string} [display.operation] Name of the available operation.
 * @property {string} [display.description] Description of the available
 * operation.
 * @property {string} [origin] Origin result
 * @property {string} [nextLink] The URL to use for getting the next set of
 * results.
 */
export interface OperationResult {
  name?: string;
  display?: AvailableOperationDisplay;
  origin?: string;
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the ProvisionedResourceProperties class.
 * @constructor
 * Describes common properties of a provisioned resource.
 *
 * @property {string} [provisioningState] State of the resource.
 */
export interface ProvisionedResourceProperties {
  readonly provisioningState?: string;
}

/**
 * @class
 * Initializes a new instance of the Resource class.
 * @constructor
 * The resource model definition for Azure Resource Manager resource.
 *
 * @property {string} [id] Fully qualified identifier for the resource. Ex -
 * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
 * @property {string} [name] The name of the resource
 * @property {string} [type] The type of the resource. Ex-
 * Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
 */
export interface Resource extends BaseResource {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
}

/**
 * @class
 * Initializes a new instance of the ProxyResource class.
 * @constructor
 * The resource model definition for Azure Resource Manager proxy resource. It
 * will have everything other than required location and tags.
 *
 */
export interface ProxyResource extends Resource {
}

/**
 * @class
 * Initializes a new instance of the ManagedProxyResource class.
 * @constructor
 * The resource model definition for Azure Resource Manager proxy resource. It
 * will have everything other than required location and tags. This proxy
 * resource is explicitly created or updated by including it in the parent
 * resource.
 *
 * @property {string} [id] Fully qualified identifier for the resource. Ex -
 * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
 * @property {string} [name] The name of the resource
 * @property {string} [type] The type of the resource. Ex-
 * Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
 */
export interface ManagedProxyResource extends BaseResource {
  readonly id?: string;
  name?: string;
  readonly type?: string;
}

/**
 * @class
 * Initializes a new instance of the TrackedResource class.
 * @constructor
 * The resource model definition for Azure Resource Manager tracked top-level
 * resource.
 *
 * @property {object} [tags] Resource tags.
 * @property {string} location The geo-location where the resource lives
 */
export interface TrackedResource extends Resource {
  tags?: { [propertyName: string]: string };
  location: string;
}

/**
 * @class
 * Initializes a new instance of the SecretResourcePropertiesBase class.
 * @constructor
 * This type describes the properties of a secret resource, including its kind.
 *
 * @property {string} kind Polymorphic Discriminator
 */
export interface SecretResourcePropertiesBase extends ProvisionedResourceProperties {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the SecretResourceProperties class.
 * @constructor
 * Describes the properties of a secret resource.
 *
 * @property {string} [description] User readable description of the secret.
 * @property {string} [status] Status of the resource. Possible values include:
 * 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @property {string} [statusDetails] Gives additional information about the
 * current status of the secret.
 * @property {string} [contentType] The type of the content stored in the
 * secret value. The value of this property is opaque to Service Fabric. Once
 * set, the value of this property cannot be changed.
 */
export interface SecretResourceProperties extends SecretResourcePropertiesBase {
  description?: string;
  readonly status?: string;
  readonly statusDetails?: string;
  contentType?: string;
}

/**
 * @class
 * Initializes a new instance of the InlinedValueSecretResourceProperties class.
 * @constructor
 * Describes the properties of a secret resource whose value is provided
 * explicitly as plaintext. The secret resource may have multiple values, each
 * being uniquely versioned. The secret value of each version is stored
 * encrypted, and delivered as plaintext into the context of applications
 * referencing it.
 *
 */
export interface InlinedValueSecretResourceProperties extends SecretResourceProperties {
}

/**
 * @class
 * Initializes a new instance of the SecretResourceDescription class.
 * @constructor
 * This type describes a secret resource.
 *
 * @property {object} properties Describes the properties of a secret resource.
 * @property {string} [properties.description] User readable description of the
 * secret.
 * @property {string} [properties.status] Status of the resource. Possible
 * values include: 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting',
 * 'Failed'
 * @property {string} [properties.statusDetails] Gives additional information
 * about the current status of the secret.
 * @property {string} [properties.contentType] The type of the content stored
 * in the secret value. The value of this property is opaque to Service Fabric.
 * Once set, the value of this property cannot be changed.
 */
export interface SecretResourceDescription extends TrackedResource {
  properties: SecretResourceProperties;
}

/**
 * @class
 * Initializes a new instance of the SecretValue class.
 * @constructor
 * This type represents the unencrypted value of the secret.
 *
 * @property {string} [value] The actual value of the secret.
 */
export interface SecretValue {
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the SecretValueProperties class.
 * @constructor
 * This type describes properties of secret value resource.
 *
 * @property {string} [value] The actual value of the secret.
 */
export interface SecretValueProperties {
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the SecretValueResourceDescription class.
 * @constructor
 * This type describes a value of a secret resource. The name of this resource
 * is the version identifier corresponding to this secret value.
 *
 * @property {string} [provisioningState] State of the resource.
 * @property {string} [value] The actual value of the secret.
 */
export interface SecretValueResourceDescription extends TrackedResource {
  readonly provisioningState?: string;
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the VolumeProviderParametersAzureFile class.
 * @constructor
 * This type describes a volume provided by an Azure Files file share.
 *
 * @property {string} accountName Name of the Azure storage account for the
 * File Share.
 * @property {string} [accountKey] Access key of the Azure storage account for
 * the File Share.
 * @property {string} shareName Name of the Azure Files file share that
 * provides storage for the volume.
 */
export interface VolumeProviderParametersAzureFile {
  accountName: string;
  accountKey?: string;
  shareName: string;
}

/**
 * @class
 * Initializes a new instance of the VolumeProperties class.
 * @constructor
 * Describes properties of a volume resource.
 *
 * @property {string} [description] User readable description of the volume.
 * @property {string} [status] Status of the volume. Possible values include:
 * 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @property {string} [statusDetails] Gives additional information about the
 * current status of the volume.
 * @property {object} [azureFileParameters] This type describes a volume
 * provided by an Azure Files file share.
 * @property {string} [azureFileParameters.accountName] Name of the Azure
 * storage account for the File Share.
 * @property {string} [azureFileParameters.accountKey] Access key of the Azure
 * storage account for the File Share.
 * @property {string} [azureFileParameters.shareName] Name of the Azure Files
 * file share that provides storage for the volume.
 */
export interface VolumeProperties {
  description?: string;
  readonly status?: string;
  readonly statusDetails?: string;
  azureFileParameters?: VolumeProviderParametersAzureFile;
}

/**
 * @class
 * Initializes a new instance of the VolumeReference class.
 * @constructor
 * Describes a reference to a volume resource.
 *
 * @property {string} name Name of the volume being referenced.
 * @property {boolean} [readOnly] The flag indicating whether the volume is
 * read only. Default is 'false'.
 * @property {string} destinationPath The path within the container at which
 * the volume should be mounted. Only valid path characters are allowed.
 */
export interface VolumeReference {
  name: string;
  readOnly?: boolean;
  destinationPath: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationScopedVolumeCreationParameters class.
 * @constructor
 * Describes parameters for creating application-scoped volumes.
 *
 * @property {string} [description] User readable description of the volume.
 * @property {string} kind Polymorphic Discriminator
 */
export interface ApplicationScopedVolumeCreationParameters {
  description?: string;
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationScopedVolume class.
 * @constructor
 * Describes a volume whose lifetime is scoped to the application's lifetime.
 *
 * @property {object} creationParameters Describes parameters for creating
 * application-scoped volumes.
 * @property {string} [creationParameters.description] User readable
 * description of the volume.
 * @property {string} [creationParameters.kind] Polymorphic Discriminator
 */
export interface ApplicationScopedVolume extends VolumeReference {
  creationParameters: ApplicationScopedVolumeCreationParameters;
}

/**
 * @class
 * Initializes a new instance of the ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk class.
 * @constructor
 * Describes parameters for creating application-scoped volumes provided by
 * Service Fabric Volume Disks
 *
 * @property {string} sizeDisk Volume size. Possible values include: 'Small',
 * 'Medium', 'Large'
 */
export interface ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk extends ApplicationScopedVolumeCreationParameters {
  sizeDisk: string;
}

/**
 * @class
 * Initializes a new instance of the VolumeResourceDescription class.
 * @constructor
 * This type describes a volume resource.
 *
 * @property {string} [provisioningState] State of the resource.
 * @property {string} [description] User readable description of the volume.
 * @property {string} [status] Status of the volume. Possible values include:
 * 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @property {string} [statusDetails] Gives additional information about the
 * current status of the volume.
 * @property {object} [azureFileParameters] This type describes a volume
 * provided by an Azure Files file share.
 * @property {string} [azureFileParameters.accountName] Name of the Azure
 * storage account for the File Share.
 * @property {string} [azureFileParameters.accountKey] Access key of the Azure
 * storage account for the File Share.
 * @property {string} [azureFileParameters.shareName] Name of the Azure Files
 * file share that provides storage for the volume.
 */
export interface VolumeResourceDescription extends TrackedResource {
  readonly provisioningState?: string;
  description?: string;
  readonly status?: string;
  readonly statusDetails?: string;
  azureFileParameters?: VolumeProviderParametersAzureFile;
}

/**
 * @class
 * Initializes a new instance of the NetworkResourcePropertiesBase class.
 * @constructor
 * This type describes the properties of a network resource, including its
 * kind.
 *
 * @property {string} kind Polymorphic Discriminator
 */
export interface NetworkResourcePropertiesBase extends ProvisionedResourceProperties {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the NetworkResourceProperties class.
 * @constructor
 * Describes properties of a network resource.
 *
 * @property {string} [description] User readable description of the network.
 * @property {string} [status] Status of the network. Possible values include:
 * 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @property {string} [statusDetails] Gives additional information about the
 * current status of the network.
 */
export interface NetworkResourceProperties extends NetworkResourcePropertiesBase {
  description?: string;
  readonly status?: string;
  readonly statusDetails?: string;
}

/**
 * @class
 * Initializes a new instance of the LocalNetworkResourceProperties class.
 * @constructor
 * Information about a Service Fabric container network local to a single
 * Service Fabric cluster.
 *
 * @property {string} [networkAddressPrefix] Address space for the local
 * container network.
 */
export interface LocalNetworkResourceProperties extends NetworkResourceProperties {
  networkAddressPrefix?: string;
}

/**
 * @class
 * Initializes a new instance of the EndpointRef class.
 * @constructor
 * Describes a reference to a service endpoint.
 *
 * @property {string} [name] Name of the endpoint.
 */
export interface EndpointRef {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the NetworkRef class.
 * @constructor
 * Describes a network reference in a service.
 *
 * @property {string} [name] Name of the network
 * @property {array} [endpointRefs] A list of endpoints that are exposed on
 * this network.
 */
export interface NetworkRef {
  name?: string;
  endpointRefs?: EndpointRef[];
}

/**
 * @class
 * Initializes a new instance of the NetworkResourceDescription class.
 * @constructor
 * This type describes a network resource.
 *
 * @property {object} properties Describes properties of a network resource.
 * @property {string} [properties.description] User readable description of the
 * network.
 * @property {string} [properties.status] Status of the network. Possible
 * values include: 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting',
 * 'Failed'
 * @property {string} [properties.statusDetails] Gives additional information
 * about the current status of the network.
 */
export interface NetworkResourceDescription extends TrackedResource {
  properties: NetworkResourceProperties;
}

/**
 * @class
 * Initializes a new instance of the GatewayDestination class.
 * @constructor
 * Describes destination endpoint for routing traffic.
 *
 * @property {string} applicationName Name of the service fabric Mesh
 * application.
 * @property {string} serviceName service that contains the endpoint.
 * @property {string} endpointName name of the endpoint in the service.
 */
export interface GatewayDestination {
  applicationName: string;
  serviceName: string;
  endpointName: string;
}

/**
 * @class
 * Initializes a new instance of the TcpConfig class.
 * @constructor
 * Describes the tcp configuration for external connectivity for this network.
 *
 * @property {string} name tcp gateway config name.
 * @property {number} port Specifies the port at which the service endpoint
 * below needs to be exposed.
 * @property {object} destination Describes destination endpoint for routing
 * traffic.
 * @property {string} [destination.applicationName] Name of the service fabric
 * Mesh application.
 * @property {string} [destination.serviceName] service that contains the
 * endpoint.
 * @property {string} [destination.endpointName] name of the endpoint in the
 * service.
 */
export interface TcpConfig {
  name: string;
  port: number;
  destination: GatewayDestination;
}

/**
 * @class
 * Initializes a new instance of the HttpRouteMatchPath class.
 * @constructor
 * Path to match for routing.
 *
 * @property {string} value Uri path to match for request.
 * @property {string} [rewrite] replacement string for matched part of the Uri.
 */
export interface HttpRouteMatchPath {
  value: string;
  rewrite?: string;
}

/**
 * @class
 * Initializes a new instance of the HttpRouteMatchHeader class.
 * @constructor
 * Describes header information for http route matching.
 *
 * @property {string} name Name of header to match in request.
 * @property {string} [value] Value of header to match in request.
 * @property {string} [type] how to match header value. Possible values
 * include: 'exact'
 */
export interface HttpRouteMatchHeader {
  name: string;
  value?: string;
  type?: string;
}

/**
 * @class
 * Initializes a new instance of the HttpRouteMatchRule class.
 * @constructor
 * Describes a rule for http route matching.
 *
 * @property {object} path Path to match for routing.
 * @property {string} [path.value] Uri path to match for request.
 * @property {string} [path.rewrite] replacement string for matched part of the
 * Uri.
 * @property {array} [headers] headers and their values to match in request.
 */
export interface HttpRouteMatchRule {
  path: HttpRouteMatchPath;
  headers?: HttpRouteMatchHeader[];
}

/**
 * @class
 * Initializes a new instance of the HttpRouteConfig class.
 * @constructor
 * Describes the hostname properties for http routing.
 *
 * @property {string} name http route name.
 * @property {object} match Describes a rule for http route matching.
 * @property {object} [match.path] Path to match for routing.
 * @property {string} [match.path.value] Uri path to match for request.
 * @property {string} [match.path.rewrite] replacement string for matched part
 * of the Uri.
 * @property {array} [match.headers] headers and their values to match in
 * request.
 * @property {object} destination Describes destination endpoint for routing
 * traffic.
 * @property {string} [destination.applicationName] Name of the service fabric
 * Mesh application.
 * @property {string} [destination.serviceName] service that contains the
 * endpoint.
 * @property {string} [destination.endpointName] name of the endpoint in the
 * service.
 */
export interface HttpRouteConfig {
  name: string;
  match: HttpRouteMatchRule;
  destination: GatewayDestination;
}

/**
 * @class
 * Initializes a new instance of the HttpHostConfig class.
 * @constructor
 * Describes the hostname properties for http routing.
 *
 * @property {string} name http hostname config name.
 * @property {array} routes Route information to use for routing. Routes are
 * processed in the order they are specified. Specify routes that are more
 * specific before routes that can hamdle general cases.
 */
export interface HttpHostConfig {
  name: string;
  routes: HttpRouteConfig[];
}

/**
 * @class
 * Initializes a new instance of the HttpConfig class.
 * @constructor
 * Describes the http configuration for external connectivity for this network.
 *
 * @property {string} name http gateway config name.
 * @property {number} port Specifies the port at which the service endpoint
 * below needs to be exposed.
 * @property {array} hosts description for routing.
 */
export interface HttpConfig {
  name: string;
  port: number;
  hosts: HttpHostConfig[];
}

/**
 * @class
 * Initializes a new instance of the GatewayProperties class.
 * @constructor
 * Describes properties of a gateway resource.
 *
 * @property {string} [description] User readable description of the gateway.
 * @property {object} sourceNetwork Network the gateway should listen on for
 * requests.
 * @property {string} [sourceNetwork.name] Name of the network
 * @property {array} [sourceNetwork.endpointRefs] A list of endpoints that are
 * exposed on this network.
 * @property {object} destinationNetwork Network that the Application is using.
 * @property {string} [destinationNetwork.name] Name of the network
 * @property {array} [destinationNetwork.endpointRefs] A list of endpoints that
 * are exposed on this network.
 * @property {array} [tcp] Configuration for tcp connectivity for this gateway.
 * @property {array} [http] Configuration for http connectivity for this
 * gateway.
 * @property {string} [status] Status of the resource. Possible values include:
 * 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @property {string} [statusDetails] Gives additional information about the
 * current status of the gateway.
 * @property {string} [ipAddress] IP address of the gateway. This is populated
 * in the response and is ignored for incoming requests.
 */
export interface GatewayProperties {
  description?: string;
  sourceNetwork: NetworkRef;
  destinationNetwork: NetworkRef;
  tcp?: TcpConfig[];
  http?: HttpConfig[];
  readonly status?: string;
  readonly statusDetails?: string;
  readonly ipAddress?: string;
}

/**
 * @class
 * Initializes a new instance of the GatewayResourceDescription class.
 * @constructor
 * This type describes a gateway resource.
 *
 * @property {string} [provisioningState] State of the resource.
 * @property {string} [description] User readable description of the gateway.
 * @property {object} sourceNetwork Network the gateway should listen on for
 * requests.
 * @property {string} [sourceNetwork.name] Name of the network
 * @property {array} [sourceNetwork.endpointRefs] A list of endpoints that are
 * exposed on this network.
 * @property {object} destinationNetwork Network that the Application is using.
 * @property {string} [destinationNetwork.name] Name of the network
 * @property {array} [destinationNetwork.endpointRefs] A list of endpoints that
 * are exposed on this network.
 * @property {array} [tcp] Configuration for tcp connectivity for this gateway.
 * @property {array} [http] Configuration for http connectivity for this
 * gateway.
 * @property {string} [status] Status of the resource. Possible values include:
 * 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @property {string} [statusDetails] Gives additional information about the
 * current status of the gateway.
 * @property {string} [ipAddress] IP address of the gateway. This is populated
 * in the response and is ignored for incoming requests.
 */
export interface GatewayResourceDescription extends TrackedResource {
  readonly provisioningState?: string;
  description?: string;
  sourceNetwork: NetworkRef;
  destinationNetwork: NetworkRef;
  tcp?: TcpConfig[];
  http?: HttpConfig[];
  readonly status?: string;
  readonly statusDetails?: string;
  readonly ipAddress?: string;
}

/**
 * @class
 * Initializes a new instance of the ImageRegistryCredential class.
 * @constructor
 * Image registry credential.
 *
 * @property {string} server Docker image registry server, without protocol
 * such as `http` and `https`.
 * @property {string} username The username for the private registry.
 * @property {string} [password] The password for the private registry. The
 * password is required for create or update operations, however it is not
 * returned in the get or list operations.
 */
export interface ImageRegistryCredential {
  server: string;
  username: string;
  password?: string;
}

/**
 * @class
 * Initializes a new instance of the EnvironmentVariable class.
 * @constructor
 * Describes an environment variable for the container.
 *
 * @property {string} [name] The name of the environment variable.
 * @property {string} [value] The value of the environment variable.
 */
export interface EnvironmentVariable {
  name?: string;
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the Setting class.
 * @constructor
 * Describes a setting for the container. The setting file path can be fetched
 * from environment variable "Fabric_SettingPath". The path for Windows
 * container is "C:\\secrets". The path for Linux container is "/var/secrets".
 *
 * @property {string} [name] The name of the setting.
 * @property {string} [value] The value of the setting.
 */
export interface Setting {
  name?: string;
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the ContainerLabel class.
 * @constructor
 * Describes a container label.
 *
 * @property {string} name The name of the container label.
 * @property {string} value The value of the container label.
 */
export interface ContainerLabel {
  name: string;
  value: string;
}

/**
 * @class
 * Initializes a new instance of the EndpointProperties class.
 * @constructor
 * Describes a container endpoint.
 *
 * @property {string} name The name of the endpoint.
 * @property {number} [port] Port used by the container.
 */
export interface EndpointProperties {
  name: string;
  port?: number;
}

/**
 * @class
 * Initializes a new instance of the ResourceRequests class.
 * @constructor
 * This type describes the requested resources for a given container. It
 * describes the least amount of resources required for the container. A
 * container can consume more than requested resources up to the specified
 * limits before being restarted. Currently, the requested resources are
 * treated as limits.
 *
 * @property {number} memoryInGB The memory request in GB for this container.
 * @property {number} cpu Requested number of CPU cores. At present, only full
 * cores are supported.
 */
export interface ResourceRequests {
  memoryInGB: number;
  cpu: number;
}

/**
 * @class
 * Initializes a new instance of the ResourceLimits class.
 * @constructor
 * This type describes the resource limits for a given container. It describes
 * the most amount of resources a container is allowed to use before being
 * restarted.
 *
 * @property {number} [memoryInGB] The memory limit in GB.
 * @property {number} [cpu] CPU limits in cores. At present, only full cores
 * are supported.
 */
export interface ResourceLimits {
  memoryInGB?: number;
  cpu?: number;
}

/**
 * @class
 * Initializes a new instance of the ResourceRequirements class.
 * @constructor
 * This type describes the resource requirements for a container or a service.
 *
 * @property {object} requests Describes the requested resources for a given
 * container.
 * @property {number} [requests.memoryInGB] The memory request in GB for this
 * container.
 * @property {number} [requests.cpu] Requested number of CPU cores. At present,
 * only full cores are supported.
 * @property {object} [limits] Describes the maximum limits on the resources
 * for a given container.
 * @property {number} [limits.memoryInGB] The memory limit in GB.
 * @property {number} [limits.cpu] CPU limits in cores. At present, only full
 * cores are supported.
 */
export interface ResourceRequirements {
  requests: ResourceRequests;
  limits?: ResourceLimits;
}

/**
 * @class
 * Initializes a new instance of the DiagnosticsRef class.
 * @constructor
 * Reference to sinks in DiagnosticsDescription.
 *
 * @property {boolean} [enabled] Status of whether or not sinks are enabled.
 * @property {array} [sinkRefs] List of sinks to be used if enabled. References
 * the list of sinks in DiagnosticsDescription.
 */
export interface DiagnosticsRef {
  enabled?: boolean;
  sinkRefs?: string[];
}

/**
 * @class
 * Initializes a new instance of the ReliableCollectionsRef class.
 * @constructor
 * Specifying this parameter adds support for reliable collections
 *
 * @property {string} name Name of ReliableCollection resource. Right now it's
 * not used and you can use any string.
 * @property {boolean} [doNotPersistState] False (the default) if
 * ReliableCollections state is persisted to disk as usual. True if you do not
 * want to persist state, in which case replication is still enabled and you
 * can use ReliableCollections as distributed cache.
 */
export interface ReliableCollectionsRef {
  name: string;
  doNotPersistState?: boolean;
}

/**
 * @class
 * Initializes a new instance of the ContainerState class.
 * @constructor
 * The container state.
 *
 * @property {string} [state] The state of this container
 * @property {date} [startTime] Date/time when the container state started.
 * @property {string} [exitCode] The container exit code.
 * @property {date} [finishTime] Date/time when the container state finished.
 * @property {string} [detailStatus] Human-readable status of this state.
 */
export interface ContainerState {
  state?: string;
  startTime?: Date;
  exitCode?: string;
  finishTime?: Date;
  detailStatus?: string;
}

/**
 * @class
 * Initializes a new instance of the ContainerEvent class.
 * @constructor
 * A container event.
 *
 * @property {string} [name] The name of the container event.
 * @property {number} [count] The count of the event.
 * @property {string} [firstTimestamp] Date/time of the first event.
 * @property {string} [lastTimestamp] Date/time of the last event.
 * @property {string} [message] The event message
 * @property {string} [type] The event type.
 */
export interface ContainerEvent {
  name?: string;
  count?: number;
  firstTimestamp?: string;
  lastTimestamp?: string;
  message?: string;
  type?: string;
}

/**
 * @class
 * Initializes a new instance of the ContainerInstanceView class.
 * @constructor
 * Runtime information of a container instance.
 *
 * @property {number} [restartCount] The number of times the container has been
 * restarted.
 * @property {object} [currentState] Current container instance state.
 * @property {string} [currentState.state] The state of this container
 * @property {date} [currentState.startTime] Date/time when the container state
 * started.
 * @property {string} [currentState.exitCode] The container exit code.
 * @property {date} [currentState.finishTime] Date/time when the container
 * state finished.
 * @property {string} [currentState.detailStatus] Human-readable status of this
 * state.
 * @property {object} [previousState] Previous container instance state.
 * @property {string} [previousState.state] The state of this container
 * @property {date} [previousState.startTime] Date/time when the container
 * state started.
 * @property {string} [previousState.exitCode] The container exit code.
 * @property {date} [previousState.finishTime] Date/time when the container
 * state finished.
 * @property {string} [previousState.detailStatus] Human-readable status of
 * this state.
 * @property {array} [events] The events of this container instance.
 */
export interface ContainerInstanceView {
  restartCount?: number;
  currentState?: ContainerState;
  previousState?: ContainerState;
  events?: ContainerEvent[];
}

/**
 * @class
 * Initializes a new instance of the ContainerCodePackageProperties class.
 * @constructor
 * Describes a container and its runtime properties.
 *
 * @property {string} name The name of the code package.
 * @property {string} image The Container image to use.
 * @property {object} [imageRegistryCredential] Image registry credential.
 * @property {string} [imageRegistryCredential.server] Docker image registry
 * server, without protocol such as `http` and `https`.
 * @property {string} [imageRegistryCredential.username] The username for the
 * private registry.
 * @property {string} [imageRegistryCredential.password] The password for the
 * private registry. The password is required for create or update operations,
 * however it is not returned in the get or list operations.
 * @property {string} [entrypoint] Override for the default entry point in the
 * container.
 * @property {array} [commands] Command array to execute within the container
 * in exec form.
 * @property {array} [environmentVariables] The environment variables to set in
 * this container
 * @property {array} [settings] The settings to set in this container. The
 * setting file path can be fetched from environment variable
 * "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The
 * path for Linux container is "/var/secrets".
 * @property {array} [labels] The labels to set in this container.
 * @property {array} [endpoints] The endpoints exposed by this container.
 * @property {object} resources The resources required by this container.
 * @property {object} [resources.requests] Describes the requested resources
 * for a given container.
 * @property {number} [resources.requests.memoryInGB] The memory request in GB
 * for this container.
 * @property {number} [resources.requests.cpu] Requested number of CPU cores.
 * At present, only full cores are supported.
 * @property {object} [resources.limits] Describes the maximum limits on the
 * resources for a given container.
 * @property {number} [resources.limits.memoryInGB] The memory limit in GB.
 * @property {number} [resources.limits.cpu] CPU limits in cores. At present,
 * only full cores are supported.
 * @property {array} [volumeRefs] Volumes to be attached to the container. The
 * lifetime of these volumes is independent of the application's lifetime.
 * @property {array} [volumes] Volumes to be attached to the container. The
 * lifetime of these volumes is scoped to the application's lifetime.
 * @property {object} [diagnostics] Reference to sinks in
 * DiagnosticsDescription.
 * @property {boolean} [diagnostics.enabled] Status of whether or not sinks are
 * enabled.
 * @property {array} [diagnostics.sinkRefs] List of sinks to be used if
 * enabled. References the list of sinks in DiagnosticsDescription.
 * @property {array} [reliableCollectionsRefs] A list of ReliableCollection
 * resources used by this particular code package. Please refer to
 * ReliablecollectionsRef for more details.
 * @property {object} [instanceView] Runtime information of a container
 * instance.
 * @property {number} [instanceView.restartCount] The number of times the
 * container has been restarted.
 * @property {object} [instanceView.currentState] Current container instance
 * state.
 * @property {string} [instanceView.currentState.state] The state of this
 * container
 * @property {date} [instanceView.currentState.startTime] Date/time when the
 * container state started.
 * @property {string} [instanceView.currentState.exitCode] The container exit
 * code.
 * @property {date} [instanceView.currentState.finishTime] Date/time when the
 * container state finished.
 * @property {string} [instanceView.currentState.detailStatus] Human-readable
 * status of this state.
 * @property {object} [instanceView.previousState] Previous container instance
 * state.
 * @property {string} [instanceView.previousState.state] The state of this
 * container
 * @property {date} [instanceView.previousState.startTime] Date/time when the
 * container state started.
 * @property {string} [instanceView.previousState.exitCode] The container exit
 * code.
 * @property {date} [instanceView.previousState.finishTime] Date/time when the
 * container state finished.
 * @property {string} [instanceView.previousState.detailStatus] Human-readable
 * status of this state.
 * @property {array} [instanceView.events] The events of this container
 * instance.
 */
export interface ContainerCodePackageProperties {
  name: string;
  image: string;
  imageRegistryCredential?: ImageRegistryCredential;
  entrypoint?: string;
  commands?: string[];
  environmentVariables?: EnvironmentVariable[];
  settings?: Setting[];
  labels?: ContainerLabel[];
  endpoints?: EndpointProperties[];
  resources: ResourceRequirements;
  volumeRefs?: VolumeReference[];
  volumes?: ApplicationScopedVolume[];
  diagnostics?: DiagnosticsRef;
  reliableCollectionsRefs?: ReliableCollectionsRef[];
  readonly instanceView?: ContainerInstanceView;
}

/**
 * @class
 * Initializes a new instance of the AutoScalingTrigger class.
 * @constructor
 * Describes the trigger for performing auto scaling operation.
 *
 * @property {string} kind Polymorphic Discriminator
 */
export interface AutoScalingTrigger {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the AutoScalingMechanism class.
 * @constructor
 * Describes the mechanism for performing auto scaling operation. Derived
 * classes will describe the actual mechanism.
 *
 * @property {string} kind Polymorphic Discriminator
 */
export interface AutoScalingMechanism {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the AutoScalingPolicy class.
 * @constructor
 * Describes the auto scaling policy
 *
 * @property {string} name The name of the auto scaling policy.
 * @property {object} trigger Determines when auto scaling operation will be
 * invoked.
 * @property {string} [trigger.kind] Polymorphic Discriminator
 * @property {object} mechanism The mechanism that is used to scale when auto
 * scaling operation is invoked.
 * @property {string} [mechanism.kind] Polymorphic Discriminator
 */
export interface AutoScalingPolicy {
  name: string;
  trigger: AutoScalingTrigger;
  mechanism: AutoScalingMechanism;
}

/**
 * @class
 * Initializes a new instance of the ServiceResourceDescription class.
 * @constructor
 * This type describes a service resource.
 *
 * @property {string} [provisioningState] State of the resource.
 * @property {string} osType The operation system required by the code in
 * service. Possible values include: 'Linux', 'Windows'
 * @property {array} codePackages Describes the set of code packages that forms
 * the service. A code package describes the container and the properties for
 * running it. All the code packages are started together on the same host and
 * share the same context (network, process etc.).
 * @property {array} [networkRefs] The names of the private networks that this
 * service needs to be part of.
 * @property {object} [diagnostics] Reference to sinks in
 * DiagnosticsDescription.
 * @property {boolean} [diagnostics.enabled] Status of whether or not sinks are
 * enabled.
 * @property {array} [diagnostics.sinkRefs] List of sinks to be used if
 * enabled. References the list of sinks in DiagnosticsDescription.
 * @property {string} [description] User readable description of the service.
 * @property {number} [replicaCount] The number of replicas of the service to
 * create. Defaults to 1 if not specified.
 * @property {array} [autoScalingPolicies] Auto scaling policies
 * @property {string} [status] Status of the service. Possible values include:
 * 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @property {string} [statusDetails] Gives additional information about the
 * current status of the service.
 * @property {string} [healthState] Describes the health state of an
 * application resource. Possible values include: 'Invalid', 'Ok', 'Warning',
 * 'Error', 'Unknown'
 * @property {string} [unhealthyEvaluation] When the service's health state is
 * not 'Ok', this additional details from service fabric Health Manager for the
 * user to know why the service is marked unhealthy.
 */
export interface ServiceResourceDescription extends ManagedProxyResource {
  readonly provisioningState?: string;
  osType: string;
  codePackages: ContainerCodePackageProperties[];
  networkRefs?: NetworkRef[];
  diagnostics?: DiagnosticsRef;
  description?: string;
  replicaCount?: number;
  autoScalingPolicies?: AutoScalingPolicy[];
  readonly status?: string;
  readonly statusDetails?: string;
  readonly healthState?: string;
  readonly unhealthyEvaluation?: string;
}

/**
 * @class
 * Initializes a new instance of the DiagnosticsSinkProperties class.
 * @constructor
 * Properties of a DiagnosticsSink.
 *
 * @property {string} [name] Name of the sink. This value is referenced by
 * DiagnosticsReferenceDescription
 * @property {string} [description] A description of the sink.
 * @property {string} kind Polymorphic Discriminator
 */
export interface DiagnosticsSinkProperties {
  name?: string;
  description?: string;
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the DiagnosticsDescription class.
 * @constructor
 * Describes the diagnostics options available
 *
 * @property {array} [sinks] List of supported sinks that can be referenced.
 * @property {boolean} [enabled] Status of whether or not sinks are enabled.
 * @property {array} [defaultSinkRefs] The sinks to be used if diagnostics is
 * enabled. Sink choices can be overridden at the service and code package
 * level.
 */
export interface DiagnosticsDescription {
  sinks?: DiagnosticsSinkProperties[];
  enabled?: boolean;
  defaultSinkRefs?: string[];
}

/**
 * @class
 * Initializes a new instance of the ApplicationProperties class.
 * @constructor
 * Describes properties of a application resource.
 *
 * @property {string} [description] User readable description of the
 * application.
 * @property {array} [services] Describes the services in the application. This
 * property is used to create or modify services of the application. On get
 * only the name of the service is returned. The service description can be
 * obtained by querying for the service resource.
 * @property {object} [diagnostics] Describes the diagnostics definition and
 * usage for an application resource.
 * @property {array} [diagnostics.sinks] List of supported sinks that can be
 * referenced.
 * @property {boolean} [diagnostics.enabled] Status of whether or not sinks are
 * enabled.
 * @property {array} [diagnostics.defaultSinkRefs] The sinks to be used if
 * diagnostics is enabled. Sink choices can be overridden at the service and
 * code package level.
 * @property {string} [debugParams] Internal - used by Visual Studio to setup
 * the debugging session on the local development environment.
 * @property {array} [serviceNames] Names of the services in the application.
 * @property {string} [status] Status of the application. Possible values
 * include: 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @property {string} [statusDetails] Gives additional information about the
 * current status of the application.
 * @property {string} [healthState] Describes the health state of an
 * application resource. Possible values include: 'Invalid', 'Ok', 'Warning',
 * 'Error', 'Unknown'
 * @property {string} [unhealthyEvaluation] When the application's health state
 * is not 'Ok', this additional details from service fabric Health Manager for
 * the user to know why the application is marked unhealthy.
 */
export interface ApplicationProperties {
  description?: string;
  services?: ServiceResourceDescription[];
  diagnostics?: DiagnosticsDescription;
  debugParams?: string;
  readonly serviceNames?: string[];
  readonly status?: string;
  readonly statusDetails?: string;
  readonly healthState?: string;
  readonly unhealthyEvaluation?: string;
}

/**
 * @class
 * Initializes a new instance of the AzureInternalMonitoringPipelineSinkDescription class.
 * @constructor
 * Diagnostics settings for Geneva.
 *
 * @property {string} [accountName] Azure Internal monitoring pipeline account.
 * @property {string} [namespace] Azure Internal monitoring pipeline account
 * namespace.
 * @property {string} [maConfigUrl] Azure Internal monitoring agent
 * configuration.
 * @property {object} [fluentdConfigUrl] Azure Internal monitoring agent
 * fluentd configuration.
 * @property {string} [autoKeyConfigUrl] Azure Internal monitoring pipeline
 * autokey associated with the certificate.
 */
export interface AzureInternalMonitoringPipelineSinkDescription extends DiagnosticsSinkProperties {
  accountName?: string;
  namespace?: string;
  maConfigUrl?: string;
  fluentdConfigUrl?: any;
  autoKeyConfigUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationResourceDescription class.
 * @constructor
 * This type describes an application resource.
 *
 * @property {string} [provisioningState] State of the resource.
 * @property {string} [description] User readable description of the
 * application.
 * @property {array} [services] Describes the services in the application. This
 * property is used to create or modify services of the application. On get
 * only the name of the service is returned. The service description can be
 * obtained by querying for the service resource.
 * @property {object} [diagnostics] Describes the diagnostics definition and
 * usage for an application resource.
 * @property {array} [diagnostics.sinks] List of supported sinks that can be
 * referenced.
 * @property {boolean} [diagnostics.enabled] Status of whether or not sinks are
 * enabled.
 * @property {array} [diagnostics.defaultSinkRefs] The sinks to be used if
 * diagnostics is enabled. Sink choices can be overridden at the service and
 * code package level.
 * @property {string} [debugParams] Internal - used by Visual Studio to setup
 * the debugging session on the local development environment.
 * @property {array} [serviceNames] Names of the services in the application.
 * @property {string} [status] Status of the application. Possible values
 * include: 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @property {string} [statusDetails] Gives additional information about the
 * current status of the application.
 * @property {string} [healthState] Describes the health state of an
 * application resource. Possible values include: 'Invalid', 'Ok', 'Warning',
 * 'Error', 'Unknown'
 * @property {string} [unhealthyEvaluation] When the application's health state
 * is not 'Ok', this additional details from service fabric Health Manager for
 * the user to know why the application is marked unhealthy.
 */
export interface ApplicationResourceDescription extends TrackedResource {
  readonly provisioningState?: string;
  description?: string;
  services?: ServiceResourceDescription[];
  diagnostics?: DiagnosticsDescription;
  debugParams?: string;
  readonly serviceNames?: string[];
  readonly status?: string;
  readonly statusDetails?: string;
  readonly healthState?: string;
  readonly unhealthyEvaluation?: string;
}

/**
 * @class
 * Initializes a new instance of the AddRemoveReplicaScalingMechanism class.
 * @constructor
 * Describes the horizontal auto scaling mechanism that adds or removes
 * replicas (containers or container groups).
 *
 * @property {number} minCount Minimum number of containers (scale down won't
 * be performed below this number).
 * @property {number} maxCount Maximum number of containers (scale up won't be
 * performed above this number).
 * @property {number} scaleIncrement Each time auto scaling is performed, this
 * number of containers will be added or removed.
 */
export interface AddRemoveReplicaScalingMechanism extends AutoScalingMechanism {
  minCount: number;
  maxCount: number;
  scaleIncrement: number;
}

/**
 * @class
 * Initializes a new instance of the AutoScalingMetric class.
 * @constructor
 * Describes the metric that is used for triggering auto scaling operation.
 * Derived classes will describe resources or metrics.
 *
 * @property {string} kind Polymorphic Discriminator
 */
export interface AutoScalingMetric {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the AutoScalingResourceMetric class.
 * @constructor
 * Describes the resource that is used for triggering auto scaling.
 *
 * @property {string} name Name of the resource. Possible values include:
 * 'cpu', 'memoryInGB'
 */
export interface AutoScalingResourceMetric extends AutoScalingMetric {
  name: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceProperties class.
 * @constructor
 * Describes properties of a service resource.
 *
 * @property {string} [description] User readable description of the service.
 * @property {number} [replicaCount] The number of replicas of the service to
 * create. Defaults to 1 if not specified.
 * @property {array} [autoScalingPolicies] Auto scaling policies
 * @property {string} [status] Status of the service. Possible values include:
 * 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @property {string} [statusDetails] Gives additional information about the
 * current status of the service.
 * @property {string} [healthState] Describes the health state of an
 * application resource. Possible values include: 'Invalid', 'Ok', 'Warning',
 * 'Error', 'Unknown'
 * @property {string} [unhealthyEvaluation] When the service's health state is
 * not 'Ok', this additional details from service fabric Health Manager for the
 * user to know why the service is marked unhealthy.
 */
export interface ServiceProperties {
  description?: string;
  replicaCount?: number;
  autoScalingPolicies?: AutoScalingPolicy[];
  readonly status?: string;
  readonly statusDetails?: string;
  readonly healthState?: string;
  readonly unhealthyEvaluation?: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceReplicaProperties class.
 * @constructor
 * Describes the properties of a service replica.
 *
 * @property {string} osType The operation system required by the code in
 * service. Possible values include: 'Linux', 'Windows'
 * @property {array} codePackages Describes the set of code packages that forms
 * the service. A code package describes the container and the properties for
 * running it. All the code packages are started together on the same host and
 * share the same context (network, process etc.).
 * @property {array} [networkRefs] The names of the private networks that this
 * service needs to be part of.
 * @property {object} [diagnostics] Reference to sinks in
 * DiagnosticsDescription.
 * @property {boolean} [diagnostics.enabled] Status of whether or not sinks are
 * enabled.
 * @property {array} [diagnostics.sinkRefs] List of sinks to be used if
 * enabled. References the list of sinks in DiagnosticsDescription.
 */
export interface ServiceReplicaProperties {
  osType: string;
  codePackages: ContainerCodePackageProperties[];
  networkRefs?: NetworkRef[];
  diagnostics?: DiagnosticsRef;
}

/**
 * @class
 * Initializes a new instance of the ServiceReplicaDescription class.
 * @constructor
 * Describes a replica of a service resource.
 *
 * @property {string} replicaName Name of the replica.
 */
export interface ServiceReplicaDescription extends ServiceReplicaProperties {
  replicaName: string;
}

/**
 * @class
 * Initializes a new instance of the AverageLoadScalingTrigger class.
 * @constructor
 * Describes the average load trigger used for auto scaling.
 *
 * @property {object} metric Description of the metric that is used for
 * scaling.
 * @property {string} [metric.kind] Polymorphic Discriminator
 * @property {number} lowerLoadThreshold Lower load threshold (if average load
 * is below this threshold, service will scale down).
 * @property {number} upperLoadThreshold Upper load threshold (if average load
 * is above this threshold, service will scale up).
 * @property {number} scaleIntervalInSeconds Scale interval that indicates how
 * often will this trigger be checked.
 */
export interface AverageLoadScalingTrigger extends AutoScalingTrigger {
  metric: AutoScalingMetric;
  lowerLoadThreshold: number;
  upperLoadThreshold: number;
  scaleIntervalInSeconds: number;
}

/**
 * @class
 * Initializes a new instance of the ContainerLogs class.
 * @constructor
 * Container logs.
 *
 * @property {string} [content] Container logs.
 */
export interface ContainerLogs {
  content?: string;
}


/**
 * @class
 * Initializes a new instance of the OperationListResult class.
 * @constructor
 * Describes the result of the request to list Service Fabric operations.
 *
 * @property {string} [nextLink] URL to get the next set of operation list
 * results if there are any.
 */
export interface OperationListResult extends Array<OperationResult> {
  readonly nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the SecretResourceDescriptionList class.
 * @constructor
 * A pageable list of secret resources.
 *
 * @property {string} [nextLink] URI to fetch the next page of the list.
 */
export interface SecretResourceDescriptionList extends Array<SecretResourceDescription> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the SecretValueResourceDescriptionList class.
 * @constructor
 * A pageable list of values of a secret resource. The information does not
 * include only the name of the value and not the actual unecrypted value.
 *
 * @property {string} [nextLink] URI to fetch the next page of the list.
 */
export interface SecretValueResourceDescriptionList extends Array<SecretValueResourceDescription> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the VolumeResourceDescriptionList class.
 * @constructor
 * A pageable list of volume resources.
 *
 * @property {string} [nextLink] URI to fetch the next page of the list.
 */
export interface VolumeResourceDescriptionList extends Array<VolumeResourceDescription> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the NetworkResourceDescriptionList class.
 * @constructor
 * A pageable list of network resources.
 *
 * @property {string} [nextLink] URI to fetch the next page of the list.
 */
export interface NetworkResourceDescriptionList extends Array<NetworkResourceDescription> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the GatewayResourceDescriptionList class.
 * @constructor
 * A pageable list of gateway resources.
 *
 * @property {string} [nextLink] URI to fetch the next page of the list.
 */
export interface GatewayResourceDescriptionList extends Array<GatewayResourceDescription> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationResourceDescriptionList class.
 * @constructor
 * A pageable list of application resources.
 *
 * @property {string} [nextLink] URI to fetch the next page of the list.
 */
export interface ApplicationResourceDescriptionList extends Array<ApplicationResourceDescription> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceResourceDescriptionList class.
 * @constructor
 * A pageable list of service resources.
 *
 * @property {string} [nextLink] URI to fetch the next page of the list.
 */
export interface ServiceResourceDescriptionList extends Array<ServiceResourceDescription> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceReplicaDescriptionList class.
 * @constructor
 * A pageable list of service replicas.
 *
 * @property {string} [nextLink] URI to fetch the next page of the list.
 */
export interface ServiceReplicaDescriptionList extends Array<ServiceReplicaDescription> {
  nextLink?: string;
}
