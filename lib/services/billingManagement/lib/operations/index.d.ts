/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * BillingAccounts
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BillingManagementClient.
 */
export interface BillingAccounts {


    /**
     * Lists all billing accounts for a user which he has access to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the projects and
     * billingProfiles.
     *
     * @param {string} [options.filter] May be used to filter by permission. The
     * filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not
     * currently support 'ne', 'or', or 'not'. Tag filter is a key value pair
     * string where key and value is separated by a colon (:).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BillingAccountListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BillingAccountListResult>>;

    /**
     * Lists all billing accounts for a user which he has access to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the projects and
     * billingProfiles.
     *
     * @param {string} [options.filter] May be used to filter by permission. The
     * filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not
     * currently support 'ne', 'or', or 'not'. Tag filter is a key value pair
     * string where key and value is separated by a colon (:).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BillingAccountListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BillingAccountListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BillingAccountListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.BillingAccountListResult>;
    list(callback: ServiceCallback<models.BillingAccountListResult>): void;
    list(options: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BillingAccountListResult>): void;


    /**
     * Get the billing account by id.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the projects and
     * billingProfiles.
     *
     * @param {string} [options.filter] May be used to filter by permission. The
     * filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not
     * currently support 'ne', 'or', or 'not'. Tag filter is a key value pair
     * string where key and value is separated by a colon (:).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BillingAccount>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(billingAccountId: string, options?: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BillingAccount>>;

    /**
     * Get the billing account by id.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the projects and
     * billingProfiles.
     *
     * @param {string} [options.filter] May be used to filter by permission. The
     * filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not
     * currently support 'ne', 'or', or 'not'. Tag filter is a key value pair
     * string where key and value is separated by a colon (:).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BillingAccount} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BillingAccount} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BillingAccount} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(billingAccountId: string, options?: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.BillingAccount>;
    get(billingAccountId: string, callback: ServiceCallback<models.BillingAccount>): void;
    get(billingAccountId: string, options: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BillingAccount>): void;
}

/**
 * @class
 * BillingProfiles
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BillingManagementClient.
 */
export interface BillingProfiles {


    /**
     * Lists all billing profiles for a user which that user has access to.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BillingProfileListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByBillingAccountIdWithHttpOperationResponse(billingAccountId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BillingProfileListResult>>;

    /**
     * Lists all billing profiles for a user which that user has access to.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BillingProfileListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BillingProfileListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BillingProfileListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByBillingAccountId(billingAccountId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BillingProfileListResult>;
    listByBillingAccountId(billingAccountId: string, callback: ServiceCallback<models.BillingProfileListResult>): void;
    listByBillingAccountId(billingAccountId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BillingProfileListResult>): void;


    /**
     * Get the billing profile by id.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {string} billingProfileId Billing Profile Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BillingProfile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(billingAccountId: string, billingProfileId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BillingProfile>>;

    /**
     * Get the billing profile by id.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {string} billingProfileId Billing Profile Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BillingProfile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BillingProfile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BillingProfile} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(billingAccountId: string, billingProfileId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BillingProfile>;
    get(billingAccountId: string, billingProfileId: string, callback: ServiceCallback<models.BillingProfile>): void;
    get(billingAccountId: string, billingProfileId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BillingProfile>): void;
}

/**
 * @class
 * Projects
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BillingManagementClient.
 */
export interface Projects {


    /**
     * Lists all projects for a user which he has access to.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the eligibleOffers.
     *
     * @param {string} [options.filter] May be used to filter by permission. The
     * filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not
     * currently support 'ne', 'or', or 'not'. Tag filter is a key value pair
     * string where key and value is separated by a colon (:).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProjectListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByBillingAccountIdWithHttpOperationResponse(billingAccountId: string, options?: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProjectListResult>>;

    /**
     * Lists all projects for a user which he has access to.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the eligibleOffers.
     *
     * @param {string} [options.filter] May be used to filter by permission. The
     * filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not
     * currently support 'ne', 'or', or 'not'. Tag filter is a key value pair
     * string where key and value is separated by a colon (:).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProjectListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProjectListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProjectListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByBillingAccountId(billingAccountId: string, options?: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProjectListResult>;
    listByBillingAccountId(billingAccountId: string, callback: ServiceCallback<models.ProjectListResult>): void;
    listByBillingAccountId(billingAccountId: string, options: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProjectListResult>): void;


    /**
     * The operation to create a project.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {object} parameters Parameters supplied to the Create Project
     * operation.
     *
     * @param {string} [parameters.displayName] The name of the project.
     *
     * @param {array} [parameters.eligibleOffers] The eligible offers attached to
     * the project.
     *
     * @param {string} [parameters.costCenter] The cost center for the project.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Project>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(billingAccountId: string, parameters: models.Project, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Project>>;

    /**
     * The operation to create a project.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {object} parameters Parameters supplied to the Create Project
     * operation.
     *
     * @param {string} [parameters.displayName] The name of the project.
     *
     * @param {array} [parameters.eligibleOffers] The eligible offers attached to
     * the project.
     *
     * @param {string} [parameters.costCenter] The cost center for the project.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Project} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Project} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Project} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(billingAccountId: string, parameters: models.Project, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Project>;
    create(billingAccountId: string, parameters: models.Project, callback: ServiceCallback<models.Project>): void;
    create(billingAccountId: string, parameters: models.Project, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Project>): void;


    /**
     * Get the project by id.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {string} projectId Project Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the eligibleOffers.
     *
     * @param {string} [options.filter] May be used to filter by permission. The
     * filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not
     * currently support 'ne', 'or', or 'not'. Tag filter is a key value pair
     * string where key and value is separated by a colon (:).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Project>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(billingAccountId: string, projectId: string, options?: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Project>>;

    /**
     * Get the project by id.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {string} projectId Project Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the eligibleOffers.
     *
     * @param {string} [options.filter] May be used to filter by permission. The
     * filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not
     * currently support 'ne', 'or', or 'not'. Tag filter is a key value pair
     * string where key and value is separated by a colon (:).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Project} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Project} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Project} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(billingAccountId: string, projectId: string, options?: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Project>;
    get(billingAccountId: string, projectId: string, callback: ServiceCallback<models.Project>): void;
    get(billingAccountId: string, projectId: string, options: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Project>): void;


    /**
     * The operation to update a project.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {string} projectId Project Id.
     *
     * @param {object} parameters Parameters supplied to the Create Project
     * operation.
     *
     * @param {string} [parameters.displayName] The name of the project.
     *
     * @param {array} [parameters.eligibleOffers] The eligible offers attached to
     * the project.
     *
     * @param {string} [parameters.costCenter] The cost center for the project.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Project>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(billingAccountId: string, projectId: string, parameters: models.Project, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Project>>;

    /**
     * The operation to update a project.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {string} projectId Project Id.
     *
     * @param {object} parameters Parameters supplied to the Create Project
     * operation.
     *
     * @param {string} [parameters.displayName] The name of the project.
     *
     * @param {array} [parameters.eligibleOffers] The eligible offers attached to
     * the project.
     *
     * @param {string} [parameters.costCenter] The cost center for the project.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Project} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Project} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Project} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(billingAccountId: string, projectId: string, parameters: models.Project, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Project>;
    update(billingAccountId: string, projectId: string, parameters: models.Project, callback: ServiceCallback<models.Project>): void;
    update(billingAccountId: string, projectId: string, parameters: models.Project, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Project>): void;
}

/**
 * @class
 * EligibleOffers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BillingManagementClient.
 */
export interface EligibleOffers {


    /**
     * Lists all eligible offers for specified billing account id.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the billingProfiles.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EligibleOfferListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByBillingAccountIdWithHttpOperationResponse(billingAccountId: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EligibleOfferListResult>>;

    /**
     * Lists all eligible offers for specified billing account id.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the billingProfiles.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EligibleOfferListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EligibleOfferListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EligibleOfferListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByBillingAccountId(billingAccountId: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.EligibleOfferListResult>;
    listByBillingAccountId(billingAccountId: string, callback: ServiceCallback<models.EligibleOfferListResult>): void;
    listByBillingAccountId(billingAccountId: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EligibleOfferListResult>): void;


    /**
     * Get the eligible offer by id.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {string} eligibleOfferId Eligible Offer Id.
     *
     * @param {string} projectId Project Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the billingProfiles.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EligibleOffer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByIdWithHttpOperationResponse(billingAccountId: string, eligibleOfferId: string, projectId: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EligibleOffer>>;

    /**
     * Get the eligible offer by id.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {string} eligibleOfferId Eligible Offer Id.
     *
     * @param {string} projectId Project Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the billingProfiles.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EligibleOffer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EligibleOffer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EligibleOffer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getById(billingAccountId: string, eligibleOfferId: string, projectId: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.EligibleOffer>;
    getById(billingAccountId: string, eligibleOfferId: string, projectId: string, callback: ServiceCallback<models.EligibleOffer>): void;
    getById(billingAccountId: string, eligibleOfferId: string, projectId: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EligibleOffer>): void;
}

/**
 * @class
 * Departments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BillingManagementClient.
 */
export interface Departments {


    /**
     * Lists all departments for a user which he has access to.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the
     * enrollmentAccounts.
     *
     * @param {string} [options.filter] The filter supports 'eq', 'lt', 'gt', 'le',
     * 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag
     * filter is a key value pair string where key and value is separated by a
     * colon (:).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DepartmentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByBillingAccountIdWithHttpOperationResponse(billingAccountId: string, options?: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DepartmentListResult>>;

    /**
     * Lists all departments for a user which he has access to.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the
     * enrollmentAccounts.
     *
     * @param {string} [options.filter] The filter supports 'eq', 'lt', 'gt', 'le',
     * 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag
     * filter is a key value pair string where key and value is separated by a
     * colon (:).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DepartmentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DepartmentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DepartmentListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByBillingAccountId(billingAccountId: string, options?: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DepartmentListResult>;
    listByBillingAccountId(billingAccountId: string, callback: ServiceCallback<models.DepartmentListResult>): void;
    listByBillingAccountId(billingAccountId: string, options: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DepartmentListResult>): void;


    /**
     * Get the department by id.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {string} departmentId Department Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the
     * enrollmentAccounts.
     *
     * @param {string} [options.filter] The filter supports 'eq', 'lt', 'gt', 'le',
     * 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag
     * filter is a key value pair string where key and value is separated by a
     * colon (:).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Department>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(billingAccountId: string, departmentId: string, options?: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Department>>;

    /**
     * Get the department by id.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {string} departmentId Department Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the
     * enrollmentAccounts.
     *
     * @param {string} [options.filter] The filter supports 'eq', 'lt', 'gt', 'le',
     * 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag
     * filter is a key value pair string where key and value is separated by a
     * colon (:).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Department} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Department} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Department} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(billingAccountId: string, departmentId: string, options?: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Department>;
    get(billingAccountId: string, departmentId: string, callback: ServiceCallback<models.Department>): void;
    get(billingAccountId: string, departmentId: string, options: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Department>): void;
}

/**
 * @class
 * EnrollmentAccounts
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BillingManagementClient.
 */
export interface EnrollmentAccounts {


    /**
     * Lists all Enrollment Accounts for a user which he has access to.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the department.
     *
     * @param {string} [options.filter] The filter supports 'eq', 'lt', 'gt', 'le',
     * 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag
     * filter is a key value pair string where key and value is separated by a
     * colon (:).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EnrollmentAccountListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByBillingAccountIdWithHttpOperationResponse(billingAccountId: string, options?: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EnrollmentAccountListResult>>;

    /**
     * Lists all Enrollment Accounts for a user which he has access to.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the department.
     *
     * @param {string} [options.filter] The filter supports 'eq', 'lt', 'gt', 'le',
     * 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag
     * filter is a key value pair string where key and value is separated by a
     * colon (:).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EnrollmentAccountListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EnrollmentAccountListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EnrollmentAccountListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByBillingAccountId(billingAccountId: string, options?: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.EnrollmentAccountListResult>;
    listByBillingAccountId(billingAccountId: string, callback: ServiceCallback<models.EnrollmentAccountListResult>): void;
    listByBillingAccountId(billingAccountId: string, options: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EnrollmentAccountListResult>): void;


    /**
     * Get the enrollment account by id.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {string} enrollmentAccountId Enrollment Account Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the Department.
     *
     * @param {string} [options.filter] The filter supports 'eq', 'lt', 'gt', 'le',
     * 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag
     * filter is a key value pair string where key and value is separated by a
     * colon (:).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EnrollmentAccount>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByEnrollmentAccountAccountIdWithHttpOperationResponse(billingAccountId: string, enrollmentAccountId: string, options?: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EnrollmentAccount>>;

    /**
     * Get the enrollment account by id.
     *
     * @param {string} billingAccountId billing Account Id.
     *
     * @param {string} enrollmentAccountId Enrollment Account Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] May be used to expand the Department.
     *
     * @param {string} [options.filter] The filter supports 'eq', 'lt', 'gt', 'le',
     * 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag
     * filter is a key value pair string where key and value is separated by a
     * colon (:).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EnrollmentAccount} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EnrollmentAccount} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EnrollmentAccount} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByEnrollmentAccountAccountId(billingAccountId: string, enrollmentAccountId: string, options?: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.EnrollmentAccount>;
    getByEnrollmentAccountAccountId(billingAccountId: string, enrollmentAccountId: string, callback: ServiceCallback<models.EnrollmentAccount>): void;
    getByEnrollmentAccountAccountId(billingAccountId: string, enrollmentAccountId: string, options: { expand? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EnrollmentAccount>): void;
}

/**
 * @class
 * OperationStatusOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BillingManagementClient.
 */
export interface OperationStatusOperations {


    /**
     * Get the status of pending Microsoft.Billing API operation.
     *
     * @param {string} operationId Operation Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationStatus>>;

    /**
     * Get the status of pending Microsoft.Billing API operation.
     *
     * @param {string} operationId Operation Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationStatus} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationStatus>;
    get(operationId: string, callback: ServiceCallback<models.OperationStatus>): void;
    get(operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationStatus>): void;
}
