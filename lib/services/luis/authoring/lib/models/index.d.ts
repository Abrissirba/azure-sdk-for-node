/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as moment from "moment";


/**
 * @class
 * Initializes a new instance of the EntityLabelObject class.
 * @constructor
 * Defines the entity type and position of the extracted entity within the
 * example.
 *
 * @member {string} entityName The entity type.
 * @member {number} startCharIndex The index within the utterance where the
 * extracted entity starts.
 * @member {number} endCharIndex The index within the utterance where the
 * extracted entity ends.
 */
export interface EntityLabelObject {
  entityName: string;
  startCharIndex: number;
  endCharIndex: number;
}

/**
 * @class
 * Initializes a new instance of the ApplicationCreateObject class.
 * @constructor
 * Properties for creating a new LUIS Application
 *
 * @member {string} culture The culture for the new application. It is the
 * language that your app understands and speaks. E.g.: "en-us". Note: the
 * culture cannot be changed after the app is created.
 * @member {string} [domain] The domain for the new application. Optional.
 * E.g.: Comics.
 * @member {string} [description] Description of the new application. Optional.
 * @member {string} [initialVersionId] The initial version ID. Optional.
 * Default value is: "0.1"
 * @member {string} [usageScenario] Defines the scenario for the new
 * application. Optional. E.g.: IoT.
 * @member {string} name The name for the new application.
 */
export interface ApplicationCreateObject {
  culture: string;
  domain?: string;
  description?: string;
  initialVersionId?: string;
  usageScenario?: string;
  name: string;
}

/**
 * @class
 * Initializes a new instance of the PrebuiltDomainCreateBaseObject class.
 * @constructor
 * A model object containing the name of the custom prebuilt entity and the
 * name of the domain to which this model belongs.
 *
 * @member {string} [domainName] The domain name.
 */
export interface PrebuiltDomainCreateBaseObject {
  domainName?: string;
}

/**
 * @class
 * Initializes a new instance of the PrebuiltDomainCreateObject class.
 * @constructor
 * A prebuilt domain create object containing the name and culture of the
 * domain.
 *
 * @member {string} [domainName] The domain name.
 * @member {string} [culture] The culture of the new domain.
 */
export interface PrebuiltDomainCreateObject {
  domainName?: string;
  culture?: string;
}

/**
 * @class
 * Initializes a new instance of the PrebuiltDomainModelCreateObject class.
 * @constructor
 * A model object containing the name of the custom prebuilt intent or entity
 * and the name of the domain to which this model belongs.
 *
 * @member {string} [domainName] The domain name.
 * @member {string} [modelName] The intent name or entity name.
 */
export interface PrebuiltDomainModelCreateObject {
  domainName?: string;
  modelName?: string;
}

/**
 * @class
 * Initializes a new instance of the HierarchicalEntityModel class.
 * @constructor
 * A Hierarchical Entity Extractor.
 *
 * @member {array} [children] Child entities.
 * @member {string} [name] Entity name.
 */
export interface HierarchicalEntityModel {
  children?: string[];
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the CompositeEntityModel class.
 * @constructor
 * A composite entity.
 *
 * @member {array} [children] Child entities.
 * @member {string} [name] Entity name.
 */
export interface CompositeEntityModel {
  children?: string[];
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the JSONEntity class.
 * @constructor
 * Exported Model - Extracted Entity from utterance.
 *
 * @member {number} startPos The index within the utterance where the extracted
 * entity starts.
 * @member {number} endPos The index within the utterance where the extracted
 * entity ends.
 * @member {string} entity The entity name.
 */
export interface JSONEntity {
  startPos: number;
  endPos: number;
  entity: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationSettingUpdateObject class.
 * @constructor
 * Object model for updating an application's settings.
 *
 * @member {boolean} [publicProperty] Setting your application as public allows
 * other people to use your application's endpoint using their own keys.
 */
export interface ApplicationSettingUpdateObject {
  publicProperty?: boolean;
}

/**
 * @class
 * Initializes a new instance of the PublishSettingUpdateObject class.
 * @constructor
 * Object model for updating an application's publish settings.
 *
 * @member {boolean} [sentimentAnalysis] Setting sentiment analysis as true
 * returns the Sentiment of the input utterance along with the resopnse
 * @member {boolean} [speech] Setting speech as public enables speech priming
 * in your app
 * @member {boolean} [spellChecker] Setting spell checker as public enables
 * spell checking the input utterance.
 */
export interface PublishSettingUpdateObject {
  sentimentAnalysis?: boolean;
  speech?: boolean;
  spellChecker?: boolean;
}

/**
 * @class
 * Initializes a new instance of the ExampleLabelObject class.
 * @constructor
 * A labeled example.
 *
 * @member {string} [text] The sample's utterance.
 * @member {array} [entityLabels] The idenfied entities within the utterance.
 * @member {string} [intentName] The idenfitied intent representing the
 * utterance.
 */
export interface ExampleLabelObject {
  text?: string;
  entityLabels?: EntityLabelObject[];
  intentName?: string;
}

/**
 * @class
 * Initializes a new instance of the PhraselistCreateObject class.
 * @constructor
 * Object model for creating a phraselist model.
 *
 * @member {string} [phrases] List of comma-separated phrases that represent
 * the Phraselist.
 * @member {string} [name] The Phraselist name.
 * @member {boolean} [isExchangeable] An exchangeable phrase list feature are
 * serves as single feature to the LUIS underlying training algorithm. It is
 * used as a lexicon lookup feature where its value is 1 if the lexicon
 * contains a given word or 0 if it doesnâ€™t. Think of an exchangeable as a
 * synonyms list. A non-exchangeable phrase list feature has all the phrases in
 * the list serve as separate features to the underlying training algorithm.
 * So, if you your phrase list feature contains 5 phrases, they will be mapped
 * to 5 separate features. You can think of the non-exchangeable phrase list
 * feature as an additional bag of words that you are willing to add to LUIS
 * existing vocabulary features. Think of a non-exchangeable as set of
 * different words. Default value is true. Default value: true .
 */
export interface PhraselistCreateObject {
  phrases?: string;
  name?: string;
  isExchangeable?: boolean;
}

/**
 * @class
 * Initializes a new instance of the SubClosedList class.
 * @constructor
 * Sublist of items for a Closed list.
 *
 * @member {string} [canonicalForm] The standard form that the list represents.
 * @member {array} [list] List of synonym words.
 */
export interface SubClosedList {
  canonicalForm?: string;
  list?: string[];
}

/**
 * @class
 * Initializes a new instance of the SubClosedListResponse class.
 * @constructor
 * Sublist of items for a Closed list.
 *
 * @member {number} [id] The sublist ID
 */
export interface SubClosedListResponse extends SubClosedList {
  id?: number;
}

/**
 * @class
 * Initializes a new instance of the ApplicationUpdateObject class.
 * @constructor
 * Object model for updating the name or description of an application.
 *
 * @member {string} [name] The application's new name.
 * @member {string} [description] The application's new description.
 */
export interface ApplicationUpdateObject {
  name?: string;
  description?: string;
}

/**
 * @class
 * Initializes a new instance of the JSONRegexFeature class.
 * @constructor
 * Exported Model - A Pattern feature.
 *
 * @member {string} [pattern] The Regular Expression to match.
 * @member {boolean} [activated] Indicates if the Pattern feature is enabled.
 * @member {string} [name] Name of the feature.
 */
export interface JSONRegexFeature {
  pattern?: string;
  activated?: boolean;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the PatternUpdateObject class.
 * @constructor
 * Object model for updating an existing Pattern feature.
 *
 * @member {string} [pattern] The Regular Expression to match.
 * @member {string} [name] Name of the feature.
 * @member {boolean} [isActive] Indicates if the Pattern feature is enabled.
 * Default value: true .
 */
export interface PatternUpdateObject {
  pattern?: string;
  name?: string;
  isActive?: boolean;
}

/**
 * @class
 * Initializes a new instance of the ClosedList class.
 * @constructor
 * Exported Model - A Closed List.
 *
 * @member {string} [name] Name of the closed list feature.
 * @member {array} [subLists] Sublists for the feature.
 * @member {array} [roles]
 */
export interface ClosedList {
  name?: string;
  subLists?: SubClosedList[];
  roles?: string[];
}

/**
 * @class
 * Initializes a new instance of the WordListObject class.
 * @constructor
 * Sublist of items for a Closed list.
 *
 * @member {string} [canonicalForm] The standard form that the list represents.
 * @member {array} [list] List of synonym words.
 */
export interface WordListObject {
  canonicalForm?: string;
  list?: string[];
}

/**
 * @class
 * Initializes a new instance of the ClosedListModelPatchObject class.
 * @constructor
 * Object model for adding a batch of sublists to an existing closedlist.
 *
 * @member {array} [subLists] Sublists to add.
 */
export interface ClosedListModelPatchObject {
  subLists?: WordListObject[];
}

/**
 * @class
 * Initializes a new instance of the JSONModelFeature class.
 * @constructor
 * Exported Model - Phraselist Model Feature.
 *
 * @member {boolean} [activated] Indicates if the feature is enabled.
 * @member {string} [name] The Phraselist name.
 * @member {string} [words] List of comma-separated phrases that represent the
 * Phraselist.
 * @member {boolean} [mode] An exchangeable phrase list feature are serves as
 * single feature to the LUIS underlying training algorithm. It is used as a
 * lexicon lookup feature where its value is 1 if the lexicon contains a given
 * word or 0 if it doesnâ€™t. Think of an exchangeable as a synonyms list. A
 * non-exchangeable phrase list feature has all the phrases in the list serve
 * as separate features to the underlying training algorithm. So, if you your
 * phrase list feature contains 5 phrases, they will be mapped to 5 separate
 * features. You can think of the non-exchangeable phrase list feature as an
 * additional bag of words that you are willing to add to LUIS existing
 * vocabulary features. Think of a non-exchangeable as set of different words.
 * Default value is true.
 */
export interface JSONModelFeature {
  activated?: boolean;
  name?: string;
  words?: string;
  mode?: boolean;
}

/**
 * @class
 * Initializes a new instance of the ModelCreateObject class.
 * @constructor
 * Object model for creating a new entity extractor.
 *
 * @member {string} [name] Name of the new entity extractor.
 */
export interface ModelCreateObject {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the PatternCreateObject class.
 * @constructor
 * Object model for creating a Pattern feature.
 *
 * @member {string} [pattern] The Regular Expression to match.
 * @member {string} [name] Name of the feature.
 */
export interface PatternCreateObject {
  pattern?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the WordListBaseUpdateObject class.
 * @constructor
 * Object model for updating one of the closed list's sublists.
 *
 * @member {string} [canonicalForm] The standard form that the list represents.
 * @member {array} [list] List of synonym words.
 */
export interface WordListBaseUpdateObject {
  canonicalForm?: string;
  list?: string[];
}

/**
 * @class
 * Initializes a new instance of the JSONUtterance class.
 * @constructor
 * Exported Model - Utterance that was used to train the model.
 *
 * @member {string} [text] The utterance.
 * @member {string} [intent] The matched intent.
 * @member {array} [entities] The matched entities.
 */
export interface JSONUtterance {
  text?: string;
  intent?: string;
  entities?: JSONEntity[];
}

/**
 * @class
 * Initializes a new instance of the ModelUpdateObject class.
 * @constructor
 * Object model for updating an intent classifier.
 *
 * @member {string} [name] The entity's new name.
 */
export interface ModelUpdateObject {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the ClosedListModelUpdateObject class.
 * @constructor
 * Object model for updating a closed list.
 *
 * @member {array} [subLists] The new sublists for the feature.
 * @member {string} [name] The new name of the closed list feature.
 */
export interface ClosedListModelUpdateObject {
  subLists?: WordListObject[];
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the ClosedListModelCreateObject class.
 * @constructor
 * Object model for creating a closed list.
 *
 * @member {array} [subLists] Sublists for the feature.
 * @member {string} [name] Name of the closed list feature.
 */
export interface ClosedListModelCreateObject {
  subLists?: WordListObject[];
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the VersionInfo class.
 * @constructor
 * Object model of an application version.
 *
 * @member {string} version The version ID. E.g.: "0.1"
 * @member {date} [createdDateTime] The version's creation timestamp.
 * @member {date} [lastModifiedDateTime] Timestamp of the last update.
 * @member {date} [lastTrainedDateTime] Timestamp of the last time the model
 * was trained.
 * @member {date} [lastPublishedDateTime] Timestamp when was last published.
 * @member {string} [endpointUrl] The Runtime endpoint URL for this model
 * version.
 * @member {object} [assignedEndpointKey] The endpoint key.
 * @member {object} [externalApiKeys] External keys.
 * @member {number} [intentsCount] Number of intents in this model.
 * @member {number} [entitiesCount] Number of entities in this model.
 * @member {number} [endpointHitsCount] Number of calls made to this endpoint.
 * @member {string} trainingStatus The current training status. Possible values
 * include: 'NeedsTraining', 'InProgress', 'Trained'
 */
export interface VersionInfo {
  version: string;
  createdDateTime?: Date;
  lastModifiedDateTime?: Date;
  lastTrainedDateTime?: Date;
  lastPublishedDateTime?: Date;
  endpointUrl?: string;
  assignedEndpointKey?: { [propertyName: string]: string };
  externalApiKeys?: any;
  intentsCount?: number;
  entitiesCount?: number;
  endpointHitsCount?: number;
  trainingStatus: string;
}

/**
 * @class
 * Initializes a new instance of the TaskUpdateObject class.
 * @constructor
 * Object model for cloning an application's version.
 *
 * @member {string} [version] The new version for the cloned model.
 */
export interface TaskUpdateObject {
  version?: string;
}

/**
 * @class
 * Initializes a new instance of the PhraselistUpdateObject class.
 * @constructor
 * Object model for updating a Phraselist.
 *
 * @member {string} [phrases] List of comma-separated phrases that represent
 * the Phraselist.
 * @member {string} [name] The Phraselist name.
 * @member {boolean} [isActive] Indicates if the Phraselist is enabled. Default
 * value: true .
 * @member {boolean} [isExchangeable] An exchangeable phrase list feature are
 * serves as single feature to the LUIS underlying training algorithm. It is
 * used as a lexicon lookup feature where its value is 1 if the lexicon
 * contains a given word or 0 if it doesnâ€™t. Think of an exchangeable as a
 * synonyms list. A non-exchangeable phrase list feature has all the phrases in
 * the list serve as separate features to the underlying training algorithm.
 * So, if you your phrase list feature contains 5 phrases, they will be mapped
 * to 5 separate features. You can think of the non-exchangeable phrase list
 * feature as an additional bag of words that you are willing to add to LUIS
 * existing vocabulary features. Think of a non-exchangeable as set of
 * different words. Default value is true. Default value: true .
 */
export interface PhraselistUpdateObject {
  phrases?: string;
  name?: string;
  isActive?: boolean;
  isExchangeable?: boolean;
}

/**
 * @class
 * Initializes a new instance of the PrebuiltDomainObject class.
 * @constructor
 * @member {string} [domainName]
 * @member {string} [modelName]
 */
export interface PrebuiltDomainObject {
  domainName?: string;
  modelName?: string;
}

/**
 * @class
 * Initializes a new instance of the HierarchicalModel class.
 * @constructor
 * @member {string} [name]
 * @member {array} [children]
 * @member {object} [inherits]
 * @member {string} [inherits.domainName]
 * @member {string} [inherits.modelName]
 * @member {array} [roles]
 */
export interface HierarchicalModel {
  name?: string;
  children?: string[];
  inherits?: PrebuiltDomainObject;
  roles?: string[];
}

/**
 * @class
 * Initializes a new instance of the ApplicationPublishObject class.
 * @constructor
 * Object model for publishing a specific application version.
 *
 * @member {string} [versionId] The version ID to publish.
 * @member {boolean} [isStaging] Indicates if the staging slot should be used,
 * instead of the Production one. Default value: false .
 */
export interface ApplicationPublishObject {
  versionId?: string;
  isStaging?: boolean;
}

/**
 * @class
 * Initializes a new instance of the PatternAny class.
 * @constructor
 * Pattern.Any Entity Extractor.
 *
 * @member {string} [name]
 * @member {array} [explicitList]
 * @member {array} [roles]
 */
export interface PatternAny {
  name?: string;
  explicitList?: string[];
  roles?: string[];
}

/**
 * @class
 * Initializes a new instance of the RegexEntity class.
 * @constructor
 * Regular Expression Entity Extractor.
 *
 * @member {string} [name]
 * @member {string} [regexPattern]
 * @member {array} [roles]
 */
export interface RegexEntity {
  name?: string;
  regexPattern?: string;
  roles?: string[];
}

/**
 * @class
 * Initializes a new instance of the PrebuiltEntity class.
 * @constructor
 * Prebuilt Entity Extractor.
 *
 * @member {string} [name]
 * @member {array} [roles]
 */
export interface PrebuiltEntity {
  name?: string;
  roles?: string[];
}

/**
 * @class
 * Initializes a new instance of the PatternRule class.
 * @constructor
 * Pattern
 *
 * @member {string} [pattern] The pattern text.
 * @member {string} [intent] The intent's name where the pattern belongs to.
 */
export interface PatternRule {
  pattern?: string;
  intent?: string;
}

/**
 * @class
 * Initializes a new instance of the LuisApp class.
 * @constructor
 * Exported Model - An exported LUIS Application.
 *
 * @member {string} [name] The name of the application.
 * @member {string} [versionId] The version ID of the application that was
 * exported.
 * @member {string} [desc] The description of the application.
 * @member {string} [culture] The culture of the application. E.g.: en-us.
 * @member {array} [intents] List of intents.
 * @member {array} [entities] List of entities.
 * @member {array} [closedLists] List of closed lists.
 * @member {array} [composites] List of composite entities.
 * @member {array} [patternAnyEntities] List of Pattern.Any entities.
 * @member {array} [regexEntities] List of regular expression entities.
 * @member {array} [prebuiltEntities] List of prebuilt entities.
 * @member {array} [regexFeatures] List of pattern features.
 * @member {array} [modelFeatures] List of model features.
 * @member {array} [patterns] List of patterns.
 * @member {array} [utterances] List of sample utterances.
 */
export interface LuisApp {
  name?: string;
  versionId?: string;
  desc?: string;
  culture?: string;
  intents?: HierarchicalModel[];
  entities?: HierarchicalModel[];
  closedLists?: ClosedList[];
  composites?: HierarchicalModel[];
  patternAnyEntities?: PatternAny[];
  regexEntities?: RegexEntity[];
  prebuiltEntities?: PrebuiltEntity[];
  regexFeatures?: JSONRegexFeature[];
  modelFeatures?: JSONModelFeature[];
  patterns?: PatternRule[];
  utterances?: JSONUtterance[];
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @class
 * Initializes a new instance of the EntityLabel class.
 * @constructor
 * Defines the entity type and position of the extracted entity within the
 * example.
 *
 * @member {string} entityName The entity type.
 * @member {number} startTokenIndex The index within the utterance where the
 * extracted entity starts.
 * @member {number} endTokenIndex The index within the utterance where the
 * extracted entity ends.
 */
export interface EntityLabel {
  entityName: string;
  startTokenIndex: number;
  endTokenIndex: number;
}

/**
 * @class
 * Initializes a new instance of the IntentPrediction class.
 * @constructor
 * A suggested intent.
 *
 * @member {string} [name] The intent's name
 * @member {number} [score] The intent's score, based on the prediction model.
 */
export interface IntentPrediction {
  name?: string;
  score?: number;
}

/**
 * @class
 * Initializes a new instance of the EntityPrediction class.
 * @constructor
 * A suggested entity.
 *
 * @member {string} entityName The entity's name
 * @member {number} startTokenIndex The index within the utterance where the
 * extracted entity starts.
 * @member {number} endTokenIndex The index within the utterance where the
 * extracted entity ends.
 * @member {string} phrase The actual token(s) that comprise the entity.
 */
export interface EntityPrediction {
  entityName: string;
  startTokenIndex: number;
  endTokenIndex: number;
  phrase: string;
}

/**
 * @class
 * Initializes a new instance of the LabeledUtterance class.
 * @constructor
 * A prediction and label pair of an example.
 *
 * @member {number} [id] ID of Labeled Utterance.
 * @member {string} [text] The utterance. E.g.: what's the weather like in
 * seattle?
 * @member {array} [tokenizedText] The utterance tokenized.
 * @member {string} [intentLabel] The intent matching the example.
 * @member {array} [entityLabels] The entities matching the example.
 * @member {array} [intentPredictions] List of suggested intents.
 * @member {array} [entityPredictions] List of suggested entities.
 */
export interface LabeledUtterance {
  id?: number;
  text?: string;
  tokenizedText?: string[];
  intentLabel?: string;
  entityLabels?: EntityLabel[];
  intentPredictions?: IntentPrediction[];
  entityPredictions?: EntityPrediction[];
}

/**
 * @class
 * Initializes a new instance of the IntentsSuggestionExample class.
 * @constructor
 * Predicted/suggested intent.
 *
 * @member {string} [text] The utterance. E.g.: what's the weather like in
 * seattle?
 * @member {array} [tokenizedText] The utterance tokenized.
 * @member {array} [intentPredictions] Predicted/suggested intents.
 * @member {array} [entityPredictions] Predicted/suggested entities.
 */
export interface IntentsSuggestionExample {
  text?: string;
  tokenizedText?: string[];
  intentPredictions?: IntentPrediction[];
  entityPredictions?: EntityPrediction[];
}

/**
 * @class
 * Initializes a new instance of the EntitiesSuggestionExample class.
 * @constructor
 * Predicted/suggested entity.
 *
 * @member {string} [text] The utterance. E.g.: what's the weather like in
 * seattle?
 * @member {array} [tokenizedText] The utterance tokenized.
 * @member {array} [intentPredictions] Predicted/suggested intents.
 * @member {array} [entityPredictions] Predicted/suggested entities.
 */
export interface EntitiesSuggestionExample {
  text?: string;
  tokenizedText?: string[];
  intentPredictions?: IntentPrediction[];
  entityPredictions?: EntityPrediction[];
}

/**
 * @class
 * Initializes a new instance of the PersonalAssistantsResponse class.
 * @constructor
 * Response containing user's endpoint keys and the endpoint URLs of the
 * prebuilt Cortana applications.
 *
 * @member {array} [endpointKeys]
 * @member {object} [endpointUrls]
 */
export interface PersonalAssistantsResponse {
  endpointKeys?: string[];
  endpointUrls?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the ModelInfo class.
 * @constructor
 * Base type used in entity types.
 *
 * @member {uuid} id The ID of the Entity Model.
 * @member {string} [name] Name of the Entity Model.
 * @member {number} [typeId] The type ID of the Entity Model.
 * @member {string} readableType Possible values include: 'Entity Extractor',
 * 'Hierarchical Entity Extractor', 'Hierarchical Child Entity Extractor',
 * 'Composite Entity Extractor', 'Closed List Entity Extractor', 'Prebuilt
 * Entity Extractor', 'Intent Classifier', 'Pattern.Any Entity Extractor',
 * 'Regex Entity Extractor'
 */
export interface ModelInfo {
  id: string;
  name?: string;
  typeId?: number;
  readableType: string;
}

/**
 * @class
 * Initializes a new instance of the EntityRole class.
 * @constructor
 * Entity extractor role
 *
 * @member {uuid} [id] The entity role ID.
 * @member {string} [name] The entity role name.
 */
export interface EntityRole {
  id?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the ChildEntity class.
 * @constructor
 * The base child entity type.
 *
 * @member {uuid} id The ID (GUID) belonging to a child entity.
 * @member {string} [name] The name of a child entity.
 */
export interface ChildEntity {
  id: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the ExplicitListItem class.
 * @constructor
 * Explicit list item
 *
 * @member {number} [id] The explicit list item ID.
 * @member {string} [explicitListItem] The explicit list item value.
 */
export interface ExplicitListItem {
  id?: number;
  explicitListItem?: string;
}

/**
 * @class
 * Initializes a new instance of the ModelInfoResponse class.
 * @constructor
 * An application model info.
 *
 * @member {uuid} id The ID of the Entity Model.
 * @member {string} [name] Name of the Entity Model.
 * @member {number} [typeId] The type ID of the Entity Model.
 * @member {string} readableType Possible values include: 'Entity Extractor',
 * 'Hierarchical Entity Extractor', 'Hierarchical Child Entity Extractor',
 * 'Composite Entity Extractor', 'Closed List Entity Extractor', 'Prebuilt
 * Entity Extractor', 'Intent Classifier', 'Pattern.Any Entity Extractor',
 * 'Regex Entity Extractor'
 * @member {array} [roles]
 * @member {array} [children] List of child entities.
 * @member {array} [subLists] List of sub-lists.
 * @member {string} [customPrebuiltDomainName] The domain name.
 * @member {string} [customPrebuiltModelName] The intent name or entity name.
 * @member {string} [regexPattern] The Regex entity pattern.
 * @member {array} [explicitList]
 */
export interface ModelInfoResponse {
  id: string;
  name?: string;
  typeId?: number;
  readableType: string;
  roles?: EntityRole[];
  children?: ChildEntity[];
  subLists?: SubClosedListResponse[];
  customPrebuiltDomainName?: string;
  customPrebuiltModelName?: string;
  regexPattern?: string;
  explicitList?: ExplicitListItem[];
}

/**
 * @class
 * Initializes a new instance of the EntityModelInfo class.
 * @constructor
 * An Entity Extractor model info.
 *
 * @member {array} [roles]
 */
export interface EntityModelInfo extends ModelInfo {
  roles?: EntityRole[];
}

/**
 * @class
 * Initializes a new instance of the HierarchicalEntityExtractor class.
 * @constructor
 * Hierarchical Entity Extractor.
 *
 * @member {uuid} id The ID of the Entity Model.
 * @member {string} [name] Name of the Entity Model.
 * @member {number} [typeId] The type ID of the Entity Model.
 * @member {string} readableType Possible values include: 'Entity Extractor',
 * 'Hierarchical Entity Extractor', 'Hierarchical Child Entity Extractor',
 * 'Composite Entity Extractor', 'Closed List Entity Extractor', 'Prebuilt
 * Entity Extractor', 'Intent Classifier', 'Pattern.Any Entity Extractor',
 * 'Regex Entity Extractor'
 * @member {array} [roles]
 * @member {array} [children] List of child entities.
 */
export interface HierarchicalEntityExtractor {
  id: string;
  name?: string;
  typeId?: number;
  readableType: string;
  roles?: EntityRole[];
  children?: ChildEntity[];
}

/**
 * @class
 * Initializes a new instance of the CompositeEntityExtractor class.
 * @constructor
 * A Composite Entity Extractor.
 *
 * @member {uuid} id The ID of the Entity Model.
 * @member {string} [name] Name of the Entity Model.
 * @member {number} [typeId] The type ID of the Entity Model.
 * @member {string} readableType Possible values include: 'Entity Extractor',
 * 'Hierarchical Entity Extractor', 'Hierarchical Child Entity Extractor',
 * 'Composite Entity Extractor', 'Closed List Entity Extractor', 'Prebuilt
 * Entity Extractor', 'Intent Classifier', 'Pattern.Any Entity Extractor',
 * 'Regex Entity Extractor'
 * @member {array} [roles]
 * @member {array} [children] List of child entities.
 */
export interface CompositeEntityExtractor {
  id: string;
  name?: string;
  typeId?: number;
  readableType: string;
  roles?: EntityRole[];
  children?: ChildEntity[];
}

/**
 * @class
 * Initializes a new instance of the ClosedListEntityExtractor class.
 * @constructor
 * Closed List Entity Extractor.
 *
 * @member {uuid} id The ID of the Entity Model.
 * @member {string} [name] Name of the Entity Model.
 * @member {number} [typeId] The type ID of the Entity Model.
 * @member {string} readableType Possible values include: 'Entity Extractor',
 * 'Hierarchical Entity Extractor', 'Hierarchical Child Entity Extractor',
 * 'Composite Entity Extractor', 'Closed List Entity Extractor', 'Prebuilt
 * Entity Extractor', 'Intent Classifier', 'Pattern.Any Entity Extractor',
 * 'Regex Entity Extractor'
 * @member {array} [roles]
 * @member {array} [subLists] List of sub-lists.
 */
export interface ClosedListEntityExtractor {
  id: string;
  name?: string;
  typeId?: number;
  readableType: string;
  roles?: EntityRole[];
  subLists?: SubClosedListResponse[];
}

/**
 * @class
 * Initializes a new instance of the PrebuiltEntityExtractor class.
 * @constructor
 * Prebuilt Entity Extractor.
 *
 * @member {uuid} id The ID of the Entity Model.
 * @member {string} [name] Name of the Entity Model.
 * @member {number} [typeId] The type ID of the Entity Model.
 * @member {string} readableType Possible values include: 'Entity Extractor',
 * 'Hierarchical Entity Extractor', 'Hierarchical Child Entity Extractor',
 * 'Composite Entity Extractor', 'Closed List Entity Extractor', 'Prebuilt
 * Entity Extractor', 'Intent Classifier', 'Pattern.Any Entity Extractor',
 * 'Regex Entity Extractor'
 * @member {array} [roles]
 */
export interface PrebuiltEntityExtractor {
  id: string;
  name?: string;
  typeId?: number;
  readableType: string;
  roles?: EntityRole[];
}

/**
 * @class
 * Initializes a new instance of the HierarchicalChildEntity class.
 * @constructor
 * A Hierarchical Child Entity.
 *
 * @member {number} [typeId] The type ID of the Entity Model.
 * @member {string} [readableType] Possible values include: 'Entity Extractor',
 * 'Hierarchical Entity Extractor', 'Hierarchical Child Entity Extractor',
 * 'Composite Entity Extractor', 'Closed List Entity Extractor', 'Prebuilt
 * Entity Extractor', 'Intent Classifier', 'Pattern.Any Entity Extractor',
 * 'Regex Entity Extractor'
 */
export interface HierarchicalChildEntity extends ChildEntity {
  typeId?: number;
  readableType?: string;
}

/**
 * @class
 * Initializes a new instance of the CustomPrebuiltModel class.
 * @constructor
 * A Custom Prebuilt model.
 *
 * @member {uuid} id The ID of the Entity Model.
 * @member {string} [name] Name of the Entity Model.
 * @member {number} [typeId] The type ID of the Entity Model.
 * @member {string} readableType Possible values include: 'Entity Extractor',
 * 'Hierarchical Entity Extractor', 'Hierarchical Child Entity Extractor',
 * 'Composite Entity Extractor', 'Closed List Entity Extractor', 'Prebuilt
 * Entity Extractor', 'Intent Classifier', 'Pattern.Any Entity Extractor',
 * 'Regex Entity Extractor'
 * @member {string} [customPrebuiltDomainName] The domain name.
 * @member {string} [customPrebuiltModelName] The intent name or entity name.
 * @member {array} [roles]
 */
export interface CustomPrebuiltModel {
  id: string;
  name?: string;
  typeId?: number;
  readableType: string;
  customPrebuiltDomainName?: string;
  customPrebuiltModelName?: string;
  roles?: EntityRole[];
}

/**
 * @class
 * Initializes a new instance of the IntentClassifier class.
 * @constructor
 * Intent Classifier.
 *
 * @member {string} [customPrebuiltDomainName] The domain name.
 * @member {string} [customPrebuiltModelName] The intent name or entity name.
 */
export interface IntentClassifier extends ModelInfo {
  customPrebuiltDomainName?: string;
  customPrebuiltModelName?: string;
}

/**
 * @class
 * Initializes a new instance of the EntityExtractor class.
 * @constructor
 * Entity Extractor.
 *
 * @member {uuid} id The ID of the Entity Model.
 * @member {string} [name] Name of the Entity Model.
 * @member {number} [typeId] The type ID of the Entity Model.
 * @member {string} readableType Possible values include: 'Entity Extractor',
 * 'Hierarchical Entity Extractor', 'Hierarchical Child Entity Extractor',
 * 'Composite Entity Extractor', 'Closed List Entity Extractor', 'Prebuilt
 * Entity Extractor', 'Intent Classifier', 'Pattern.Any Entity Extractor',
 * 'Regex Entity Extractor'
 * @member {array} [roles]
 * @member {string} [customPrebuiltDomainName] The domain name.
 * @member {string} [customPrebuiltModelName] The intent name or entity name.
 */
export interface EntityExtractor {
  id: string;
  name?: string;
  typeId?: number;
  readableType: string;
  roles?: EntityRole[];
  customPrebuiltDomainName?: string;
  customPrebuiltModelName?: string;
}

/**
 * @class
 * Initializes a new instance of the FeatureInfoObject class.
 * @constructor
 * The base class Features-related response objects inherit from.
 *
 * @member {number} [id] A six-digit ID used for Features.
 * @member {string} [name] The name of the Feature.
 * @member {boolean} [isActive] Indicates if the feature is enabled.
 */
export interface FeatureInfoObject {
  id?: number;
  name?: string;
  isActive?: boolean;
}

/**
 * @class
 * Initializes a new instance of the PhraseListFeatureInfo class.
 * @constructor
 * Phraselist Feature.
 *
 * @member {string} [phrases] A list of comma-separated values.
 * @member {boolean} [isExchangeable] An exchangeable phrase list feature are
 * serves as single feature to the LUIS underlying training algorithm. It is
 * used as a lexicon lookup feature where its value is 1 if the lexicon
 * contains a given word or 0 if it doesnâ€™t. Think of an exchangeable as a
 * synonyms list. A non-exchangeable phrase list feature has all the phrases in
 * the list serve as separate features to the underlying training algorithm.
 * So, if you your phrase list feature contains 5 phrases, they will be mapped
 * to 5 separate features. You can think of the non-exchangeable phrase list
 * feature as an additional bag of words that you are willing to add to LUIS
 * existing vocabulary features. Think of a non-exchangeable as set of
 * different words. Default value is true.
 */
export interface PhraseListFeatureInfo extends FeatureInfoObject {
  phrases?: string;
  isExchangeable?: boolean;
}

/**
 * @class
 * Initializes a new instance of the PatternFeatureInfo class.
 * @constructor
 * Pattern feature.
 *
 * @member {string} [pattern] The Regular Expression to match.
 */
export interface PatternFeatureInfo extends FeatureInfoObject {
  pattern?: string;
}

/**
 * @class
 * Initializes a new instance of the FeaturesResponseObject class.
 * @constructor
 * Model Features, including Patterns and Phraselists.
 *
 * @member {array} [phraselistFeatures]
 * @member {array} [patternFeatures]
 */
export interface FeaturesResponseObject {
  phraselistFeatures?: PhraseListFeatureInfo[];
  patternFeatures?: PatternFeatureInfo[];
}

/**
 * @class
 * Initializes a new instance of the LabelExampleResponse class.
 * @constructor
 * Response when adding a labeled example.
 *
 * @member {string} [utteranceText] The sample's utterance.
 * @member {number} [exampleId] The newly created sample ID.
 */
export interface LabelExampleResponse {
  utteranceText?: string;
  exampleId?: number;
}

/**
 * @class
 * Initializes a new instance of the OperationStatus class.
 * @constructor
 * Response of an Operation status.
 *
 * @member {string} [code] Status Code. Possible values include: 'Failed',
 * 'FAILED', 'Success'
 * @member {string} [message] Status details.
 */
export interface OperationStatus {
  code?: string;
  message?: string;
}

/**
 * @class
 * Initializes a new instance of the BatchLabelExample class.
 * @constructor
 * Response when adding a batch of labeled examples.
 *
 * @member {object} [value]
 * @member {string} [value.utteranceText] The sample's utterance.
 * @member {number} [value.exampleId] The newly created sample ID.
 * @member {boolean} [hasError]
 * @member {object} [error]
 * @member {string} [error.code] Status Code. Possible values include:
 * 'Failed', 'FAILED', 'Success'
 * @member {string} [error.message] Status details.
 */
export interface BatchLabelExample {
  value?: LabelExampleResponse;
  hasError?: boolean;
  error?: OperationStatus;
}

/**
 * @class
 * Initializes a new instance of the ApplicationInfoResponse class.
 * @constructor
 * Response containing the Application Info.
 *
 * @member {uuid} [id] The ID (GUID) of the application.
 * @member {string} [name] The name of the application.
 * @member {string} [description] The description of the application.
 * @member {string} [culture] The culture of the application. E.g.: en-us.
 * @member {string} [usageScenario] Defines the scenario for the new
 * application. Optional. E.g.: IoT.
 * @member {string} [domain] The domain for the new application. Optional.
 * E.g.: Comics.
 * @member {number} [versionsCount] Amount of model versions within the
 * application.
 * @member {string} [createdDateTime] The version's creation timestamp.
 * @member {object} [endpoints] The Runtime endpoint URL for this model
 * version.
 * @member {number} [endpointHitsCount] Number of calls made to this endpoint.
 * @member {string} [activeVersion] The version ID currently marked as active.
 */
export interface ApplicationInfoResponse {
  id?: string;
  name?: string;
  description?: string;
  culture?: string;
  usageScenario?: string;
  domain?: string;
  versionsCount?: number;
  createdDateTime?: string;
  endpoints?: any;
  endpointHitsCount?: number;
  activeVersion?: string;
}

/**
 * @class
 * Initializes a new instance of the EndpointInfo class.
 * @constructor
 * The base class "ProductionOrStagingEndpointInfo" inherits from.
 *
 * @member {string} [versionId] The version ID to publish.
 * @member {boolean} [isStaging] Indicates if the staging slot should be used,
 * instead of the Production one.
 * @member {string} [endpointUrl] The Runtime endpoint URL for this model
 * version.
 * @member {string} [region] The target region that the application is
 * published to.
 * @member {string} [assignedEndpointKey] The endpoint key.
 * @member {string} [endpointRegion] The endpoint's region.
 * @member {string} [publishedDateTime] Timestamp when was last published.
 */
export interface EndpointInfo {
  versionId?: string;
  isStaging?: boolean;
  endpointUrl?: string;
  region?: string;
  assignedEndpointKey?: string;
  endpointRegion?: string;
  publishedDateTime?: string;
}

/**
 * @class
 * Initializes a new instance of the ProductionOrStagingEndpointInfo class.
 * @constructor
 */
export interface ProductionOrStagingEndpointInfo extends EndpointInfo {
}

/**
 * @class
 * Initializes a new instance of the AvailableCulture class.
 * @constructor
 * Available culture for using in a new application.
 *
 * @member {string} [name] The language name.
 * @member {string} [code] The ISO value for the language.
 */
export interface AvailableCulture {
  name?: string;
  code?: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationSettings class.
 * @constructor
 * The application settings.
 *
 * @member {uuid} id The application ID.
 * @member {boolean} isPublic Setting your application as public allows other
 * people to use your application's endpoint using their own keys.
 */
export interface ApplicationSettings {
  id: string;
  isPublic: boolean;
}

/**
 * @class
 * Initializes a new instance of the PublishSettings class.
 * @constructor
 * The application publish settings.
 *
 * @member {uuid} id The application ID.
 * @member {boolean} isSentimentAnalysisEnabled Setting sentiment analysis as
 * true returns the Sentiment of the input utterance along with the resopnse
 * @member {boolean} isSpeechEnabled Setting speech as public enables speech
 * priming in your app
 * @member {boolean} isSpellCheckerEnabled Setting spell checker as public
 * enables spell checking the input utterance.
 */
export interface PublishSettings {
  id: string;
  isSentimentAnalysisEnabled: boolean;
  isSpeechEnabled: boolean;
  isSpellCheckerEnabled: boolean;
}

/**
 * @class
 * Initializes a new instance of the AvailablePrebuiltEntityModel class.
 * @constructor
 * Available Prebuilt entity model for using in an application.
 *
 * @member {string} [name] The entity name.
 * @member {string} [description] The entity description and usage information.
 * @member {string} [examples] Usage examples.
 */
export interface AvailablePrebuiltEntityModel {
  name?: string;
  description?: string;
  examples?: string;
}

/**
 * @class
 * Initializes a new instance of the EnqueueTrainingResponse class.
 * @constructor
 * Response model when requesting to train the model.
 *
 * @member {number} [statusId] The train request status ID.
 * @member {string} [status] Possible values include: 'Queued', 'InProgress',
 * 'UpToDate', 'Fail', 'Success'
 */
export interface EnqueueTrainingResponse {
  statusId?: number;
  status?: string;
}

/**
 * @class
 * Initializes a new instance of the ModelTrainingDetails class.
 * @constructor
 * Model Training Details.
 *
 * @member {number} [statusId] The train request status ID.
 * @member {string} [status] Possible values include: 'Queued', 'InProgress',
 * 'UpToDate', 'Fail', 'Success'
 * @member {number} [exampleCount] The count of examples used to train the
 * model.
 * @member {date} [trainingDateTime] When the model was trained.
 * @member {string} [failureReason] Reason for the training failure.
 */
export interface ModelTrainingDetails {
  statusId?: number;
  status?: string;
  exampleCount?: number;
  trainingDateTime?: Date;
  failureReason?: string;
}

/**
 * @class
 * Initializes a new instance of the ModelTrainingInfo class.
 * @constructor
 * Model Training Info.
 *
 * @member {uuid} [modelId] The ID (GUID) of the model.
 * @member {object} [details]
 * @member {number} [details.statusId] The train request status ID.
 * @member {string} [details.status] Possible values include: 'Queued',
 * 'InProgress', 'UpToDate', 'Fail', 'Success'
 * @member {number} [details.exampleCount] The count of examples used to train
 * the model.
 * @member {date} [details.trainingDateTime] When the model was trained.
 * @member {string} [details.failureReason] Reason for the training failure.
 */
export interface ModelTrainingInfo {
  modelId?: string;
  details?: ModelTrainingDetails;
}

/**
 * @class
 * Initializes a new instance of the UserAccessList class.
 * @constructor
 * List of user permissions.
 *
 * @member {string} [owner] The email address of owner of the application.
 * @member {array} [emails]
 */
export interface UserAccessList {
  owner?: string;
  emails?: string[];
}

/**
 * @class
 * Initializes a new instance of the UserCollaborator class.
 * @constructor
 * @member {string} [email] The email address of the user.
 */
export interface UserCollaborator {
  email?: string;
}

/**
 * @class
 * Initializes a new instance of the CollaboratorsArray class.
 * @constructor
 * @member {array} [emails] The email address of the users.
 */
export interface CollaboratorsArray {
  emails?: string[];
}

/**
 * @class
 * Initializes a new instance of the ErrorResponse class.
 * @constructor
 * Error response when invoking an operation on the API.
 *
 * @member {string} [errorType]
 */
export interface ErrorResponse {
  errorType?: string;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @class
 * Initializes a new instance of the OperationError class.
 * @constructor
 * Operation error details when invoking an operation on the API.
 *
 * @member {string} [code]
 * @member {string} [message]
 */
export interface OperationError {
  code?: string;
  message?: string;
}

/**
 * @class
 * Initializes a new instance of the PrebuiltDomainItem class.
 * @constructor
 * @member {string} [name]
 * @member {string} [description]
 * @member {string} [examples]
 */
export interface PrebuiltDomainItem {
  name?: string;
  description?: string;
  examples?: string;
}

/**
 * @class
 * Initializes a new instance of the PrebuiltDomain class.
 * @constructor
 * Prebuilt Domain.
 *
 * @member {string} [name]
 * @member {string} [culture]
 * @member {string} [description]
 * @member {string} [examples]
 * @member {array} [intents]
 * @member {array} [entities]
 */
export interface PrebuiltDomain {
  name?: string;
  culture?: string;
  description?: string;
  examples?: string;
  intents?: PrebuiltDomainItem[];
  entities?: PrebuiltDomainItem[];
}

/**
 * @class
 * Initializes a new instance of the EntityRoleCreateObject class.
 * @constructor
 * Object model for creating an entity role.
 *
 * @member {string} [name] The entity role name.
 */
export interface EntityRoleCreateObject {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the RegexModelCreateObject class.
 * @constructor
 * Model object for creating a regex entity model.
 *
 * @member {string} [regexPattern] The regex entity pattern.
 * @member {string} [name] The model name.
 */
export interface RegexModelCreateObject {
  regexPattern?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the PatternAnyModelCreateObject class.
 * @constructor
 * Model object for creating a Pattern.Any entity model.
 *
 * @member {string} [name] The model name.
 * @member {array} [explicitList] The Pattern.Any explicit list.
 */
export interface PatternAnyModelCreateObject {
  name?: string;
  explicitList?: string[];
}

/**
 * @class
 * Initializes a new instance of the ExplicitListItemCreateObject class.
 * @constructor
 * Object model for creating an explicit list item.
 *
 * @member {string} [explicitListItem] The explicit list item.
 */
export interface ExplicitListItemCreateObject {
  explicitListItem?: string;
}

/**
 * @class
 * Initializes a new instance of the RegexModelUpdateObject class.
 * @constructor
 * Model object for updating a regex entity model.
 *
 * @member {string} [regexPattern] The regex entity pattern.
 * @member {string} [name] The model name.
 */
export interface RegexModelUpdateObject {
  regexPattern?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the PatternAnyModelUpdateObject class.
 * @constructor
 * Model object for updating a Pattern.Any entity model.
 *
 * @member {string} [name] The model name.
 * @member {array} [explicitList] The Pattern.Any explicit list.
 */
export interface PatternAnyModelUpdateObject {
  name?: string;
  explicitList?: string[];
}

/**
 * @class
 * Initializes a new instance of the EntityRoleUpdateObject class.
 * @constructor
 * Object model for updating an entity role.
 *
 * @member {string} [name] The entity role name.
 */
export interface EntityRoleUpdateObject {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the ExplicitListItemUpdateObject class.
 * @constructor
 * Model object for updating an explicit list item.
 *
 * @member {string} [explicitListItem] The explicit list item.
 */
export interface ExplicitListItemUpdateObject {
  explicitListItem?: string;
}

/**
 * @class
 * Initializes a new instance of the PatternRuleCreateObject class.
 * @constructor
 * Object model for creating a pattern
 *
 * @member {string} [pattern] The pattern text.
 * @member {string} [intent] The intent's name which the pattern belongs to.
 */
export interface PatternRuleCreateObject {
  pattern?: string;
  intent?: string;
}

/**
 * @class
 * Initializes a new instance of the PatternRuleUpdateObject class.
 * @constructor
 * Object model for updating a pattern.
 *
 * @member {uuid} [id] The pattern ID.
 * @member {string} [pattern] The pattern text.
 * @member {string} [intent] The intent's name which the pattern belongs to.
 */
export interface PatternRuleUpdateObject {
  id?: string;
  pattern?: string;
  intent?: string;
}

/**
 * @class
 * Initializes a new instance of the RegexEntityExtractor class.
 * @constructor
 * Regex Entity Extractor.
 *
 * @member {uuid} id The ID of the Entity Model.
 * @member {string} [name] Name of the Entity Model.
 * @member {number} [typeId] The type ID of the Entity Model.
 * @member {string} readableType Possible values include: 'Entity Extractor',
 * 'Hierarchical Entity Extractor', 'Hierarchical Child Entity Extractor',
 * 'Composite Entity Extractor', 'Closed List Entity Extractor', 'Prebuilt
 * Entity Extractor', 'Intent Classifier', 'Pattern.Any Entity Extractor',
 * 'Regex Entity Extractor'
 * @member {array} [roles]
 * @member {string} [regexPattern] The Regex entity pattern.
 */
export interface RegexEntityExtractor {
  id: string;
  name?: string;
  typeId?: number;
  readableType: string;
  roles?: EntityRole[];
  regexPattern?: string;
}

/**
 * @class
 * Initializes a new instance of the PatternAnyEntityExtractor class.
 * @constructor
 * Pattern.Any Entity Extractor.
 *
 * @member {uuid} id The ID of the Entity Model.
 * @member {string} [name] Name of the Entity Model.
 * @member {number} [typeId] The type ID of the Entity Model.
 * @member {string} readableType Possible values include: 'Entity Extractor',
 * 'Hierarchical Entity Extractor', 'Hierarchical Child Entity Extractor',
 * 'Composite Entity Extractor', 'Closed List Entity Extractor', 'Prebuilt
 * Entity Extractor', 'Intent Classifier', 'Pattern.Any Entity Extractor',
 * 'Regex Entity Extractor'
 * @member {array} [roles]
 * @member {array} [explicitList]
 */
export interface PatternAnyEntityExtractor {
  id: string;
  name?: string;
  typeId?: number;
  readableType: string;
  roles?: EntityRole[];
  explicitList?: ExplicitListItem[];
}

/**
 * @class
 * Initializes a new instance of the PatternRuleInfo class.
 * @constructor
 * Pattern rule
 *
 * @member {uuid} [id] The pattern ID.
 * @member {string} [pattern] The pattern text.
 * @member {string} [intent] The intent's name where the pattern belongs to.
 */
export interface PatternRuleInfo {
  id?: string;
  pattern?: string;
  intent?: string;
}

/**
 * @class
 * Initializes a new instance of the LabelTextObject class.
 * @constructor
 * An object containing the example's text.
 *
 * @member {number} [id] The ID of the Label.
 * @member {string} [text] The text of the label.
 */
export interface LabelTextObject {
  id?: number;
  text?: string;
}

/**
 * @class
 * Initializes a new instance of the AppVersionSettingObject class.
 * @constructor
 * Object model of an application version setting.
 *
 * @member {string} [name] The application version setting name.
 * @member {string} [value] The application version setting value.
 */
export interface AppVersionSettingObject {
  name?: string;
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the HierarchicalChildModelUpdateObject class.
 * @constructor
 * @member {string} [name]
 */
export interface HierarchicalChildModelUpdateObject {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the HierarchicalChildModelCreateObject class.
 * @constructor
 * @member {string} [name]
 */
export interface HierarchicalChildModelCreateObject {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the CompositeChildModelCreateObject class.
 * @constructor
 * @member {string} [name]
 */
export interface CompositeChildModelCreateObject {
  name?: string;
}
