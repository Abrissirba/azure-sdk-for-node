/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * Lists all report configs for a subscription.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ReportConfigListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Consumption/reportconfigs';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ReportConfigListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Lists all report configs for a resource group under a subscription.
 *
 * @param {string} resourceGroupName Azure Resource Group Name.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ReportConfigListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByResourceGroupName(resourceGroupName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Consumption/reportconfigs';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ReportConfigListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets the report config for a subscription by report config name.
 *
 * @param {string} reportConfigName Report Config Name.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ReportConfig} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(reportConfigName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (reportConfigName === null || reportConfigName === undefined || typeof reportConfigName.valueOf() !== 'string') {
      throw new Error('reportConfigName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Consumption/reportconfigs/{reportConfigName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{reportConfigName}', encodeURIComponent(reportConfigName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ReportConfig']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * The operation to create or update a report config. Update operation requires
 * latest eTag to be set in the request mandatorily. You may obtain the latest
 * eTag by performing a get operation. Create operation does not require eTag.
 *
 * @param {string} reportConfigName Report Config Name.
 *
 * @param {object} parameters Parameters supplied to the CreateOrUpdate Report
 * Config operation.
 *
 * @param {object} [parameters.schedule] Has schedule information for the
 * report config.
 *
 * @param {string} [parameters.schedule.status] The status of the schedule.
 * Whether active or not. If inactive, the report's scheduled execution is
 * paused. Possible values include: 'Active', 'Inactive'
 *
 * @param {string} parameters.schedule.recurrence The schedule recurrence.
 * Possible values include: 'Daily', 'Weekly', 'Monthly', 'Annually'
 *
 * @param {object} parameters.schedule.recurrencePeriod Has start and end date
 * of the recurrence. The start date must be in future. If present, the end
 * date must be greater than start date.
 *
 * @param {date} parameters.schedule.recurrencePeriod.from The start date of
 * recurrence.
 *
 * @param {date} [parameters.schedule.recurrencePeriod.to] The end date of
 * recurrence. If not provided, we default this to 10 years from the start
 * date.
 *
 * @param {string} [parameters.format] The format of the report being
 * delivered. Possible values include: 'Csv'
 *
 * @param {object} parameters.deliveryInfo Has delivery information for the
 * report config.
 *
 * @param {object} parameters.deliveryInfo.destination Has destination for the
 * report being delivered.
 *
 * @param {string} parameters.deliveryInfo.destination.subscriptionId The
 * subscription id of the storage account where reports will be delivered.
 *
 * @param {string} parameters.deliveryInfo.destination.resourceGroup The
 * resource group of the storage account here reports will be delivered.
 *
 * @param {string} parameters.deliveryInfo.destination.storageAccount The
 * storage account here reports will be delivered.
 *
 * @param {string} parameters.deliveryInfo.destination.endpoint The endpoint of
 * the storage service where reports will be delivered.
 *
 * @param {string} parameters.deliveryInfo.destination.container The name of
 * the container where reports will be uploaded.
 *
 * @param {string} parameters.deliveryInfo.destination.category The name of the
 * directory where reports will be uploaded.
 *
 * @param {object} parameters.definition Has definition for the report config.
 *
 * @param {string} parameters.definition.timeframe The time frame for pulling
 * data for the report. If custom, then a specific time period must be
 * provided. Possible values include: 'WeekToDate', 'MonthToDate',
 * 'YearToDate', 'Custom'
 *
 * @param {object} [parameters.definition.timePeriod] Has time period for
 * pulling data for the report.
 *
 * @param {date} parameters.definition.timePeriod.from The start date to pull
 * data from.
 *
 * @param {date} parameters.definition.timePeriod.to The end date to pull data
 * to.
 *
 * @param {object} [parameters.definition.dataset] Has definition for data in
 * this report config.
 *
 * @param {string} [parameters.definition.dataset.granularity] The granularity
 * of rows in the report. Possible values include: 'Daily'
 *
 * @param {object} [parameters.definition.dataset.configuration] Has
 * configuration information for the data in the report. The configuration will
 * be ignored if aggregation and grouping are provided.
 *
 * @param {array} [parameters.definition.dataset.configuration.columns] Array
 * of column names to be included in the report. Any valid report column name
 * is allowed. If not provided, then report includes all columns.
 *
 * @param {object} [parameters.definition.dataset.aggregation] Dictionary of
 * aggregation expression to use in the report. The key of each item in the
 * dictionary is the alias for the aggregated column. Report can have upto 2
 * aggregation clauses.
 *
 * @param {array} [parameters.definition.dataset.grouping] Array of group by
 * expression to use in the report. Report can have upto 2 group by clauses.
 *
 * @param {object} [parameters.definition.dataset.filter] Has filter expression
 * to use in the report.
 *
 * @param {array} [parameters.definition.dataset.filter.and] The logical "AND"
 * expression. Must have atleast 2 items.
 *
 * @param {array} [parameters.definition.dataset.filter.or] The logical "OR"
 * expression. Must have atleast 2 items.
 *
 * @param {object} [parameters.definition.dataset.filter.not] The logical "NOT"
 * expression.
 *
 * @param {object} [parameters.definition.dataset.filter.dimension] Has
 * comparison expression for a dimension
 *
 * @param {object} [parameters.definition.dataset.filter.tag] Has comparison
 * expression for a tag
 *
 * @param {string} parameters.definition.dataset.filter.tag.name The name of
 * the column to use in comaprison.
 *
 * @param {array} parameters.definition.dataset.filter.tag.values Array of
 * values to use for comparison
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ReportConfig} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdate(reportConfigName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  if (parameters === null || parameters === undefined)
  {
    parameters = {};
  }
  // Validate
  try {
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (reportConfigName === null || reportConfigName === undefined || typeof reportConfigName.valueOf() !== 'string') {
      throw new Error('reportConfigName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Consumption/reportconfigs/{reportConfigName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{reportConfigName}', encodeURIComponent(reportConfigName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['ReportConfig']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ReportConfig']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ReportConfig']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * The operation to delete a report.
 *
 * @param {string} reportConfigName Report Config Name.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(reportConfigName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (reportConfigName === null || reportConfigName === undefined || typeof reportConfigName.valueOf() !== 'string') {
      throw new Error('reportConfigName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Consumption/reportconfigs/{reportConfigName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{reportConfigName}', encodeURIComponent(reportConfigName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets the report config for a resource group under a subscription by report
 * config name.
 *
 * @param {string} resourceGroupName Azure Resource Group Name.
 *
 * @param {string} reportConfigName Report Config Name.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ReportConfig} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getByResourceGroupName(resourceGroupName, reportConfigName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (reportConfigName === null || reportConfigName === undefined || typeof reportConfigName.valueOf() !== 'string') {
      throw new Error('reportConfigName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Consumption/reportconfigs/{reportConfigName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{reportConfigName}', encodeURIComponent(reportConfigName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ReportConfig']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * The operation to create or update a report config. Update operation requires
 * latest eTag to be set in the request mandatorily. You may obtain the latest
 * eTag by performing a get operation. Create operation does not require eTag.
 *
 * @param {string} resourceGroupName Azure Resource Group Name.
 *
 * @param {string} reportConfigName Report Config Name.
 *
 * @param {object} parameters Parameters supplied to the CreateOrUpdate Report
 * Config operation.
 *
 * @param {object} [parameters.schedule] Has schedule information for the
 * report config.
 *
 * @param {string} [parameters.schedule.status] The status of the schedule.
 * Whether active or not. If inactive, the report's scheduled execution is
 * paused. Possible values include: 'Active', 'Inactive'
 *
 * @param {string} parameters.schedule.recurrence The schedule recurrence.
 * Possible values include: 'Daily', 'Weekly', 'Monthly', 'Annually'
 *
 * @param {object} parameters.schedule.recurrencePeriod Has start and end date
 * of the recurrence. The start date must be in future. If present, the end
 * date must be greater than start date.
 *
 * @param {date} parameters.schedule.recurrencePeriod.from The start date of
 * recurrence.
 *
 * @param {date} [parameters.schedule.recurrencePeriod.to] The end date of
 * recurrence. If not provided, we default this to 10 years from the start
 * date.
 *
 * @param {string} [parameters.format] The format of the report being
 * delivered. Possible values include: 'Csv'
 *
 * @param {object} parameters.deliveryInfo Has delivery information for the
 * report config.
 *
 * @param {object} parameters.deliveryInfo.destination Has destination for the
 * report being delivered.
 *
 * @param {string} parameters.deliveryInfo.destination.subscriptionId The
 * subscription id of the storage account where reports will be delivered.
 *
 * @param {string} parameters.deliveryInfo.destination.resourceGroup The
 * resource group of the storage account here reports will be delivered.
 *
 * @param {string} parameters.deliveryInfo.destination.storageAccount The
 * storage account here reports will be delivered.
 *
 * @param {string} parameters.deliveryInfo.destination.endpoint The endpoint of
 * the storage service where reports will be delivered.
 *
 * @param {string} parameters.deliveryInfo.destination.container The name of
 * the container where reports will be uploaded.
 *
 * @param {string} parameters.deliveryInfo.destination.category The name of the
 * directory where reports will be uploaded.
 *
 * @param {object} parameters.definition Has definition for the report config.
 *
 * @param {string} parameters.definition.timeframe The time frame for pulling
 * data for the report. If custom, then a specific time period must be
 * provided. Possible values include: 'WeekToDate', 'MonthToDate',
 * 'YearToDate', 'Custom'
 *
 * @param {object} [parameters.definition.timePeriod] Has time period for
 * pulling data for the report.
 *
 * @param {date} parameters.definition.timePeriod.from The start date to pull
 * data from.
 *
 * @param {date} parameters.definition.timePeriod.to The end date to pull data
 * to.
 *
 * @param {object} [parameters.definition.dataset] Has definition for data in
 * this report config.
 *
 * @param {string} [parameters.definition.dataset.granularity] The granularity
 * of rows in the report. Possible values include: 'Daily'
 *
 * @param {object} [parameters.definition.dataset.configuration] Has
 * configuration information for the data in the report. The configuration will
 * be ignored if aggregation and grouping are provided.
 *
 * @param {array} [parameters.definition.dataset.configuration.columns] Array
 * of column names to be included in the report. Any valid report column name
 * is allowed. If not provided, then report includes all columns.
 *
 * @param {object} [parameters.definition.dataset.aggregation] Dictionary of
 * aggregation expression to use in the report. The key of each item in the
 * dictionary is the alias for the aggregated column. Report can have upto 2
 * aggregation clauses.
 *
 * @param {array} [parameters.definition.dataset.grouping] Array of group by
 * expression to use in the report. Report can have upto 2 group by clauses.
 *
 * @param {object} [parameters.definition.dataset.filter] Has filter expression
 * to use in the report.
 *
 * @param {array} [parameters.definition.dataset.filter.and] The logical "AND"
 * expression. Must have atleast 2 items.
 *
 * @param {array} [parameters.definition.dataset.filter.or] The logical "OR"
 * expression. Must have atleast 2 items.
 *
 * @param {object} [parameters.definition.dataset.filter.not] The logical "NOT"
 * expression.
 *
 * @param {object} [parameters.definition.dataset.filter.dimension] Has
 * comparison expression for a dimension
 *
 * @param {object} [parameters.definition.dataset.filter.tag] Has comparison
 * expression for a tag
 *
 * @param {string} parameters.definition.dataset.filter.tag.name The name of
 * the column to use in comaprison.
 *
 * @param {array} parameters.definition.dataset.filter.tag.values Array of
 * values to use for comparison
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ReportConfig} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdateByResourceGroupName(resourceGroupName, reportConfigName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  if (parameters === null || parameters === undefined)
  {
    parameters = {};
  }
  // Validate
  try {
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (reportConfigName === null || reportConfigName === undefined || typeof reportConfigName.valueOf() !== 'string') {
      throw new Error('reportConfigName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Consumption/reportconfigs/{reportConfigName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{reportConfigName}', encodeURIComponent(reportConfigName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['ReportConfig']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ReportConfig']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ReportConfig']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * The operation to delete a report config.
 *
 * @param {string} resourceGroupName Azure Resource Group Name.
 *
 * @param {string} reportConfigName Report Config Name.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteByResourceGroupName(resourceGroupName, reportConfigName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (reportConfigName === null || reportConfigName === undefined || typeof reportConfigName.valueOf() !== 'string') {
      throw new Error('reportConfigName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Consumption/reportconfigs/{reportConfigName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{reportConfigName}', encodeURIComponent(reportConfigName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a ReportConfigOperations. */
class ReportConfigOperations {
  /**
   * Create a ReportConfigOperations.
   * @param {ConsumptionManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._list = _list;
    this._listByResourceGroupName = _listByResourceGroupName;
    this._get = _get;
    this._createOrUpdate = _createOrUpdate;
    this._deleteMethod = _deleteMethod;
    this._getByResourceGroupName = _getByResourceGroupName;
    this._createOrUpdateByResourceGroupName = _createOrUpdateByResourceGroupName;
    this._deleteByResourceGroupName = _deleteByResourceGroupName;
  }

  /**
   * Lists all report configs for a subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ReportConfigListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists all report configs for a subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ReportConfigListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ReportConfigListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(options, optionalCallback);
    }
  }

  /**
   * Lists all report configs for a resource group under a subscription.
   *
   * @param {string} resourceGroupName Azure Resource Group Name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ReportConfigListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByResourceGroupNameWithHttpOperationResponse(resourceGroupName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByResourceGroupName(resourceGroupName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists all report configs for a resource group under a subscription.
   *
   * @param {string} resourceGroupName Azure Resource Group Name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ReportConfigListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ReportConfigListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByResourceGroupName(resourceGroupName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByResourceGroupName(resourceGroupName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByResourceGroupName(resourceGroupName, options, optionalCallback);
    }
  }

  /**
   * Gets the report config for a subscription by report config name.
   *
   * @param {string} reportConfigName Report Config Name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ReportConfig>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(reportConfigName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(reportConfigName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets the report config for a subscription by report config name.
   *
   * @param {string} reportConfigName Report Config Name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ReportConfig} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ReportConfig} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(reportConfigName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(reportConfigName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(reportConfigName, options, optionalCallback);
    }
  }

  /**
   * The operation to create or update a report config. Update operation requires
   * latest eTag to be set in the request mandatorily. You may obtain the latest
   * eTag by performing a get operation. Create operation does not require eTag.
   *
   * @param {string} reportConfigName Report Config Name.
   *
   * @param {object} parameters Parameters supplied to the CreateOrUpdate Report
   * Config operation.
   *
   * @param {object} [parameters.schedule] Has schedule information for the
   * report config.
   *
   * @param {string} [parameters.schedule.status] The status of the schedule.
   * Whether active or not. If inactive, the report's scheduled execution is
   * paused. Possible values include: 'Active', 'Inactive'
   *
   * @param {string} parameters.schedule.recurrence The schedule recurrence.
   * Possible values include: 'Daily', 'Weekly', 'Monthly', 'Annually'
   *
   * @param {object} parameters.schedule.recurrencePeriod Has start and end date
   * of the recurrence. The start date must be in future. If present, the end
   * date must be greater than start date.
   *
   * @param {date} parameters.schedule.recurrencePeriod.from The start date of
   * recurrence.
   *
   * @param {date} [parameters.schedule.recurrencePeriod.to] The end date of
   * recurrence. If not provided, we default this to 10 years from the start
   * date.
   *
   * @param {string} [parameters.format] The format of the report being
   * delivered. Possible values include: 'Csv'
   *
   * @param {object} parameters.deliveryInfo Has delivery information for the
   * report config.
   *
   * @param {object} parameters.deliveryInfo.destination Has destination for the
   * report being delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.subscriptionId The
   * subscription id of the storage account where reports will be delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.resourceGroup The
   * resource group of the storage account here reports will be delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.storageAccount The
   * storage account here reports will be delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.endpoint The endpoint of
   * the storage service where reports will be delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.container The name of
   * the container where reports will be uploaded.
   *
   * @param {string} parameters.deliveryInfo.destination.category The name of the
   * directory where reports will be uploaded.
   *
   * @param {object} parameters.definition Has definition for the report config.
   *
   * @param {string} parameters.definition.timeframe The time frame for pulling
   * data for the report. If custom, then a specific time period must be
   * provided. Possible values include: 'WeekToDate', 'MonthToDate',
   * 'YearToDate', 'Custom'
   *
   * @param {object} [parameters.definition.timePeriod] Has time period for
   * pulling data for the report.
   *
   * @param {date} parameters.definition.timePeriod.from The start date to pull
   * data from.
   *
   * @param {date} parameters.definition.timePeriod.to The end date to pull data
   * to.
   *
   * @param {object} [parameters.definition.dataset] Has definition for data in
   * this report config.
   *
   * @param {string} [parameters.definition.dataset.granularity] The granularity
   * of rows in the report. Possible values include: 'Daily'
   *
   * @param {object} [parameters.definition.dataset.configuration] Has
   * configuration information for the data in the report. The configuration will
   * be ignored if aggregation and grouping are provided.
   *
   * @param {array} [parameters.definition.dataset.configuration.columns] Array
   * of column names to be included in the report. Any valid report column name
   * is allowed. If not provided, then report includes all columns.
   *
   * @param {object} [parameters.definition.dataset.aggregation] Dictionary of
   * aggregation expression to use in the report. The key of each item in the
   * dictionary is the alias for the aggregated column. Report can have upto 2
   * aggregation clauses.
   *
   * @param {array} [parameters.definition.dataset.grouping] Array of group by
   * expression to use in the report. Report can have upto 2 group by clauses.
   *
   * @param {object} [parameters.definition.dataset.filter] Has filter expression
   * to use in the report.
   *
   * @param {array} [parameters.definition.dataset.filter.and] The logical "AND"
   * expression. Must have atleast 2 items.
   *
   * @param {array} [parameters.definition.dataset.filter.or] The logical "OR"
   * expression. Must have atleast 2 items.
   *
   * @param {object} [parameters.definition.dataset.filter.not] The logical "NOT"
   * expression.
   *
   * @param {object} [parameters.definition.dataset.filter.dimension] Has
   * comparison expression for a dimension
   *
   * @param {object} [parameters.definition.dataset.filter.tag] Has comparison
   * expression for a tag
   *
   * @param {string} parameters.definition.dataset.filter.tag.name The name of
   * the column to use in comaprison.
   *
   * @param {array} parameters.definition.dataset.filter.tag.values Array of
   * values to use for comparison
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ReportConfig>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateWithHttpOperationResponse(reportConfigName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdate(reportConfigName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * The operation to create or update a report config. Update operation requires
   * latest eTag to be set in the request mandatorily. You may obtain the latest
   * eTag by performing a get operation. Create operation does not require eTag.
   *
   * @param {string} reportConfigName Report Config Name.
   *
   * @param {object} parameters Parameters supplied to the CreateOrUpdate Report
   * Config operation.
   *
   * @param {object} [parameters.schedule] Has schedule information for the
   * report config.
   *
   * @param {string} [parameters.schedule.status] The status of the schedule.
   * Whether active or not. If inactive, the report's scheduled execution is
   * paused. Possible values include: 'Active', 'Inactive'
   *
   * @param {string} parameters.schedule.recurrence The schedule recurrence.
   * Possible values include: 'Daily', 'Weekly', 'Monthly', 'Annually'
   *
   * @param {object} parameters.schedule.recurrencePeriod Has start and end date
   * of the recurrence. The start date must be in future. If present, the end
   * date must be greater than start date.
   *
   * @param {date} parameters.schedule.recurrencePeriod.from The start date of
   * recurrence.
   *
   * @param {date} [parameters.schedule.recurrencePeriod.to] The end date of
   * recurrence. If not provided, we default this to 10 years from the start
   * date.
   *
   * @param {string} [parameters.format] The format of the report being
   * delivered. Possible values include: 'Csv'
   *
   * @param {object} parameters.deliveryInfo Has delivery information for the
   * report config.
   *
   * @param {object} parameters.deliveryInfo.destination Has destination for the
   * report being delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.subscriptionId The
   * subscription id of the storage account where reports will be delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.resourceGroup The
   * resource group of the storage account here reports will be delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.storageAccount The
   * storage account here reports will be delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.endpoint The endpoint of
   * the storage service where reports will be delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.container The name of
   * the container where reports will be uploaded.
   *
   * @param {string} parameters.deliveryInfo.destination.category The name of the
   * directory where reports will be uploaded.
   *
   * @param {object} parameters.definition Has definition for the report config.
   *
   * @param {string} parameters.definition.timeframe The time frame for pulling
   * data for the report. If custom, then a specific time period must be
   * provided. Possible values include: 'WeekToDate', 'MonthToDate',
   * 'YearToDate', 'Custom'
   *
   * @param {object} [parameters.definition.timePeriod] Has time period for
   * pulling data for the report.
   *
   * @param {date} parameters.definition.timePeriod.from The start date to pull
   * data from.
   *
   * @param {date} parameters.definition.timePeriod.to The end date to pull data
   * to.
   *
   * @param {object} [parameters.definition.dataset] Has definition for data in
   * this report config.
   *
   * @param {string} [parameters.definition.dataset.granularity] The granularity
   * of rows in the report. Possible values include: 'Daily'
   *
   * @param {object} [parameters.definition.dataset.configuration] Has
   * configuration information for the data in the report. The configuration will
   * be ignored if aggregation and grouping are provided.
   *
   * @param {array} [parameters.definition.dataset.configuration.columns] Array
   * of column names to be included in the report. Any valid report column name
   * is allowed. If not provided, then report includes all columns.
   *
   * @param {object} [parameters.definition.dataset.aggregation] Dictionary of
   * aggregation expression to use in the report. The key of each item in the
   * dictionary is the alias for the aggregated column. Report can have upto 2
   * aggregation clauses.
   *
   * @param {array} [parameters.definition.dataset.grouping] Array of group by
   * expression to use in the report. Report can have upto 2 group by clauses.
   *
   * @param {object} [parameters.definition.dataset.filter] Has filter expression
   * to use in the report.
   *
   * @param {array} [parameters.definition.dataset.filter.and] The logical "AND"
   * expression. Must have atleast 2 items.
   *
   * @param {array} [parameters.definition.dataset.filter.or] The logical "OR"
   * expression. Must have atleast 2 items.
   *
   * @param {object} [parameters.definition.dataset.filter.not] The logical "NOT"
   * expression.
   *
   * @param {object} [parameters.definition.dataset.filter.dimension] Has
   * comparison expression for a dimension
   *
   * @param {object} [parameters.definition.dataset.filter.tag] Has comparison
   * expression for a tag
   *
   * @param {string} parameters.definition.dataset.filter.tag.name The name of
   * the column to use in comaprison.
   *
   * @param {array} parameters.definition.dataset.filter.tag.values Array of
   * values to use for comparison
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ReportConfig} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ReportConfig} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(reportConfigName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdate(reportConfigName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdate(reportConfigName, parameters, options, optionalCallback);
    }
  }

  /**
   * The operation to delete a report.
   *
   * @param {string} reportConfigName Report Config Name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(reportConfigName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(reportConfigName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * The operation to delete a report.
   *
   * @param {string} reportConfigName Report Config Name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(reportConfigName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(reportConfigName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(reportConfigName, options, optionalCallback);
    }
  }

  /**
   * Gets the report config for a resource group under a subscription by report
   * config name.
   *
   * @param {string} resourceGroupName Azure Resource Group Name.
   *
   * @param {string} reportConfigName Report Config Name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ReportConfig>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getByResourceGroupNameWithHttpOperationResponse(resourceGroupName, reportConfigName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getByResourceGroupName(resourceGroupName, reportConfigName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets the report config for a resource group under a subscription by report
   * config name.
   *
   * @param {string} resourceGroupName Azure Resource Group Name.
   *
   * @param {string} reportConfigName Report Config Name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ReportConfig} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ReportConfig} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getByResourceGroupName(resourceGroupName, reportConfigName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getByResourceGroupName(resourceGroupName, reportConfigName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getByResourceGroupName(resourceGroupName, reportConfigName, options, optionalCallback);
    }
  }

  /**
   * The operation to create or update a report config. Update operation requires
   * latest eTag to be set in the request mandatorily. You may obtain the latest
   * eTag by performing a get operation. Create operation does not require eTag.
   *
   * @param {string} resourceGroupName Azure Resource Group Name.
   *
   * @param {string} reportConfigName Report Config Name.
   *
   * @param {object} parameters Parameters supplied to the CreateOrUpdate Report
   * Config operation.
   *
   * @param {object} [parameters.schedule] Has schedule information for the
   * report config.
   *
   * @param {string} [parameters.schedule.status] The status of the schedule.
   * Whether active or not. If inactive, the report's scheduled execution is
   * paused. Possible values include: 'Active', 'Inactive'
   *
   * @param {string} parameters.schedule.recurrence The schedule recurrence.
   * Possible values include: 'Daily', 'Weekly', 'Monthly', 'Annually'
   *
   * @param {object} parameters.schedule.recurrencePeriod Has start and end date
   * of the recurrence. The start date must be in future. If present, the end
   * date must be greater than start date.
   *
   * @param {date} parameters.schedule.recurrencePeriod.from The start date of
   * recurrence.
   *
   * @param {date} [parameters.schedule.recurrencePeriod.to] The end date of
   * recurrence. If not provided, we default this to 10 years from the start
   * date.
   *
   * @param {string} [parameters.format] The format of the report being
   * delivered. Possible values include: 'Csv'
   *
   * @param {object} parameters.deliveryInfo Has delivery information for the
   * report config.
   *
   * @param {object} parameters.deliveryInfo.destination Has destination for the
   * report being delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.subscriptionId The
   * subscription id of the storage account where reports will be delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.resourceGroup The
   * resource group of the storage account here reports will be delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.storageAccount The
   * storage account here reports will be delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.endpoint The endpoint of
   * the storage service where reports will be delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.container The name of
   * the container where reports will be uploaded.
   *
   * @param {string} parameters.deliveryInfo.destination.category The name of the
   * directory where reports will be uploaded.
   *
   * @param {object} parameters.definition Has definition for the report config.
   *
   * @param {string} parameters.definition.timeframe The time frame for pulling
   * data for the report. If custom, then a specific time period must be
   * provided. Possible values include: 'WeekToDate', 'MonthToDate',
   * 'YearToDate', 'Custom'
   *
   * @param {object} [parameters.definition.timePeriod] Has time period for
   * pulling data for the report.
   *
   * @param {date} parameters.definition.timePeriod.from The start date to pull
   * data from.
   *
   * @param {date} parameters.definition.timePeriod.to The end date to pull data
   * to.
   *
   * @param {object} [parameters.definition.dataset] Has definition for data in
   * this report config.
   *
   * @param {string} [parameters.definition.dataset.granularity] The granularity
   * of rows in the report. Possible values include: 'Daily'
   *
   * @param {object} [parameters.definition.dataset.configuration] Has
   * configuration information for the data in the report. The configuration will
   * be ignored if aggregation and grouping are provided.
   *
   * @param {array} [parameters.definition.dataset.configuration.columns] Array
   * of column names to be included in the report. Any valid report column name
   * is allowed. If not provided, then report includes all columns.
   *
   * @param {object} [parameters.definition.dataset.aggregation] Dictionary of
   * aggregation expression to use in the report. The key of each item in the
   * dictionary is the alias for the aggregated column. Report can have upto 2
   * aggregation clauses.
   *
   * @param {array} [parameters.definition.dataset.grouping] Array of group by
   * expression to use in the report. Report can have upto 2 group by clauses.
   *
   * @param {object} [parameters.definition.dataset.filter] Has filter expression
   * to use in the report.
   *
   * @param {array} [parameters.definition.dataset.filter.and] The logical "AND"
   * expression. Must have atleast 2 items.
   *
   * @param {array} [parameters.definition.dataset.filter.or] The logical "OR"
   * expression. Must have atleast 2 items.
   *
   * @param {object} [parameters.definition.dataset.filter.not] The logical "NOT"
   * expression.
   *
   * @param {object} [parameters.definition.dataset.filter.dimension] Has
   * comparison expression for a dimension
   *
   * @param {object} [parameters.definition.dataset.filter.tag] Has comparison
   * expression for a tag
   *
   * @param {string} parameters.definition.dataset.filter.tag.name The name of
   * the column to use in comaprison.
   *
   * @param {array} parameters.definition.dataset.filter.tag.values Array of
   * values to use for comparison
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ReportConfig>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateByResourceGroupNameWithHttpOperationResponse(resourceGroupName, reportConfigName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdateByResourceGroupName(resourceGroupName, reportConfigName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * The operation to create or update a report config. Update operation requires
   * latest eTag to be set in the request mandatorily. You may obtain the latest
   * eTag by performing a get operation. Create operation does not require eTag.
   *
   * @param {string} resourceGroupName Azure Resource Group Name.
   *
   * @param {string} reportConfigName Report Config Name.
   *
   * @param {object} parameters Parameters supplied to the CreateOrUpdate Report
   * Config operation.
   *
   * @param {object} [parameters.schedule] Has schedule information for the
   * report config.
   *
   * @param {string} [parameters.schedule.status] The status of the schedule.
   * Whether active or not. If inactive, the report's scheduled execution is
   * paused. Possible values include: 'Active', 'Inactive'
   *
   * @param {string} parameters.schedule.recurrence The schedule recurrence.
   * Possible values include: 'Daily', 'Weekly', 'Monthly', 'Annually'
   *
   * @param {object} parameters.schedule.recurrencePeriod Has start and end date
   * of the recurrence. The start date must be in future. If present, the end
   * date must be greater than start date.
   *
   * @param {date} parameters.schedule.recurrencePeriod.from The start date of
   * recurrence.
   *
   * @param {date} [parameters.schedule.recurrencePeriod.to] The end date of
   * recurrence. If not provided, we default this to 10 years from the start
   * date.
   *
   * @param {string} [parameters.format] The format of the report being
   * delivered. Possible values include: 'Csv'
   *
   * @param {object} parameters.deliveryInfo Has delivery information for the
   * report config.
   *
   * @param {object} parameters.deliveryInfo.destination Has destination for the
   * report being delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.subscriptionId The
   * subscription id of the storage account where reports will be delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.resourceGroup The
   * resource group of the storage account here reports will be delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.storageAccount The
   * storage account here reports will be delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.endpoint The endpoint of
   * the storage service where reports will be delivered.
   *
   * @param {string} parameters.deliveryInfo.destination.container The name of
   * the container where reports will be uploaded.
   *
   * @param {string} parameters.deliveryInfo.destination.category The name of the
   * directory where reports will be uploaded.
   *
   * @param {object} parameters.definition Has definition for the report config.
   *
   * @param {string} parameters.definition.timeframe The time frame for pulling
   * data for the report. If custom, then a specific time period must be
   * provided. Possible values include: 'WeekToDate', 'MonthToDate',
   * 'YearToDate', 'Custom'
   *
   * @param {object} [parameters.definition.timePeriod] Has time period for
   * pulling data for the report.
   *
   * @param {date} parameters.definition.timePeriod.from The start date to pull
   * data from.
   *
   * @param {date} parameters.definition.timePeriod.to The end date to pull data
   * to.
   *
   * @param {object} [parameters.definition.dataset] Has definition for data in
   * this report config.
   *
   * @param {string} [parameters.definition.dataset.granularity] The granularity
   * of rows in the report. Possible values include: 'Daily'
   *
   * @param {object} [parameters.definition.dataset.configuration] Has
   * configuration information for the data in the report. The configuration will
   * be ignored if aggregation and grouping are provided.
   *
   * @param {array} [parameters.definition.dataset.configuration.columns] Array
   * of column names to be included in the report. Any valid report column name
   * is allowed. If not provided, then report includes all columns.
   *
   * @param {object} [parameters.definition.dataset.aggregation] Dictionary of
   * aggregation expression to use in the report. The key of each item in the
   * dictionary is the alias for the aggregated column. Report can have upto 2
   * aggregation clauses.
   *
   * @param {array} [parameters.definition.dataset.grouping] Array of group by
   * expression to use in the report. Report can have upto 2 group by clauses.
   *
   * @param {object} [parameters.definition.dataset.filter] Has filter expression
   * to use in the report.
   *
   * @param {array} [parameters.definition.dataset.filter.and] The logical "AND"
   * expression. Must have atleast 2 items.
   *
   * @param {array} [parameters.definition.dataset.filter.or] The logical "OR"
   * expression. Must have atleast 2 items.
   *
   * @param {object} [parameters.definition.dataset.filter.not] The logical "NOT"
   * expression.
   *
   * @param {object} [parameters.definition.dataset.filter.dimension] Has
   * comparison expression for a dimension
   *
   * @param {object} [parameters.definition.dataset.filter.tag] Has comparison
   * expression for a tag
   *
   * @param {string} parameters.definition.dataset.filter.tag.name The name of
   * the column to use in comaprison.
   *
   * @param {array} parameters.definition.dataset.filter.tag.values Array of
   * values to use for comparison
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ReportConfig} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ReportConfig} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdateByResourceGroupName(resourceGroupName, reportConfigName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdateByResourceGroupName(resourceGroupName, reportConfigName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdateByResourceGroupName(resourceGroupName, reportConfigName, parameters, options, optionalCallback);
    }
  }

  /**
   * The operation to delete a report config.
   *
   * @param {string} resourceGroupName Azure Resource Group Name.
   *
   * @param {string} reportConfigName Report Config Name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteByResourceGroupNameWithHttpOperationResponse(resourceGroupName, reportConfigName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteByResourceGroupName(resourceGroupName, reportConfigName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * The operation to delete a report config.
   *
   * @param {string} resourceGroupName Azure Resource Group Name.
   *
   * @param {string} reportConfigName Report Config Name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteByResourceGroupName(resourceGroupName, reportConfigName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteByResourceGroupName(resourceGroupName, reportConfigName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteByResourceGroupName(resourceGroupName, reportConfigName, options, optionalCallback);
    }
  }

}

module.exports = ReportConfigOperations;
