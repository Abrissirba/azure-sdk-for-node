/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * Lists the consumption data for subscriptionId and resource group.
 *
 * @param {string} resourceGroupName Azure Resource Group Name.
 *
 * @param {object} parameters Parameters supplied to the CreateOrUpdate Report
 * Config operation.
 *
 * @param {string} parameters.timeframe The time frame for pulling data for the
 * report. If custom, then a specific time period must be provided. Possible
 * values include: 'WeekToDate', 'MonthToDate', 'YearToDate', 'Custom'
 *
 * @param {object} [parameters.timePeriod] Has time period for pulling data for
 * the report.
 *
 * @param {date} parameters.timePeriod.from The start date to pull data from.
 *
 * @param {date} parameters.timePeriod.to The end date to pull data to.
 *
 * @param {object} [parameters.dataset] Has definition for data in this report
 * config.
 *
 * @param {string} [parameters.dataset.granularity] The granularity of rows in
 * the report. Possible values include: 'Daily'
 *
 * @param {object} [parameters.dataset.configuration] Has configuration
 * information for the data in the report. The configuration will be ignored if
 * aggregation and grouping are provided.
 *
 * @param {array} [parameters.dataset.configuration.columns] Array of column
 * names to be included in the report. Any valid report column name is allowed.
 * If not provided, then report includes all columns.
 *
 * @param {object} [parameters.dataset.aggregation] Dictionary of aggregation
 * expression to use in the report. The key of each item in the dictionary is
 * the alias for the aggregated column. Report can have upto 2 aggregation
 * clauses.
 *
 * @param {array} [parameters.dataset.grouping] Array of group by expression to
 * use in the report. Report can have upto 2 group by clauses.
 *
 * @param {object} [parameters.dataset.filter] Has filter expression to use in
 * the report.
 *
 * @param {array} [parameters.dataset.filter.and] The logical "AND" expression.
 * Must have atleast 2 items.
 *
 * @param {array} [parameters.dataset.filter.or] The logical "OR" expression.
 * Must have atleast 2 items.
 *
 * @param {object} [parameters.dataset.filter.not] The logical "NOT"
 * expression.
 *
 * @param {object} [parameters.dataset.filter.dimension] Has comparison
 * expression for a dimension
 *
 * @param {object} [parameters.dataset.filter.tag] Has comparison expression
 * for a tag
 *
 * @param {string} parameters.dataset.filter.tag.name The name of the column to
 * use in comaprison.
 *
 * @param {array} parameters.dataset.filter.tag.values Array of values to use
 * for comparison
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link InsightsListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _post(resourceGroupName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  if (parameters === null || parameters === undefined)
  {
    parameters = {};
  }
  // Validate
  try {
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Consumption/Insights';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['ReportConfigDefinition']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['InsightsListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a ResourceGroupInsights. */
class ResourceGroupInsights {
  /**
   * Create a ResourceGroupInsights.
   * @param {ConsumptionManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._post = _post;
  }

  /**
   * Lists the consumption data for subscriptionId and resource group.
   *
   * @param {string} resourceGroupName Azure Resource Group Name.
   *
   * @param {object} parameters Parameters supplied to the CreateOrUpdate Report
   * Config operation.
   *
   * @param {string} parameters.timeframe The time frame for pulling data for the
   * report. If custom, then a specific time period must be provided. Possible
   * values include: 'WeekToDate', 'MonthToDate', 'YearToDate', 'Custom'
   *
   * @param {object} [parameters.timePeriod] Has time period for pulling data for
   * the report.
   *
   * @param {date} parameters.timePeriod.from The start date to pull data from.
   *
   * @param {date} parameters.timePeriod.to The end date to pull data to.
   *
   * @param {object} [parameters.dataset] Has definition for data in this report
   * config.
   *
   * @param {string} [parameters.dataset.granularity] The granularity of rows in
   * the report. Possible values include: 'Daily'
   *
   * @param {object} [parameters.dataset.configuration] Has configuration
   * information for the data in the report. The configuration will be ignored if
   * aggregation and grouping are provided.
   *
   * @param {array} [parameters.dataset.configuration.columns] Array of column
   * names to be included in the report. Any valid report column name is allowed.
   * If not provided, then report includes all columns.
   *
   * @param {object} [parameters.dataset.aggregation] Dictionary of aggregation
   * expression to use in the report. The key of each item in the dictionary is
   * the alias for the aggregated column. Report can have upto 2 aggregation
   * clauses.
   *
   * @param {array} [parameters.dataset.grouping] Array of group by expression to
   * use in the report. Report can have upto 2 group by clauses.
   *
   * @param {object} [parameters.dataset.filter] Has filter expression to use in
   * the report.
   *
   * @param {array} [parameters.dataset.filter.and] The logical "AND" expression.
   * Must have atleast 2 items.
   *
   * @param {array} [parameters.dataset.filter.or] The logical "OR" expression.
   * Must have atleast 2 items.
   *
   * @param {object} [parameters.dataset.filter.not] The logical "NOT"
   * expression.
   *
   * @param {object} [parameters.dataset.filter.dimension] Has comparison
   * expression for a dimension
   *
   * @param {object} [parameters.dataset.filter.tag] Has comparison expression
   * for a tag
   *
   * @param {string} parameters.dataset.filter.tag.name The name of the column to
   * use in comaprison.
   *
   * @param {array} parameters.dataset.filter.tag.values Array of values to use
   * for comparison
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<InsightsListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postWithHttpOperationResponse(resourceGroupName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._post(resourceGroupName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists the consumption data for subscriptionId and resource group.
   *
   * @param {string} resourceGroupName Azure Resource Group Name.
   *
   * @param {object} parameters Parameters supplied to the CreateOrUpdate Report
   * Config operation.
   *
   * @param {string} parameters.timeframe The time frame for pulling data for the
   * report. If custom, then a specific time period must be provided. Possible
   * values include: 'WeekToDate', 'MonthToDate', 'YearToDate', 'Custom'
   *
   * @param {object} [parameters.timePeriod] Has time period for pulling data for
   * the report.
   *
   * @param {date} parameters.timePeriod.from The start date to pull data from.
   *
   * @param {date} parameters.timePeriod.to The end date to pull data to.
   *
   * @param {object} [parameters.dataset] Has definition for data in this report
   * config.
   *
   * @param {string} [parameters.dataset.granularity] The granularity of rows in
   * the report. Possible values include: 'Daily'
   *
   * @param {object} [parameters.dataset.configuration] Has configuration
   * information for the data in the report. The configuration will be ignored if
   * aggregation and grouping are provided.
   *
   * @param {array} [parameters.dataset.configuration.columns] Array of column
   * names to be included in the report. Any valid report column name is allowed.
   * If not provided, then report includes all columns.
   *
   * @param {object} [parameters.dataset.aggregation] Dictionary of aggregation
   * expression to use in the report. The key of each item in the dictionary is
   * the alias for the aggregated column. Report can have upto 2 aggregation
   * clauses.
   *
   * @param {array} [parameters.dataset.grouping] Array of group by expression to
   * use in the report. Report can have upto 2 group by clauses.
   *
   * @param {object} [parameters.dataset.filter] Has filter expression to use in
   * the report.
   *
   * @param {array} [parameters.dataset.filter.and] The logical "AND" expression.
   * Must have atleast 2 items.
   *
   * @param {array} [parameters.dataset.filter.or] The logical "OR" expression.
   * Must have atleast 2 items.
   *
   * @param {object} [parameters.dataset.filter.not] The logical "NOT"
   * expression.
   *
   * @param {object} [parameters.dataset.filter.dimension] Has comparison
   * expression for a dimension
   *
   * @param {object} [parameters.dataset.filter.tag] Has comparison expression
   * for a tag
   *
   * @param {string} parameters.dataset.filter.tag.name The name of the column to
   * use in comaprison.
   *
   * @param {array} parameters.dataset.filter.tag.values Array of values to use
   * for comparison
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {InsightsListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link InsightsListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  post(resourceGroupName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._post(resourceGroupName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._post(resourceGroupName, parameters, options, optionalCallback);
    }
  }

}

module.exports = ResourceGroupInsights;
