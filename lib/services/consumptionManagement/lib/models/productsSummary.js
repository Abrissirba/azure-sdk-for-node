/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A product summary resource.
 *
 * @extends models['Resource']
 */
class ProductsSummary extends models['Resource'] {
  /**
   * Create a ProductsSummary.
   * @member {string} [displayName] The display name of the product.
   * @member {date} [purchaseDate] The date of purchase.
   * @member {string} [productsType] The type of product.
   * @member {string} [description] Product description.
   * @member {string} [billingFrequency] Billing frequency. Possible values
   * include: 'OneTime', 'Monthly', 'UsageBased'
   * @member {number} [lastCharge] Last charge associated with the purchase.
   * @member {string} [currency] Currency Code
   * @member {string} [purchaser] Purchaser email.
   * @member {object} [subscriptionProperties] The subscription properties.
   * @member {uuid} [subscriptionProperties.subscriptionGuid] Subscription
   * guid.
   * @member {number} [subscriptionProperties.monthToDateCharges] Month to date
   * charges.
   * @member {string} [subscriptionProperties.eligibleOffer] Offer name
   * @member {string} [subscriptionProperties.status] The status of the
   * subscription. Possible values include: 'Active', 'Inactive'
   * @member {object} [reservationProperties] The reservation properties.
   * @member {number} [reservationProperties.quantity] The quantity.
   * @member {number} [reservationProperties.charge] Month to date charge.
   * @member {string} [reservationProperties.utilization] Current utilization
   * @member {string} [reservationProperties.reservationType] The status of the
   * subscription. Possible values include: 'Purchase'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ProductsSummary
   *
   * @returns {object} metadata of ProductsSummary
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ProductsSummary',
      type: {
        name: 'Composite',
        className: 'ProductsSummary',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            readOnly: true,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          displayName: {
            required: false,
            readOnly: true,
            serializedName: 'properties.displayName',
            type: {
              name: 'String'
            }
          },
          purchaseDate: {
            required: false,
            readOnly: true,
            serializedName: 'properties.purchaseDate',
            type: {
              name: 'DateTime'
            }
          },
          productsType: {
            required: false,
            readOnly: true,
            serializedName: 'properties.productsType',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            readOnly: true,
            serializedName: 'properties.description',
            type: {
              name: 'String'
            }
          },
          billingFrequency: {
            required: false,
            serializedName: 'properties.billingFrequency',
            type: {
              name: 'String'
            }
          },
          lastCharge: {
            required: false,
            readOnly: true,
            serializedName: 'properties.lastCharge',
            type: {
              name: 'Number'
            }
          },
          currency: {
            required: false,
            readOnly: true,
            serializedName: 'properties.currency',
            type: {
              name: 'String'
            }
          },
          purchaser: {
            required: false,
            readOnly: true,
            serializedName: 'properties.purchaser',
            type: {
              name: 'String'
            }
          },
          subscriptionProperties: {
            required: false,
            serializedName: 'properties.subscriptionProperties',
            type: {
              name: 'Composite',
              className: 'SubscriptionProperties'
            }
          },
          reservationProperties: {
            required: false,
            serializedName: 'properties.reservationProperties',
            type: {
              name: 'Composite',
              className: 'ReservationProperties'
            }
          }
        }
      }
    };
  }
}

module.exports = ProductsSummary;
