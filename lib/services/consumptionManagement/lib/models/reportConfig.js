/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A report config resource.
 *
 * @extends models['Resource']
 */
class ReportConfig extends models['Resource'] {
  /**
   * Create a ReportConfig.
   * @member {object} [schedule] Has schedule information for the report
   * config.
   * @member {string} [schedule.status] The status of the schedule. Whether
   * active or not. If inactive, the report's scheduled execution is paused.
   * Possible values include: 'Active', 'Inactive'
   * @member {string} [schedule.recurrence] The schedule recurrence. Possible
   * values include: 'Daily', 'Weekly', 'Monthly', 'Annually'
   * @member {object} [schedule.recurrencePeriod] Has start and end date of the
   * recurrence. The start date must be in future. If present, the end date
   * must be greater than start date.
   * @member {date} [schedule.recurrencePeriod.from] The start date of
   * recurrence.
   * @member {date} [schedule.recurrencePeriod.to] The end date of recurrence.
   * If not provided, we default this to 10 years from the start date.
   * @member {string} [format] The format of the report being delivered.
   * Possible values include: 'Csv'
   * @member {object} deliveryInfo Has delivery information for the report
   * config.
   * @member {object} [deliveryInfo.destination] Has destination for the report
   * being delivered.
   * @member {string} [deliveryInfo.destination.resourceId] The resource id of
   * the storage account where reports will be delivered.
   * @member {string} [deliveryInfo.destination.container] The name of the
   * container where reports will be uploaded.
   * @member {string} [deliveryInfo.destination.rootFolderPath] The name of the
   * directory where reports will be uploaded.
   * @member {object} definition Has definition for the report config.
   * @member {string} [definition.timeframe] The time frame for pulling data
   * for the report. If custom, then a specific time period must be provided.
   * Possible values include: 'WeekToDate', 'MonthToDate', 'YearToDate',
   * 'Custom'
   * @member {object} [definition.timePeriod] Has time period for pulling data
   * for the report.
   * @member {date} [definition.timePeriod.from] The start date to pull data
   * from.
   * @member {date} [definition.timePeriod.to] The end date to pull data to.
   * @member {object} [definition.dataset] Has definition for data in this
   * report config.
   * @member {string} [definition.dataset.granularity] The granularity of rows
   * in the report. Possible values include: 'Daily'
   * @member {object} [definition.dataset.configuration] Has configuration
   * information for the data in the report. The configuration will be ignored
   * if aggregation and grouping are provided.
   * @member {array} [definition.dataset.configuration.columns] Array of column
   * names to be included in the report. Any valid report column name is
   * allowed. If not provided, then report includes all columns.
   * @member {object} [definition.dataset.aggregation] Dictionary of
   * aggregation expression to use in the report. The key of each item in the
   * dictionary is the alias for the aggregated column. Report can have upto 2
   * aggregation clauses.
   * @member {array} [definition.dataset.grouping] Array of group by expression
   * to use in the report. Report can have upto 2 group by clauses.
   * @member {object} [definition.dataset.filter] Has filter expression to use
   * in the report.
   * @member {array} [definition.dataset.filter.and] The logical "AND"
   * expression. Must have atleast 2 items.
   * @member {array} [definition.dataset.filter.or] The logical "OR"
   * expression. Must have atleast 2 items.
   * @member {object} [definition.dataset.filter.not] The logical "NOT"
   * expression.
   * @member {object} [definition.dataset.filter.dimension] Has comparison
   * expression for a dimension
   * @member {string} [definition.dataset.filter.dimension.name] The name of
   * the column to use in comaprison.
   * @member {array} [definition.dataset.filter.dimension.values] Array of
   * values to use for comparison
   * @member {object} [definition.dataset.filter.tag] Has comparison expression
   * for a tag
   * @member {string} [definition.dataset.filter.tag.name] The name of the
   * column to use in comaprison.
   * @member {array} [definition.dataset.filter.tag.values] Array of values to
   * use for comparison
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ReportConfig
   *
   * @returns {object} metadata of ReportConfig
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ReportConfig',
      type: {
        name: 'Composite',
        className: 'ReportConfig',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            readOnly: true,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          schedule: {
            required: false,
            serializedName: 'properties.schedule',
            type: {
              name: 'Composite',
              className: 'ReportConfigSchedule'
            }
          },
          format: {
            required: false,
            serializedName: 'properties.format',
            type: {
              name: 'String'
            }
          },
          deliveryInfo: {
            required: true,
            serializedName: 'properties.deliveryInfo',
            type: {
              name: 'Composite',
              className: 'ReportConfigDeliveryInfo'
            }
          },
          definition: {
            required: true,
            serializedName: 'properties.definition',
            defaultValue: {},
            type: {
              name: 'Composite',
              className: 'ReportConfigDefinition'
            }
          }
        }
      }
    };
  }
}

module.exports = ReportConfig;
