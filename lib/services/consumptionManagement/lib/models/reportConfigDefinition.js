/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The definition of a report config.
 *
 */
class ReportConfigDefinition {
  /**
   * Create a ReportConfigDefinition.
   * @member {string} timeframe The time frame for pulling data for the report.
   * If custom, then a specific time period must be provided. Possible values
   * include: 'WeekToDate', 'MonthToDate', 'YearToDate', 'Custom'
   * @member {object} [timePeriod] Has time period for pulling data for the
   * report.
   * @member {date} [timePeriod.from] The start date to pull data from.
   * @member {date} [timePeriod.to] The end date to pull data to.
   * @member {object} [dataset] Has definition for data in this report config.
   * @member {string} [dataset.granularity] The granularity of rows in the
   * report. Possible values include: 'Daily'
   * @member {object} [dataset.configuration] Has configuration information for
   * the data in the report. The configuration will be ignored if aggregation
   * and grouping are provided.
   * @member {array} [dataset.configuration.columns] Array of column names to
   * be included in the report. Any valid report column name is allowed. If not
   * provided, then report includes all columns.
   * @member {object} [dataset.aggregation] Dictionary of aggregation
   * expression to use in the report. The key of each item in the dictionary is
   * the alias for the aggregated column. Report can have upto 2 aggregation
   * clauses.
   * @member {array} [dataset.grouping] Array of group by expression to use in
   * the report. Report can have upto 2 group by clauses.
   * @member {object} [dataset.filter] Has filter expression to use in the
   * report.
   * @member {array} [dataset.filter.and] The logical "AND" expression. Must
   * have atleast 2 items.
   * @member {array} [dataset.filter.or] The logical "OR" expression. Must have
   * atleast 2 items.
   * @member {object} [dataset.filter.not] The logical "NOT" expression.
   * @member {object} [dataset.filter.dimension] Has comparison expression for
   * a dimension
   * @member {string} [dataset.filter.dimension.name] The name of the column to
   * use in comaprison.
   * @member {array} [dataset.filter.dimension.values] Array of values to use
   * for comparison
   * @member {object} [dataset.filter.tag] Has comparison expression for a tag
   * @member {string} [dataset.filter.tag.name] The name of the column to use
   * in comaprison.
   * @member {array} [dataset.filter.tag.values] Array of values to use for
   * comparison
   */
  constructor() {
  }

  /**
   * Defines the metadata of ReportConfigDefinition
   *
   * @returns {object} metadata of ReportConfigDefinition
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ReportConfigDefinition',
      type: {
        name: 'Composite',
        className: 'ReportConfigDefinition',
        modelProperties: {
          type: {
            required: true,
            isConstant: true,
            serializedName: 'type',
            defaultValue: 'Usage',
            type: {
              name: 'String'
            }
          },
          timeframe: {
            required: true,
            serializedName: 'timeframe',
            type: {
              name: 'String'
            }
          },
          timePeriod: {
            required: false,
            serializedName: 'timePeriod',
            type: {
              name: 'Composite',
              className: 'ReportConfigTimePeriod'
            }
          },
          dataset: {
            required: false,
            serializedName: 'dataset',
            type: {
              name: 'Composite',
              className: 'ReportConfigDataset'
            }
          }
        }
      }
    };
  }
}

module.exports = ReportConfigDefinition;
