/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Current entity level details
 *
 */
class Enrollment {
  /**
   * Create a Enrollment.
   * @member {date} [startDate] Enrollment Start Date
   * @member {date} [endDate] Enrollment End Date
   * @member {string} [currency] The currency associated with enrollment
   * @member {string} [channel] The channel for Enrollment
   * @member {object} [policies] The attributes associated with legacy
   * enrollment.
   * @member {boolean} [policies.accountOwnerViewCharges] The
   * accountOwnerViewCharges flag for Enrollment
   * @member {boolean} [policies.departmentAdminViewCharges] The
   * departmentAdminViewCharges flag for Enrollment
   * @member {boolean} [policies.marketplacesEnabled] The marketplaces flag for
   * Enrollment
   * @member {boolean} [policies.reservedInstancesEnabled] The reserved
   * instances flag for Enrollment
   * @member {string} [language] The language for Enrollment
   * @member {string} [countryCode] The countryCode for Enrollment
   * @member {string} [status] Enrollment status
   * @member {string} [billingCylce] Enrollment billing cycle
   */
  constructor() {
  }

  /**
   * Defines the metadata of Enrollment
   *
   * @returns {object} metadata of Enrollment
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Enrollment',
      type: {
        name: 'Composite',
        className: 'Enrollment',
        modelProperties: {
          startDate: {
            required: false,
            readOnly: true,
            serializedName: 'startDate',
            type: {
              name: 'DateTime'
            }
          },
          endDate: {
            required: false,
            readOnly: true,
            serializedName: 'endDate',
            type: {
              name: 'DateTime'
            }
          },
          currency: {
            required: false,
            readOnly: true,
            serializedName: 'currency',
            type: {
              name: 'String'
            }
          },
          channel: {
            required: false,
            readOnly: true,
            serializedName: 'channel',
            type: {
              name: 'String'
            }
          },
          policies: {
            required: false,
            readOnly: true,
            serializedName: 'policies',
            type: {
              name: 'Composite',
              className: 'EnrollmentPolicies'
            }
          },
          language: {
            required: false,
            readOnly: true,
            serializedName: 'language',
            type: {
              name: 'String'
            }
          },
          countryCode: {
            required: false,
            readOnly: true,
            serializedName: 'countryCode',
            type: {
              name: 'String'
            }
          },
          status: {
            required: false,
            readOnly: true,
            serializedName: 'status',
            type: {
              name: 'String'
            }
          },
          billingCylce: {
            required: false,
            readOnly: true,
            serializedName: 'billingCylce',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Enrollment;
