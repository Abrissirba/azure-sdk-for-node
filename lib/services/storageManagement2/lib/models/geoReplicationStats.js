/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Statistics related to replication for storage account's Blob, Table, Queue
 * and File services. It is only available when geo-redundant replication is
 * enabled for the storage account.
 *
 */
class GeoReplicationStats {
  /**
   * Create a GeoReplicationStats.
   * @member {string} [status] The status of the secondary location. Possible
   * values are: - Live: Indicates that the secondary location is active and
   * operational. - Bootstrap: Indicates initial synchronization from the
   * primary location to the secondary location is in progress.This typically
   * occurs when replication is first enabled. - Unavailable: Indicates that
   * the secondary location is temporarily unavailable. Possible values
   * include: 'Live', 'Bootstrap', 'Unavailable'
   * @member {date} [lastSyncTime] All primary writes preceding this UTC
   * date/time value are guaranteed to be available for read operations.
   * Primary writes following this point in time may or may not be available
   * for reads. Element may be default value if value of LastSyncTime is not
   * available, this can happen if secondary is offline or we are in bootstrap.
   */
  constructor() {
  }

  /**
   * Defines the metadata of GeoReplicationStats
   *
   * @returns {object} metadata of GeoReplicationStats
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'GeoReplicationStats',
      type: {
        name: 'Composite',
        className: 'GeoReplicationStats',
        modelProperties: {
          status: {
            required: false,
            readOnly: true,
            serializedName: 'status',
            type: {
              name: 'String'
            }
          },
          lastSyncTime: {
            required: false,
            readOnly: true,
            serializedName: 'lastSyncTime',
            type: {
              name: 'DateTime'
            }
          }
        }
      }
    };
  }
}

module.exports = GeoReplicationStats;
