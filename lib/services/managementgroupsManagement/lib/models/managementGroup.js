/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The management group details.
 *
 * @extends models['BaseResource']
 */
class ManagementGroup extends models['BaseResource'] {
  /**
   * Create a ManagementGroup.
   * @property {string} [id] The fully qualified ID for the management group.
   * For example,
   * /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   * @property {string} [type] The type of the resource.  For example,
   * /providers/Microsoft.Management/managementGroups
   * @property {string} [name] The name of the management group. For example,
   * 00000000-0000-0000-0000-000000000000
   * @property {string} [tenantId] The AAD Tenant ID associated with the
   * management group. For example, 00000000-0000-0000-0000-000000000000
   * @property {string} [displayName] The friendly name of the management
   * group.
   * @property {array} [roles] The role definitions associated with the
   * management group.
   * @property {object} [details] Details.
   * @property {number} [details.version] The version number of the object.
   * @property {date} [details.updatedTime] The date and time when this object
   * was last updated.
   * @property {string} [details.updatedBy] The identity of the principal or
   * process that updated the object.
   * @property {object} [details.parent]
   * @property {string} [details.parent.id] The fully qualified ID for the
   * parent management group.  For example,
   * /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   * @property {string} [details.parent.name] The name of the parent management
   * group
   * @property {string} [details.parent.displayName] The friendly name of the
   * parent management group.
   * @property {array} [children] The list of children.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ManagementGroup
   *
   * @returns {object} metadata of ManagementGroup
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ManagementGroup',
      type: {
        name: 'Composite',
        className: 'ManagementGroup',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          tenantId: {
            required: false,
            serializedName: 'properties.tenantId',
            type: {
              name: 'String'
            }
          },
          displayName: {
            required: false,
            serializedName: 'properties.displayName',
            type: {
              name: 'String'
            }
          },
          roles: {
            required: false,
            nullable: true,
            serializedName: 'properties.roles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          details: {
            required: false,
            serializedName: 'properties.details',
            type: {
              name: 'Composite',
              className: 'ManagementGroupDetails'
            }
          },
          children: {
            required: false,
            nullable: true,
            serializedName: 'properties.children',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ManagementGroupChildInfoElementType',
                  type: {
                    name: 'Composite',
                    className: 'ManagementGroupChildInfo'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ManagementGroup;
