/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Capabilities
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface Capabilities {


    /**
     * Gets the subscription capabilities available for the specified location.
     *
     * @param {string} locationName The location name whose capabilities are
     * retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LocationCapabilities>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByLocationWithHttpOperationResponse(locationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LocationCapabilities>>;

    /**
     * Gets the subscription capabilities available for the specified location.
     *
     * @param {string} locationName The location name whose capabilities are
     * retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LocationCapabilities} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LocationCapabilities} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LocationCapabilities} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByLocation(locationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LocationCapabilities>;
    listByLocation(locationName: string, callback: ServiceCallback<models.LocationCapabilities>): void;
    listByLocation(locationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocationCapabilities>): void;
}

/**
 * @class
 * SubscriptionUsages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface SubscriptionUsages {


    /**
     * Gets all subscription usage metrics in a given location.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SubscriptionUsageListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByLocationWithHttpOperationResponse(locationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubscriptionUsageListResult>>;

    /**
     * Gets all subscription usage metrics in a given location.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SubscriptionUsageListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SubscriptionUsageListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SubscriptionUsageListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByLocation(locationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SubscriptionUsageListResult>;
    listByLocation(locationName: string, callback: ServiceCallback<models.SubscriptionUsageListResult>): void;
    listByLocation(locationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionUsageListResult>): void;


    /**
     * Gets a subscription usage metric.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} usageName Name of usage metric to return.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SubscriptionUsage>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(locationName: string, usageName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubscriptionUsage>>;

    /**
     * Gets a subscription usage metric.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} usageName Name of usage metric to return.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SubscriptionUsage} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SubscriptionUsage} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SubscriptionUsage} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(locationName: string, usageName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SubscriptionUsage>;
    get(locationName: string, usageName: string, callback: ServiceCallback<models.SubscriptionUsage>): void;
    get(locationName: string, usageName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionUsage>): void;


    /**
     * Gets all subscription usage metrics in a given location.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SubscriptionUsageListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByLocationNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubscriptionUsageListResult>>;

    /**
     * Gets all subscription usage metrics in a given location.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SubscriptionUsageListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SubscriptionUsageListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SubscriptionUsageListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByLocationNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SubscriptionUsageListResult>;
    listByLocationNext(nextPageLink: string, callback: ServiceCallback<models.SubscriptionUsageListResult>): void;
    listByLocationNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionUsageListResult>): void;
}
