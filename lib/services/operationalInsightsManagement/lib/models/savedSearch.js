/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Value object for saved search results.
 *
 * @extends models['BaseResource']
 */
class SavedSearch extends models['BaseResource'] {
  /**
   * Create a SavedSearch.
   * @property {string} [id] The id of the saved search.
   * @property {string} [name] The name of the saved search.
   * @property {string} [type] The type of the saved search.
   * @property {string} [eTag] The ETag of the saved search.
   * @property {string} category The category of the saved search. This helps
   * the user to find a saved search faster.
   * @property {string} displayName Saved search display name.
   * @property {string} query The query expression for the saved search. Please
   * see
   * https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-search-reference
   * for reference.
   * @property {number} [version] The version number of the query lanuage. The
   * current version is 2 and is the default.
   * @property {array} [tags] The tags attached to the saved search.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of SavedSearch
   *
   * @returns {object} metadata of SavedSearch
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SavedSearch',
      type: {
        name: 'Composite',
        className: 'SavedSearch',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          eTag: {
            required: false,
            serializedName: 'eTag',
            type: {
              name: 'String'
            }
          },
          category: {
            required: true,
            serializedName: 'properties.category',
            type: {
              name: 'String'
            }
          },
          displayName: {
            required: true,
            serializedName: 'properties.displayName',
            type: {
              name: 'String'
            }
          },
          query: {
            required: true,
            serializedName: 'properties.query',
            type: {
              name: 'String'
            }
          },
          version: {
            required: false,
            serializedName: 'properties.version',
            constraints: {
              InclusiveMaximum: 2,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          tags: {
            required: false,
            serializedName: 'properties.tags',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'TagElementType',
                  type: {
                    name: 'Composite',
                    className: 'Tag'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = SavedSearch;
