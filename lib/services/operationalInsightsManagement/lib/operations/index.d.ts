/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * StorageInsights
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the OperationalInsightsManagementClient.
 */
export interface StorageInsights {


    /**
     * Create or update a storage insight.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {string} storageInsightName Name of the storageInsightsConfigs
     * resource
     *
     * @param {object} parameters The parameters required to create or update a
     * storage insight.
     *
     * @param {array} [parameters.containers] The names of the blob containers that
     * the workspace should read
     *
     * @param {array} [parameters.tables] The names of the Azure tables that the
     * workspace should read
     *
     * @param {object} parameters.storageAccount The storage account connection
     * details
     *
     * @param {string} parameters.storageAccount.id The Azure Resource Manager ID
     * of the storage account resource.
     *
     * @param {string} parameters.storageAccount.key The storage account key.
     *
     * @param {string} [parameters.eTag] The ETag of the storage insight.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageInsight>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, storageInsightName: string, parameters: models.StorageInsight, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageInsight>>;

    /**
     * Create or update a storage insight.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {string} storageInsightName Name of the storageInsightsConfigs
     * resource
     *
     * @param {object} parameters The parameters required to create or update a
     * storage insight.
     *
     * @param {array} [parameters.containers] The names of the blob containers that
     * the workspace should read
     *
     * @param {array} [parameters.tables] The names of the Azure tables that the
     * workspace should read
     *
     * @param {object} parameters.storageAccount The storage account connection
     * details
     *
     * @param {string} parameters.storageAccount.id The Azure Resource Manager ID
     * of the storage account resource.
     *
     * @param {string} parameters.storageAccount.key The storage account key.
     *
     * @param {string} [parameters.eTag] The ETag of the storage insight.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageInsight} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageInsight} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageInsight} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, storageInsightName: string, parameters: models.StorageInsight, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageInsight>;
    createOrUpdate(resourceGroupName: string, workspaceName: string, storageInsightName: string, parameters: models.StorageInsight, callback: ServiceCallback<models.StorageInsight>): void;
    createOrUpdate(resourceGroupName: string, workspaceName: string, storageInsightName: string, parameters: models.StorageInsight, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageInsight>): void;


    /**
     * Gets a storage insight instance.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {string} storageInsightName Name of the storageInsightsConfigs
     * resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageInsight>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, storageInsightName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageInsight>>;

    /**
     * Gets a storage insight instance.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {string} storageInsightName Name of the storageInsightsConfigs
     * resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageInsight} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageInsight} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageInsight} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, workspaceName: string, storageInsightName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageInsight>;
    get(resourceGroupName: string, workspaceName: string, storageInsightName: string, callback: ServiceCallback<models.StorageInsight>): void;
    get(resourceGroupName: string, workspaceName: string, storageInsightName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageInsight>): void;


    /**
     * Deletes a storageInsightsConfigs resource
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {string} storageInsightName Name of the storageInsightsConfigs
     * resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, storageInsightName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a storageInsightsConfigs resource
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {string} storageInsightName Name of the storageInsightsConfigs
     * resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, workspaceName: string, storageInsightName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, workspaceName: string, storageInsightName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, workspaceName: string, storageInsightName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists the storage insight instances within a workspace
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageInsightListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByWorkspaceWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageInsightListResult>>;

    /**
     * Lists the storage insight instances within a workspace
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageInsightListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageInsightListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageInsightListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageInsightListResult>;
    listByWorkspace(resourceGroupName: string, workspaceName: string, callback: ServiceCallback<models.StorageInsightListResult>): void;
    listByWorkspace(resourceGroupName: string, workspaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageInsightListResult>): void;


    /**
     * Lists the storage insight instances within a workspace
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageInsightListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByWorkspaceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageInsightListResult>>;

    /**
     * Lists the storage insight instances within a workspace
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageInsightListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageInsightListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageInsightListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByWorkspaceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageInsightListResult>;
    listByWorkspaceNext(nextPageLink: string, callback: ServiceCallback<models.StorageInsightListResult>): void;
    listByWorkspaceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageInsightListResult>): void;
}

/**
 * @class
 * Workspaces
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the OperationalInsightsManagementClient.
 */
export interface Workspaces {


    /**
     * Get a list of workspaces which the current user has administrator privileges
     * and are not associated with an Azure Subscription. The subscriptionId
     * parameter in the Url is ignored.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listLinkTargetsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LinkTarget[]>>;

    /**
     * Get a list of workspaces which the current user has administrator privileges
     * and are not associated with an Azure Subscription. The subscriptionId
     * parameter in the Url is ignored.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listLinkTargets(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LinkTarget[]>;
    listLinkTargets(callback: ServiceCallback<models.LinkTarget[]>): void;
    listLinkTargets(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LinkTarget[]>): void;


    /**
     * Gets the schema for a given workspace.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SearchGetSchemaResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSchemaWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SearchGetSchemaResponse>>;

    /**
     * Gets the schema for a given workspace.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SearchGetSchemaResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SearchGetSchemaResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SearchGetSchemaResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSchema(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SearchGetSchemaResponse>;
    getSchema(resourceGroupName: string, workspaceName: string, callback: ServiceCallback<models.SearchGetSchemaResponse>): void;
    getSchema(resourceGroupName: string, workspaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SearchGetSchemaResponse>): void;


    /**
     * Submit a search for a given workspace. The response will contain an id to
     * track the search. User can use the id to poll the search status and get the
     * full search result later if the search takes long time to finish.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {object} parameters The parameters required to execute a search
     * query.
     *
     * @param {number} [parameters.top] The number to get from the top.
     *
     * @param {object} [parameters.highlight] The highlight that looks for all
     * occurences of a string.
     *
     * @param {string} [parameters.highlight.pre] The string that is put before a
     * matched result.
     *
     * @param {string} [parameters.highlight.post] The string that is put after a
     * matched result.
     *
     * @param {string} parameters.query The query to search.
     *
     * @param {date} [parameters.start] The start date filter, so the only query
     * results returned are after this date.
     *
     * @param {date} [parameters.end] The end date filter, so the only query
     * results returned are before this date.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SearchResultsResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSearchResultsWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, parameters: models.SearchParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SearchResultsResponse>>;

    /**
     * Submit a search for a given workspace. The response will contain an id to
     * track the search. User can use the id to poll the search status and get the
     * full search result later if the search takes long time to finish.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {object} parameters The parameters required to execute a search
     * query.
     *
     * @param {number} [parameters.top] The number to get from the top.
     *
     * @param {object} [parameters.highlight] The highlight that looks for all
     * occurences of a string.
     *
     * @param {string} [parameters.highlight.pre] The string that is put before a
     * matched result.
     *
     * @param {string} [parameters.highlight.post] The string that is put after a
     * matched result.
     *
     * @param {string} parameters.query The query to search.
     *
     * @param {date} [parameters.start] The start date filter, so the only query
     * results returned are after this date.
     *
     * @param {date} [parameters.end] The end date filter, so the only query
     * results returned are before this date.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SearchResultsResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SearchResultsResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SearchResultsResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSearchResults(resourceGroupName: string, workspaceName: string, parameters: models.SearchParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SearchResultsResponse>;
    getSearchResults(resourceGroupName: string, workspaceName: string, parameters: models.SearchParameters, callback: ServiceCallback<models.SearchResultsResponse>): void;
    getSearchResults(resourceGroupName: string, workspaceName: string, parameters: models.SearchParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SearchResultsResponse>): void;


    /**
     * Gets updated search results for a given search query.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {string} id The id of the search that will have results updated. You
     * can get the id from the response of the GetResults call.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SearchResultsResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateSearchResultsWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SearchResultsResponse>>;

    /**
     * Gets updated search results for a given search query.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {string} id The id of the search that will have results updated. You
     * can get the id from the response of the GetResults call.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SearchResultsResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SearchResultsResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SearchResultsResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateSearchResults(resourceGroupName: string, workspaceName: string, id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SearchResultsResponse>;
    updateSearchResults(resourceGroupName: string, workspaceName: string, id: string, callback: ServiceCallback<models.SearchResultsResponse>): void;
    updateSearchResults(resourceGroupName: string, workspaceName: string, id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SearchResultsResponse>): void;


    /**
     * Purges data in an Log Analytics workspace by a set of user-defined filters.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {object} body Describes the body of a request to purge data in a
     * single table of an Log Analytics Workspace
     *
     * @param {string} body.table Table from which to purge data.
     *
     * @param {array} body.filters The set of columns and filters (queries) to run
     * over them to purge the resulting data.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkspacePurgeResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    purgeWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, body: models.WorkspacePurgeBody, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkspacePurgeResponse>>;

    /**
     * Purges data in an Log Analytics workspace by a set of user-defined filters.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {object} body Describes the body of a request to purge data in a
     * single table of an Log Analytics Workspace
     *
     * @param {string} body.table Table from which to purge data.
     *
     * @param {array} body.filters The set of columns and filters (queries) to run
     * over them to purge the resulting data.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkspacePurgeResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkspacePurgeResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkspacePurgeResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    purge(resourceGroupName: string, workspaceName: string, body: models.WorkspacePurgeBody, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkspacePurgeResponse>;
    purge(resourceGroupName: string, workspaceName: string, body: models.WorkspacePurgeBody, callback: ServiceCallback<models.WorkspacePurgeResponse>): void;
    purge(resourceGroupName: string, workspaceName: string, body: models.WorkspacePurgeBody, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkspacePurgeResponse>): void;


    /**
     * Gets status of an ongoing purge operation.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkspacePurgeStatusResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPurgeStatusWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkspacePurgeStatusResponse>>;

    /**
     * Gets status of an ongoing purge operation.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkspacePurgeStatusResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkspacePurgeStatusResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkspacePurgeStatusResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPurgeStatus(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkspacePurgeStatusResponse>;
    getPurgeStatus(resourceGroupName: string, workspaceName: string, callback: ServiceCallback<models.WorkspacePurgeStatusResponse>): void;
    getPurgeStatus(resourceGroupName: string, workspaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkspacePurgeStatusResponse>): void;


    /**
     * Gets the shared keys for a Log Analytics Workspace. These keys are used to
     * connect Microsoft Operational Insights agents to the workspace.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SharedKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeysWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SharedKeys>>;

    /**
     * Gets the shared keys for a Log Analytics Workspace. These keys are used to
     * connect Microsoft Operational Insights agents to the workspace.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SharedKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SharedKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SharedKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeys(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SharedKeys>;
    listKeys(resourceGroupName: string, workspaceName: string, callback: ServiceCallback<models.SharedKeys>): void;
    listKeys(resourceGroupName: string, workspaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedKeys>): void;


    /**
     * Regenerates the shared keys for a Log Analytics Workspace. These keys are
     * used to connect Microsoft Operational Insights agents to the workspace.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SharedKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateSharedKeysWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SharedKeys>>;

    /**
     * Regenerates the shared keys for a Log Analytics Workspace. These keys are
     * used to connect Microsoft Operational Insights agents to the workspace.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SharedKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SharedKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SharedKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateSharedKeys(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SharedKeys>;
    regenerateSharedKeys(resourceGroupName: string, workspaceName: string, callback: ServiceCallback<models.SharedKeys>): void;
    regenerateSharedKeys(resourceGroupName: string, workspaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedKeys>): void;


    /**
     * Submit a search for a given workspace. The response will contain an id to
     * track the search. User can use the id to poll the search status and get the
     * full search result later if the search takes long time to finish.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {object} parameters The parameters required to execute a search
     * query.
     *
     * @param {number} [parameters.top] The number to get from the top.
     *
     * @param {object} [parameters.highlight] The highlight that looks for all
     * occurences of a string.
     *
     * @param {string} [parameters.highlight.pre] The string that is put before a
     * matched result.
     *
     * @param {string} [parameters.highlight.post] The string that is put after a
     * matched result.
     *
     * @param {string} parameters.query The query to search.
     *
     * @param {date} [parameters.start] The start date filter, so the only query
     * results returned are after this date.
     *
     * @param {date} [parameters.end] The end date filter, so the only query
     * results returned are before this date.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SearchResultsResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginGetSearchResultsWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, parameters: models.SearchParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SearchResultsResponse>>;

    /**
     * Submit a search for a given workspace. The response will contain an id to
     * track the search. User can use the id to poll the search status and get the
     * full search result later if the search takes long time to finish.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {object} parameters The parameters required to execute a search
     * query.
     *
     * @param {number} [parameters.top] The number to get from the top.
     *
     * @param {object} [parameters.highlight] The highlight that looks for all
     * occurences of a string.
     *
     * @param {string} [parameters.highlight.pre] The string that is put before a
     * matched result.
     *
     * @param {string} [parameters.highlight.post] The string that is put after a
     * matched result.
     *
     * @param {string} parameters.query The query to search.
     *
     * @param {date} [parameters.start] The start date filter, so the only query
     * results returned are after this date.
     *
     * @param {date} [parameters.end] The end date filter, so the only query
     * results returned are before this date.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SearchResultsResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SearchResultsResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SearchResultsResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginGetSearchResults(resourceGroupName: string, workspaceName: string, parameters: models.SearchParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SearchResultsResponse>;
    beginGetSearchResults(resourceGroupName: string, workspaceName: string, parameters: models.SearchParameters, callback: ServiceCallback<models.SearchResultsResponse>): void;
    beginGetSearchResults(resourceGroupName: string, workspaceName: string, parameters: models.SearchParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SearchResultsResponse>): void;
}

/**
 * @class
 * SavedSearches
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the OperationalInsightsManagementClient.
 */
export interface SavedSearches {


    /**
     * Deletes the specified saved search in a given workspace.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {string} savedSearchId The id of the saved search.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, savedSearchId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified saved search in a given workspace.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {string} savedSearchId The id of the saved search.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, workspaceName: string, savedSearchId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, workspaceName: string, savedSearchId: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, workspaceName: string, savedSearchId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a saved search for a given workspace.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {string} savedSearchId The id of the saved search.
     *
     * @param {object} parameters The parameters required to save a search.
     *
     * @param {string} [parameters.eTag] The ETag of the saved search.
     *
     * @param {string} parameters.category The category of the saved search. This
     * helps the user to find a saved search faster.
     *
     * @param {string} parameters.displayName Saved search display name.
     *
     * @param {string} parameters.query The query expression for the saved search.
     * Please see
     * https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-search-reference
     * for reference.
     *
     * @param {number} [parameters.version] The version number of the query
     * lanuage. The current version is 2 and is the default.
     *
     * @param {array} [parameters.tags] The tags attached to the saved search.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SavedSearch>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, savedSearchId: string, parameters: models.SavedSearch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SavedSearch>>;

    /**
     * Creates or updates a saved search for a given workspace.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {string} savedSearchId The id of the saved search.
     *
     * @param {object} parameters The parameters required to save a search.
     *
     * @param {string} [parameters.eTag] The ETag of the saved search.
     *
     * @param {string} parameters.category The category of the saved search. This
     * helps the user to find a saved search faster.
     *
     * @param {string} parameters.displayName Saved search display name.
     *
     * @param {string} parameters.query The query expression for the saved search.
     * Please see
     * https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-search-reference
     * for reference.
     *
     * @param {number} [parameters.version] The version number of the query
     * lanuage. The current version is 2 and is the default.
     *
     * @param {array} [parameters.tags] The tags attached to the saved search.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SavedSearch} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SavedSearch} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SavedSearch} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, savedSearchId: string, parameters: models.SavedSearch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SavedSearch>;
    createOrUpdate(resourceGroupName: string, workspaceName: string, savedSearchId: string, parameters: models.SavedSearch, callback: ServiceCallback<models.SavedSearch>): void;
    createOrUpdate(resourceGroupName: string, workspaceName: string, savedSearchId: string, parameters: models.SavedSearch, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SavedSearch>): void;


    /**
     * Gets the specified saved search for a given workspace.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {string} savedSearchId The id of the saved search.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SavedSearch>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, savedSearchId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SavedSearch>>;

    /**
     * Gets the specified saved search for a given workspace.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {string} savedSearchId The id of the saved search.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SavedSearch} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SavedSearch} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SavedSearch} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, workspaceName: string, savedSearchId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SavedSearch>;
    get(resourceGroupName: string, workspaceName: string, savedSearchId: string, callback: ServiceCallback<models.SavedSearch>): void;
    get(resourceGroupName: string, workspaceName: string, savedSearchId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SavedSearch>): void;


    /**
     * Gets the saved searches for a given Log Analytics Workspace
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SavedSearchesListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByWorkspaceWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SavedSearchesListResult>>;

    /**
     * Gets the saved searches for a given Log Analytics Workspace
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SavedSearchesListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SavedSearchesListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SavedSearchesListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SavedSearchesListResult>;
    listByWorkspace(resourceGroupName: string, workspaceName: string, callback: ServiceCallback<models.SavedSearchesListResult>): void;
    listByWorkspace(resourceGroupName: string, workspaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SavedSearchesListResult>): void;


    /**
     * Gets the results from a saved search for a given workspace.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {string} savedSearchId The id of the saved search.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SearchResultsResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getResultsWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, savedSearchId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SearchResultsResponse>>;

    /**
     * Gets the results from a saved search for a given workspace.
     *
     * @param {string} resourceGroupName The Resource Group name.
     *
     * @param {string} workspaceName The Log Analytics Workspace name.
     *
     * @param {string} savedSearchId The id of the saved search.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SearchResultsResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SearchResultsResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SearchResultsResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getResults(resourceGroupName: string, workspaceName: string, savedSearchId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SearchResultsResponse>;
    getResults(resourceGroupName: string, workspaceName: string, savedSearchId: string, callback: ServiceCallback<models.SearchResultsResponse>): void;
    getResults(resourceGroupName: string, workspaceName: string, savedSearchId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SearchResultsResponse>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the OperationalInsightsManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available OperationalInsights Rest API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available OperationalInsights Rest API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}
