/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * P2SVpnGateway Resource.
 *
 * @extends models['Resource']
 */
class P2SVpnGateway extends models['Resource'] {
  /**
   * Create a P2SVpnGateway.
   * @member {object} [virtualHub] The VirtualHub to which the gateway belongs
   * @member {string} [virtualHub.id] Resource ID.
   * @member {string} [provisioningState] The provisioning state of the
   * resource. Possible values include: 'Succeeded', 'Updating', 'Deleting',
   * 'Failed'
   * @member {number} [vpnGatewayScaleUnit] The scale unit for this p2s vpn
   * gateway.
   * @member {object} [p2SVpnServerConfiguration] The P2SVpnServerConfiguration
   * to which the p2sVpnGateway is attached to.
   * @member {array} [p2SVpnServerConfiguration.vpnProtocols] vpnProtocols for
   * the P2SVpnServerConfiguration.
   * @member {array}
   * [p2SVpnServerConfiguration.p2SVpnServerConfigVpnClientRootCertificates]
   * VPN client root certificate of P2SVpnServerConfiguration.
   * @member {array}
   * [p2SVpnServerConfiguration.p2SVpnServerConfigVpnClientRevokedCertificates]
   * VPN client revoked certificate of P2SVpnServerConfiguration.
   * @member {array}
   * [p2SVpnServerConfiguration.p2SVpnServerConfigRadiusServerRootCertificates]
   * Radius Server root certificate of P2SVpnServerConfiguration.
   * @member {array}
   * [p2SVpnServerConfiguration.p2SVpnServerConfigRadiusClientRootCertificates]
   * Radius client root certificate of P2SVpnServerConfiguration.
   * @member {array} [p2SVpnServerConfiguration.vpnClientIpsecPolicies]
   * VpnClientIpsecPolicies for P2SVpnServerConfiguration.
   * @member {string} [p2SVpnServerConfiguration.radiusServerAddress] The
   * radius server address property of the P2SVpnServerConfiguration resource
   * for point to site client connection.
   * @member {string} [p2SVpnServerConfiguration.radiusServerSecret] The radius
   * secret property of the P2SVpnServerConfiguration resource for for point to
   * site client connection.
   * @member {array} [p2SVpnServerConfiguration.p2SVpnGateways]
   * @member {string} [p2SVpnServerConfiguration.name] The name of the resource
   * that is unique within a resource group. This name can be used to access
   * the resource.
   * @member {string} [p2SVpnServerConfiguration.etag] Gets a unique read-only
   * string that changes whenever the resource is updated.
   * @member {object} [vpnClientAddressPool] The reference of the address space
   * resource which represents Address space for P2S VpnClient.
   * @member {array} [vpnClientAddressPool.addressPrefixes] A list of address
   * blocks reserved for this virtual network in CIDR notation.
   * @member {array} [vpnClientConnectionHealth] Collection of the all P2S
   * vpnclients' connection health status.
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of P2SVpnGateway
   *
   * @returns {object} metadata of P2SVpnGateway
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'P2SVpnGateway',
      type: {
        name: 'Composite',
        className: 'P2SVpnGateway',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          virtualHub: {
            required: false,
            serializedName: 'properties.virtualHub',
            type: {
              name: 'Composite',
              className: 'SubResource'
            }
          },
          provisioningState: {
            required: false,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          vpnGatewayScaleUnit: {
            required: false,
            serializedName: 'properties.vpnGatewayScaleUnit',
            type: {
              name: 'Number'
            }
          },
          p2SVpnServerConfiguration: {
            required: false,
            serializedName: 'properties.p2SVpnServerConfiguration',
            type: {
              name: 'Composite',
              className: 'P2SVpnServerConfiguration'
            }
          },
          vpnClientAddressPool: {
            required: false,
            serializedName: 'properties.vpnClientAddressPool',
            type: {
              name: 'Composite',
              className: 'AddressSpace'
            }
          },
          vpnClientConnectionHealth: {
            required: false,
            readOnly: true,
            serializedName: 'properties.vpnClientConnectionHealth',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'VpnClientConnectionHealthElementType',
                  type: {
                    name: 'Composite',
                    className: 'VpnClientConnectionHealth'
                  }
              }
            }
          },
          etag: {
            required: false,
            readOnly: true,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = P2SVpnGateway;
