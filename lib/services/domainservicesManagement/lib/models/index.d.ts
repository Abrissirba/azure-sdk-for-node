/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource } from 'ms-rest-azure';
import { CloudError } from 'ms-rest-azure';
import * as moment from 'moment';

export { BaseResource } from 'ms-rest-azure';
export { CloudError } from 'ms-rest-azure';


/**
 * @class
 * Initializes a new instance of the Resource class.
 * @constructor
 * The Resource model definition.
 *
 * @property {string} [id] Resource Id
 * @property {string} [name] Resource name
 * @property {string} [type] Resource type
 * @property {string} [location] Resource location
 * @property {object} [tags] Resource tags
 * @property {string} [etag] Resource etag
 */
export interface Resource extends BaseResource {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
  location?: string;
  tags?: { [propertyName: string]: string };
  etag?: string;
}

/**
 * @class
 * Initializes a new instance of the LdapsSettings class.
 * @constructor
 * Secure LDAP Settings
 *
 * @property {string} [ldaps] A flag to determine whether or not Secure LDAP is
 * enabled or disabled. Possible values include: 'Enabled', 'Disabled'
 * @property {string} [pfxCertificate] The certificate required to configure
 * Secure LDAP. The parameter passed here should be a base64encoded
 * representation of the certificate pfx file.
 * @property {string} [pfxCertificatePassword] The password to decrypt the
 * provided Secure LDAP certificate pfx file.
 * @property {string} [publicCertificate] Public certificate used to configure
 * secure ldap.
 * @property {string} [certificateThumbprint] Thumbprint of configure ldaps
 * certificate.
 * @property {date} [certificateNotAfter] NotAfter DateTime of configure ldaps
 * certificate.
 * @property {string} [externalAccess] A flag to determine whether or not
 * Secure LDAP access over the internet is enabled or disabled. Possible values
 * include: 'Enabled', 'Disabled'
 * @property {string} [externalAccessIpAddress] External access ip address.
 */
export interface LdapsSettings {
  ldaps?: string;
  pfxCertificate?: string;
  pfxCertificatePassword?: string;
  readonly publicCertificate?: string;
  readonly certificateThumbprint?: string;
  readonly certificateNotAfter?: Date;
  externalAccess?: string;
  readonly externalAccessIpAddress?: string;
}

/**
 * @class
 * Initializes a new instance of the HealthMonitor class.
 * @constructor
 * Health Monitor Description
 *
 * @property {string} [id] Health Monitor Id
 * @property {string} [name] Health Monitor Name
 * @property {string} [details] Health Monitor Details
 */
export interface HealthMonitor {
  readonly id?: string;
  readonly name?: string;
  readonly details?: string;
}

/**
 * @class
 * Initializes a new instance of the HealthAlert class.
 * @constructor
 * Health Alert Description
 *
 * @property {string} [id] Health Alert Id
 * @property {string} [name] Health Alert Name
 * @property {string} [issue] Health Alert Issue
 * @property {string} [severity] Health Alert Severity
 * @property {date} [raised] Health Alert Raised DateTime
 * @property {date} [lastDetected] Health Alert Last Detected DateTime
 * @property {string} [resolutionUri] Health Alert TSG Link
 */
export interface HealthAlert {
  readonly id?: string;
  readonly name?: string;
  readonly issue?: string;
  readonly severity?: string;
  readonly raised?: Date;
  readonly lastDetected?: Date;
  readonly resolutionUri?: string;
}

/**
 * @class
 * Initializes a new instance of the NotificationSettings class.
 * @constructor
 * Settings for notification
 *
 * @property {string} [notifyGlobalAdmins] Should global admins be notified.
 * Possible values include: 'Enabled', 'Disabled'
 * @property {string} [notifyDcAdmins] Should domain controller admins be
 * notified. Possible values include: 'Enabled', 'Disabled'
 * @property {array} [additionalRecipients] The list of additional recipients
 */
export interface NotificationSettings {
  notifyGlobalAdmins?: string;
  notifyDcAdmins?: string;
  additionalRecipients?: string[];
}

/**
 * @class
 * Initializes a new instance of the DomainSecuritySettings class.
 * @constructor
 * Domain Security Settings
 *
 * @property {string} [ntlmV1] A flag to determine whether or not NtlmV1 is
 * enabled or disabled. Possible values include: 'Enabled', 'Disabled'
 * @property {string} [tlsV1] A flag to determine whether or not TlsV1 is
 * enabled or disabled. Possible values include: 'Enabled', 'Disabled'
 * @property {string} [syncNtlmPasswords] A flag to determine whether or not
 * SyncNtlmPasswords is enabled or disabled. Possible values include:
 * 'Enabled', 'Disabled'
 */
export interface DomainSecuritySettings {
  ntlmV1?: string;
  tlsV1?: string;
  syncNtlmPasswords?: string;
}

/**
 * @class
 * Initializes a new instance of the DomainService class.
 * @constructor
 * Domain service.
 *
 * @property {string} [tenantId] Azure Active Directory tenant id
 * @property {string} [domainName] The name of the Azure domain that the user
 * would like to deploy Domain Services to.
 * @property {string} [vnetSiteId] Virtual network site id
 * @property {string} [subnetId] The name of the virtual network that Domain
 * Services will be deployed on. The id of the subnet that Domain Services will
 * be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
 * @property {object} [ldapsSettings] Secure LDAP Settings
 * @property {string} [ldapsSettings.ldaps] A flag to determine whether or not
 * Secure LDAP is enabled or disabled. Possible values include: 'Enabled',
 * 'Disabled'
 * @property {string} [ldapsSettings.pfxCertificate] The certificate required
 * to configure Secure LDAP. The parameter passed here should be a
 * base64encoded representation of the certificate pfx file.
 * @property {string} [ldapsSettings.pfxCertificatePassword] The password to
 * decrypt the provided Secure LDAP certificate pfx file.
 * @property {string} [ldapsSettings.publicCertificate] Public certificate used
 * to configure secure ldap.
 * @property {string} [ldapsSettings.certificateThumbprint] Thumbprint of
 * configure ldaps certificate.
 * @property {date} [ldapsSettings.certificateNotAfter] NotAfter DateTime of
 * configure ldaps certificate.
 * @property {string} [ldapsSettings.externalAccess] A flag to determine
 * whether or not Secure LDAP access over the internet is enabled or disabled.
 * Possible values include: 'Enabled', 'Disabled'
 * @property {string} [ldapsSettings.externalAccessIpAddress] External access
 * ip address.
 * @property {date} [healthLastEvaluated] Last domain evaluation run DateTime
 * @property {array} [healthMonitors] List of Domain Health Monitors
 * @property {array} [healthAlerts] List of Domain Health Alerts
 * @property {object} [notificationSettings] Notification Settings
 * @property {string} [notificationSettings.notifyGlobalAdmins] Should global
 * admins be notified. Possible values include: 'Enabled', 'Disabled'
 * @property {string} [notificationSettings.notifyDcAdmins] Should domain
 * controller admins be notified. Possible values include: 'Enabled',
 * 'Disabled'
 * @property {array} [notificationSettings.additionalRecipients] The list of
 * additional recipients
 * @property {object} [domainSecuritySettings] DomainSecurity Settings
 * @property {string} [domainSecuritySettings.ntlmV1] A flag to determine
 * whether or not NtlmV1 is enabled or disabled. Possible values include:
 * 'Enabled', 'Disabled'
 * @property {string} [domainSecuritySettings.tlsV1] A flag to determine
 * whether or not TlsV1 is enabled or disabled. Possible values include:
 * 'Enabled', 'Disabled'
 * @property {string} [domainSecuritySettings.syncNtlmPasswords] A flag to
 * determine whether or not SyncNtlmPasswords is enabled or disabled. Possible
 * values include: 'Enabled', 'Disabled'
 * @property {string} [filteredSync] Enabled or Disabled flag to turn on
 * Group-based filtered sync. Possible values include: 'Enabled', 'Disabled'
 * @property {array} [domainControllerIpAddress] List of Domain Controller IP
 * Address
 * @property {string} [serviceStatus] Status of Domain Service instance
 * @property {string} [provisioningState] the current deployment or
 * provisioning state, which only appears in the response.
 */
export interface DomainService extends Resource {
  readonly tenantId?: string;
  domainName?: string;
  readonly vnetSiteId?: string;
  subnetId?: string;
  ldapsSettings?: LdapsSettings;
  readonly healthLastEvaluated?: Date;
  readonly healthMonitors?: HealthMonitor[];
  readonly healthAlerts?: HealthAlert[];
  notificationSettings?: NotificationSettings;
  domainSecuritySettings?: DomainSecuritySettings;
  filteredSync?: string;
  readonly domainControllerIpAddress?: string[];
  readonly serviceStatus?: string;
  readonly provisioningState?: string;
}

/**
 * @class
 * Initializes a new instance of the OperationDisplayInfo class.
 * @constructor
 * The operation supported by Domain Services.
 *
 * @property {string} [description] The description of the operation.
 * @property {string} [operation] The action that users can perform, based on
 * their permission level.
 * @property {string} [provider] Service provider: Domain Services.
 * @property {string} [resource] Resource on which the operation is performed.
 */
export interface OperationDisplayInfo {
  description?: string;
  operation?: string;
  provider?: string;
  resource?: string;
}

/**
 * @class
 * Initializes a new instance of the OperationEntity class.
 * @constructor
 * The operation supported by Domain Services.
 *
 * @property {string} [name] Operation name: {provider}/{resource}/{operation}.
 * @property {object} [display] The operation supported by Domain Services.
 * @property {string} [display.description] The description of the operation.
 * @property {string} [display.operation] The action that users can perform,
 * based on their permission level.
 * @property {string} [display.provider] Service provider: Domain Services.
 * @property {string} [display.resource] Resource on which the operation is
 * performed.
 * @property {string} [origin] The origin of the operation.
 */
export interface OperationEntity {
  name?: string;
  display?: OperationDisplayInfo;
  origin?: string;
}


/**
 * @class
 * Initializes a new instance of the OperationEntityListResult class.
 * @constructor
 * The list of domain service operation response.
 *
 * @property {string} [nextLink] The continuation token for the next page of
 * results.
 */
export interface OperationEntityListResult extends Array<OperationEntity> {
  readonly nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the DomainServiceListResult class.
 * @constructor
 * The response from the List Domain Services operation.
 *
 * @property {string} [nextLink] The continuation token for the next page of
 * results.
 */
export interface DomainServiceListResult extends Array<DomainService> {
  readonly nextLink?: string;
}
