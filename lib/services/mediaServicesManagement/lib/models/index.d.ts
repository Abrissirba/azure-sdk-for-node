/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

/**
 * The properties for a Media Services REST API endpoint.
 */
export interface ApiEndpoint {
  /**
   * The Media Services REST endpoint.
   */
  endpoint?: string;
  /**
   * The version of Media Services REST API.
   */
  majorVersion?: string;
}

/**
 * The error returned from a failed Media Services REST API call.
 */
export interface ApiError {
  /**
   * Error code.
   */
  code?: string;
  /**
   * Error message.
   */
  message?: string;
}

/**
 * The request body for CheckNameAvailability API.
 */
export interface CheckNameAvailabilityInput {
  /**
   * The name of the resource. A name must be globally unique.
   */
  name: string;
}

/**
 * The response body for CheckNameAvailability API.
 */
export interface CheckNameAvailabilityOutput {
  /**
   * Specifies if the name is available.
   */
  nameAvailable?: boolean;
  /**
   * Specifies the reason if the name is not available. Possible values include: 'None', 'Invalid',
   * 'AlreadyExists'
   */
  reason?: string;
  /**
   * Specifies the detailed reason if the name is not available.
   */
  message?: string;
}

/**
 * The properties of a storage account associated with this resource.
 */
export interface StorageAccount {
  /**
   * The id of the storage account resource. Media Services relies on tables and queues as well as
   * blobs, so the primary storage account must be a Standard Storage account (either
   * Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as
   * secondary storage accounts (isPrimary false).
   */
  id: string;
  /**
   * Is this storage account resource the primary storage account for the Media Service resource.
   * Blob only storage must set this to false.
   */
  isPrimary: boolean;
}

/**
 * The Azure Resource Manager resource.
 */
export interface Resource extends BaseResource {
  /**
   * The id of the resource.
   */
  readonly id?: string;
  /**
   * The name of the resource.
   */
  readonly name?: string;
  /**
   * The type of the resource
   */
  readonly type?: string;
  /**
   * The geographic location of the resource. This must be one of the supported and registered
   * Azure Geo Regions (for example, West US, East US, Southeast Asia, and so forth).
   */
  location?: string;
  /**
   * Tags to help categorize the resource in the Azure portal.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The properties of a Media Service resource.
 */
export interface MediaService extends Resource {
  /**
   * Read-only property that lists the Media Services REST API endpoints for this resource. If
   * supplied on a PUT or PATCH, the value will be ignored.
   */
  readonly apiEndpoints?: ApiEndpoint[];
  /**
   * The storage accounts for this resource.
   */
  storageAccounts?: StorageAccount[];
}

/**
 * The request body for a RegenerateKey API.
 */
export interface RegenerateKeyInput {
  /**
   * The keyType indicating which key you want to regenerate, Primary or Secondary. Possible values
   * include: 'Primary', 'Secondary'
   */
  keyType: string;
}

/**
 * The response body for a RegenerateKey API.
 */
export interface RegenerateKeyOutput {
  /**
   * The new value of either the primary or secondary key.
   */
  key?: string;
}

/**
 * The response body for a ListKeys API.
 */
export interface ServiceKeys {
  /**
   * The primary authorization endpoint.
   */
  primaryAuthEndpoint?: string;
  /**
   * The secondary authorization endpoint.
   */
  secondaryAuthEndpoint?: string;
  /**
   * The primary key for the Media Service resource.
   */
  primaryKey?: string;
  /**
   * The secondary key for the Media Service resource.
   */
  secondaryKey?: string;
  /**
   * The authorization scope.
   */
  scope?: string;
}

/**
 * The request  body for a SyncStorageKeys API.
 */
export interface SyncStorageKeysInput {
  /**
   * The id of the storage account resource.
   */
  id: string;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.Media
   */
  readonly provider?: string;
  /**
   * Resource on which the operation is performed: Invoice, etc.
   */
  readonly resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   */
  readonly operation?: string;
}

/**
 * A Media Services REST API operation
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  readonly name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplay;
}

/**
 * Result of the request to list Media Services operations.
 */
export interface OperationListResult {
  /**
   * List of Media Services operations supported by the Microsoft.Media resource provider.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  readonly nextLink?: string;
}

/**
 * The collection of Media Service resources.
 */
export interface MediaServiceCollection extends Array<MediaService> {
}
