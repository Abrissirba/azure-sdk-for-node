/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A metric emitted by service.
 *
 */
class Metric {
  /**
   * Create a Metric.
   * @member {string} [name] The metric name.
   * @member {string} [displayName] The metric display name.
   * @member {string} [displayDescription] The metric display description.
   * @member {string} unit The metric unit. Possible values include: 'Bytes',
   * 'Count', 'Milliseconds'
   * @member {string} aggregationType The metric aggregation type. Possible
   * values include: 'Average', 'Count', 'Total'
   * @member {array} [dimensions] The metric dimensions.
   */
  constructor() {
  }

  /**
   * Defines the metadata of Metric
   *
   * @returns {object} metadata of Metric
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Metric',
      type: {
        name: 'Composite',
        className: 'Metric',
        modelProperties: {
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          displayName: {
            required: false,
            serializedName: 'displayName',
            type: {
              name: 'String'
            }
          },
          displayDescription: {
            required: false,
            serializedName: 'displayDescription',
            type: {
              name: 'String'
            }
          },
          unit: {
            required: true,
            serializedName: 'unit',
            type: {
              name: 'Enum',
              allowedValues: [ 'Bytes', 'Count', 'Milliseconds' ]
            }
          },
          aggregationType: {
            required: true,
            serializedName: 'aggregationType',
            type: {
              name: 'Enum',
              allowedValues: [ 'Average', 'Count', 'Total' ]
            }
          },
          dimensions: {
            required: false,
            serializedName: 'dimensions',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MetricDimensionElementType',
                  type: {
                    name: 'Composite',
                    className: 'MetricDimension'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = Metric;
