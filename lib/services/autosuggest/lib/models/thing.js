/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Defines a thing.
 *
 * @extends models['Response']
 */
class Thing extends models['Response'] {
  /**
   * Create a Thing.
   * @member {string} [name] The name of the thing represented by this object.
   * @member {string} [description] A short description of the item.
   * @member {string} [wikipediaId]
   * @member {string} [freebaseId]
   * @member {string} [alternateName] An alias for the item
   * @member {string} [bingId] An ID that uniquely identifies this item.
   * @member {string} [satoriId]
   * @member {string} [ypId]
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Thing
   *
   * @returns {object} metadata of Thing
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Thing',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: '_type',
          clientName: '_type'
        },
        uberParent: 'ResponseBase',
        className: 'Thing',
        modelProperties: {
          _type: {
            required: true,
            serializedName: '_type',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          potentialAction: {
            required: false,
            readOnly: true,
            serializedName: 'potentialAction',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ActionElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: '_type',
                      clientName: '_type'
                    },
                    uberParent: 'ResponseBase',
                    className: 'Action'
                  }
              }
            }
          },
          immediateAction: {
            required: false,
            readOnly: true,
            serializedName: 'immediateAction',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ActionElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: '_type',
                      clientName: '_type'
                    },
                    uberParent: 'ResponseBase',
                    className: 'Action'
                  }
              }
            }
          },
          adaptiveCard: {
            required: false,
            readOnly: true,
            serializedName: 'adaptiveCard',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            readOnly: true,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          wikipediaId: {
            required: false,
            readOnly: true,
            serializedName: 'wikipediaId',
            type: {
              name: 'String'
            }
          },
          freebaseId: {
            required: false,
            readOnly: true,
            serializedName: 'freebaseId',
            type: {
              name: 'String'
            }
          },
          alternateName: {
            required: false,
            readOnly: true,
            serializedName: 'alternateName',
            type: {
              name: 'String'
            }
          },
          bingId: {
            required: false,
            readOnly: true,
            serializedName: 'bingId',
            type: {
              name: 'String'
            }
          },
          satoriId: {
            required: false,
            readOnly: true,
            serializedName: 'satoriId',
            type: {
              name: 'String'
            }
          },
          ypId: {
            required: false,
            readOnly: true,
            serializedName: 'ypId',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Thing;
