/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * OpenShift Managed cluster.
 *
 * @extends models['Resource']
 */
class OpenShiftManagedCluster extends models['Resource'] {
  /**
   * Create a OpenShiftManagedCluster.
   * @member {object} [plan] Define the resource plan as required by ARM for
   * billing purposes
   * @member {string} [plan.name] The plan ID.
   * @member {string} [plan.product] Specifies the product of the image from
   * the marketplace. This is the same value as Offer under the imageReference
   * element.
   * @member {string} [plan.promtionCode] The promotion code.
   * @member {string} [plan.publisher] The plan ID.
   * @member {string} [provisioningState] The current deployment or
   * provisioning state, which only appears in the response.
   * @member {string} [openShiftVersion] Version of OpenShift specified when
   * creating the cluster.
   * @member {string} [publicHostname] Public Hostname of the openshift managed
   * cluster.
   * @member {string} [fqdn] Auto-allocated FQDN for OpenShift API server.
   * @member {array} [routerProfiles] Configuration for OpenShift router(s).
   * @member {object} [masterPoolProfile] Configuration for OpenShift master
   * VMs.
   * @member {array} [agentPoolProfiles] Configuration of OpenShift cluster
   * VMs.
   * @member {object} [servicePrincipalProfile] Service principal for OpenShift
   * cluster.
   * @member {string} [servicePrincipalProfile.clientId] The ID for the service
   * principal.
   * @member {string} [servicePrincipalProfile.secret] The secret password
   * associated with the service principal in plain text.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of OpenShiftManagedCluster
   *
   * @returns {object} metadata of OpenShiftManagedCluster
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'OpenShiftManagedCluster',
      type: {
        name: 'Composite',
        className: 'OpenShiftManagedCluster',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          plan: {
            required: false,
            serializedName: 'plan',
            type: {
              name: 'Composite',
              className: 'PurchasePlan'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          openShiftVersion: {
            required: false,
            serializedName: 'properties.openShiftVersion',
            type: {
              name: 'String'
            }
          },
          publicHostname: {
            required: false,
            serializedName: 'properties.publicHostname',
            type: {
              name: 'String'
            }
          },
          fqdn: {
            required: false,
            readOnly: true,
            serializedName: 'properties.fqdn',
            type: {
              name: 'String'
            }
          },
          routerProfiles: {
            required: false,
            serializedName: 'properties.routerProfiles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'OpenShiftRouterProfileElementType',
                  type: {
                    name: 'Composite',
                    className: 'OpenShiftRouterProfile'
                  }
              }
            }
          },
          masterPoolProfile: {
            required: false,
            serializedName: 'properties.masterPoolProfile',
            type: {
              name: 'Composite',
              className: 'OpenShiftManagedClusterMasterPoolProfile'
            }
          },
          agentPoolProfiles: {
            required: false,
            serializedName: 'properties.agentPoolProfiles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'OpenShiftManagedClusterAgentPoolProfileElementType',
                  type: {
                    name: 'Composite',
                    className: 'OpenShiftManagedClusterAgentPoolProfile'
                  }
              }
            }
          },
          servicePrincipalProfile: {
            required: false,
            serializedName: 'properties.servicePrincipalProfile',
            type: {
              name: 'Composite',
              className: 'ManagedClusterServicePrincipalProfile'
            }
          }
        }
      }
    };
  }
}

module.exports = OpenShiftManagedCluster;
