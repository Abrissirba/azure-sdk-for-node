/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource } from 'ms-rest-azure';
import { CloudError } from 'ms-rest-azure';
import * as moment from 'moment';

export { BaseResource } from 'ms-rest-azure';
export { CloudError } from 'ms-rest-azure';


/**
 * @class
 * Initializes a new instance of the Resource class.
 * @constructor
 * The Resource model definition.
 *
 * @property {string} [id] Resource Id
 * @property {string} [name] Resource name
 * @property {string} [type] Resource type
 * @property {string} location Resource location
 * @property {object} [tags] Resource tags
 */
export interface Resource extends BaseResource {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
  location: string;
  tags?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the PurchasePlan class.
 * @constructor
 * Used for establishing the purchase context of any 3rd Party artifact through
 * MarketPlace.
 *
 * @property {string} [name] The plan ID.
 * @property {string} [product] Specifies the product of the image from the
 * marketplace. This is the same value as Offer under the imageReference
 * element.
 * @property {string} [promotionCode] The promotion code.
 * @property {string} [publisher] The plan ID.
 */
export interface PurchasePlan {
  name?: string;
  product?: string;
  promotionCode?: string;
  publisher?: string;
}

/**
 * @class
 * Initializes a new instance of the OpenShiftRouterProfile class.
 * @constructor
 * Represents an OpenShift router
 *
 * @property {string} [name] Name of the router profile.
 * @property {string} [publicSubdomain] DNS subdomain for openshift router.
 * @property {string} [fqdn] Auto-allocated FQDN for the OpenShift router.
 */
export interface OpenShiftRouterProfile {
  name?: string;
  publicSubdomain?: string;
  readonly fqdn?: string;
}

/**
 * @class
 * Initializes a new instance of the NetworkProfile class.
 * @constructor
 * Represents the OpenShift networking configuration
 *
 * @property {string} [vnetCidr] CIDR for the OpenShift Vnet. Default value:
 * '10.0.0.0/8' .
 * @property {string} [peerVnetId] CIDR of the Vnet to peer.
 */
export interface NetworkProfile {
  vnetCidr?: string;
  peerVnetId?: string;
}

/**
 * @class
 * Initializes a new instance of the OpenShiftManagedClusterMasterPoolProfile class.
 * @constructor
 * OpenShiftManagedClusterMaterPoolProfile contains configuration for OpenShift
 * master VMs.
 *
 * @property {string} [name] Unique name of the master pool profile in the
 * context of the subscription and resource group.
 * @property {number} count Number of masters (VMs) to host docker containers.
 * The default value is 3. Default value: 3 .
 * @property {string} vmSize Size of agent VMs. Possible values include:
 * 'Standard_D2s_v3', 'Standard_D4s_v3'
 * @property {string} [subnetCidr] Subnet CIDR for the peering.
 * @property {string} [osType] OsType to be used to specify os type. Choose
 * from Linux and Windows. Default to Linux. Possible values include: 'Linux',
 * 'Windows'. Default value: 'Linux' .
 */
export interface OpenShiftManagedClusterMasterPoolProfile {
  name?: string;
  count: number;
  vmSize: string;
  subnetCidr?: string;
  osType?: string;
}

/**
 * @class
 * Initializes a new instance of the OpenShiftManagedClusterAgentPoolProfile class.
 * @constructor
 * Defines the configuration of the OpenShift cluster VMs.
 *
 * @property {string} name Unique name of the pool profile in the context of
 * the subscription and resource group.
 * @property {number} count Number of agents (VMs) to host docker containers.
 * Allowed values must be in the range of 1 to 5 (inclusive). The default value
 * is 2. . Default value: 2 .
 * @property {string} vmSize Size of agent VMs. Possible values include:
 * 'Standard_D2s_v3', 'Standard_D4s_v3'
 * @property {string} [subnetCidr] Subnet CIDR for the peering. Default value:
 * '10.0.0.0/24' .
 * @property {string} [osType] OsType to be used to specify os type. Choose
 * from Linux and Windows. Default to Linux. Possible values include: 'Linux',
 * 'Windows'. Default value: 'Linux' .
 * @property {string} [role] Define the role of the AgentPoolProfile. Possible
 * values include: 'compute', 'infra'
 */
export interface OpenShiftManagedClusterAgentPoolProfile {
  name: string;
  count: number;
  vmSize: string;
  subnetCidr?: string;
  osType?: string;
  role?: string;
}

/**
 * @class
 * Initializes a new instance of the OpenShiftManagedClusterBaseIdentityProvider class.
 * @constructor
 * Structure for any Identity provider.
 *
 * @property {string} kind Polymorphic Discriminator
 */
export interface OpenShiftManagedClusterBaseIdentityProvider {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the OpenShiftManagedClusterIdentityProvider class.
 * @constructor
 * Defines the configuration of the identity providers to be used in the
 * OpenShift cluster.
 *
 * @property {string} [name] Name of the provider.
 * @property {object} [provider] Configuration of the provider.
 * @property {string} [provider.kind] Polymorphic Discriminator
 */
export interface OpenShiftManagedClusterIdentityProvider {
  name?: string;
  provider?: OpenShiftManagedClusterBaseIdentityProvider;
}

/**
 * @class
 * Initializes a new instance of the OpenShiftManagedClusterAuthProfile class.
 * @constructor
 * Defines all possible authentication profiles for the OpenShift cluster.
 *
 * @property {array} [identityProviders] Type of authentication profile to use.
 */
export interface OpenShiftManagedClusterAuthProfile {
  identityProviders?: OpenShiftManagedClusterIdentityProvider[];
}

/**
 * @class
 * Initializes a new instance of the OpenShiftManagedCluster class.
 * @constructor
 * OpenShift Managed cluster.
 *
 * @property {object} [plan] Define the resource plan as required by ARM for
 * billing purposes
 * @property {string} [plan.name] The plan ID.
 * @property {string} [plan.product] Specifies the product of the image from
 * the marketplace. This is the same value as Offer under the imageReference
 * element.
 * @property {string} [plan.promotionCode] The promotion code.
 * @property {string} [plan.publisher] The plan ID.
 * @property {string} [provisioningState] The current deployment or
 * provisioning state, which only appears in the response.
 * @property {string} openShiftVersion Version of OpenShift specified when
 * creating the cluster.
 * @property {string} [publicHostname] Optional user-specified FQDN for
 * OpenShift API server.
 * @property {string} [fqdn] User-specified FQDN for OpenShift API server
 * loadbalancer internal hostname.
 * @property {object} [networkProfile] Configuration for OpenShift networking.
 * @property {string} [networkProfile.vnetCidr] CIDR for the OpenShift Vnet.
 * @property {string} [networkProfile.peerVnetId] CIDR of the Vnet to peer.
 * @property {array} [routerProfiles] Configuration for OpenShift router(s).
 * @property {object} [masterPoolProfile] Configuration for OpenShift master
 * VMs.
 * @property {string} [masterPoolProfile.name] Unique name of the master pool
 * profile in the context of the subscription and resource group.
 * @property {number} [masterPoolProfile.count] Number of masters (VMs) to host
 * docker containers. The default value is 3.
 * @property {string} [masterPoolProfile.vmSize] Size of agent VMs. Possible
 * values include: 'Standard_D2s_v3', 'Standard_D4s_v3'
 * @property {string} [masterPoolProfile.subnetCidr] Subnet CIDR for the
 * peering.
 * @property {string} [masterPoolProfile.osType] OsType to be used to specify
 * os type. Choose from Linux and Windows. Default to Linux. Possible values
 * include: 'Linux', 'Windows'
 * @property {array} [agentPoolProfiles] Configuration of OpenShift cluster
 * VMs.
 * @property {object} [authProfile] Configures OpenShift authentication.
 * @property {array} [authProfile.identityProviders] Type of authentication
 * profile to use.
 */
export interface OpenShiftManagedCluster extends Resource {
  plan?: PurchasePlan;
  readonly provisioningState?: string;
  openShiftVersion: string;
  publicHostname?: string;
  fqdn?: string;
  networkProfile?: NetworkProfile;
  routerProfiles?: OpenShiftRouterProfile[];
  masterPoolProfile?: OpenShiftManagedClusterMasterPoolProfile;
  agentPoolProfiles?: OpenShiftManagedClusterAgentPoolProfile[];
  authProfile?: OpenShiftManagedClusterAuthProfile;
}

/**
 * @class
 * Initializes a new instance of the OpenShiftManagedClusterAADIdentityProvider class.
 * @constructor
 * Defines the Identity provider for MS AAD.
 *
 * @property {string} [clientId] The clientId password associated with the
 * provider.
 * @property {string} [secret] The secret password associated with the
 * provider.
 * @property {string} [tenantId] The tenantId associated with the provider.
 */
export interface OpenShiftManagedClusterAADIdentityProvider extends OpenShiftManagedClusterBaseIdentityProvider {
  clientId?: string;
  secret?: string;
  tenantId?: string;
}

/**
 * @class
 * Initializes a new instance of the TagsObject class.
 * @constructor
 * Tags object for patch operations.
 *
 * @property {object} [tags] Resource tags.
 */
export interface TagsObject {
  tags?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the ContainerServiceCustomProfile class.
 * @constructor
 * Properties to configure a custom container service cluster.
 *
 * @property {string} orchestrator The name of the custom orchestrator to use.
 */
export interface ContainerServiceCustomProfile {
  orchestrator: string;
}

/**
 * @class
 * Initializes a new instance of the KeyVaultSecretRef class.
 * @constructor
 * Reference to a secret stored in Azure Key Vault.
 *
 * @property {string} vaultID Key vault identifier.
 * @property {string} secretName The secret name.
 * @property {string} [version] The secret version.
 */
export interface KeyVaultSecretRef {
  vaultID: string;
  secretName: string;
  version?: string;
}

/**
 * @class
 * Initializes a new instance of the ContainerServiceServicePrincipalProfile class.
 * @constructor
 * Information about a service principal identity for the cluster to use for
 * manipulating Azure APIs. Either secret or keyVaultSecretRef must be
 * specified.
 *
 * @property {string} clientId The ID for the service principal.
 * @property {string} [secret] The secret password associated with the service
 * principal in plain text.
 * @property {object} [keyVaultSecretRef] Reference to a secret stored in Azure
 * Key Vault.
 * @property {string} [keyVaultSecretRef.vaultID] Key vault identifier.
 * @property {string} [keyVaultSecretRef.secretName] The secret name.
 * @property {string} [keyVaultSecretRef.version] The secret version.
 */
export interface ContainerServiceServicePrincipalProfile {
  clientId: string;
  secret?: string;
  keyVaultSecretRef?: KeyVaultSecretRef;
}

/**
 * @class
 * Initializes a new instance of the ContainerServiceOrchestratorProfile class.
 * @constructor
 * Profile for the container service orchestrator.
 *
 * @property {string} orchestratorType The orchestrator to use to manage
 * container service cluster resources. Valid values are Kubernetes, Swarm,
 * DCOS, DockerCE and Custom. Possible values include: 'Kubernetes', 'Swarm',
 * 'DCOS', 'DockerCE', 'Custom'
 * @property {string} [orchestratorVersion] The version of the orchestrator to
 * use. You can specify the major.minor.patch part of the actual version.For
 * example, you can specify version as "1.6.11".
 */
export interface ContainerServiceOrchestratorProfile {
  orchestratorType: string;
  orchestratorVersion?: string;
}

/**
 * @class
 * Initializes a new instance of the ContainerServiceMasterProfile class.
 * @constructor
 * Profile for the container service master.
 *
 * @property {number} [count] Number of masters (VMs) in the container service
 * cluster. Allowed values are 1, 3, and 5. The default value is 1. Default
 * value: 1 .
 * @property {string} dnsPrefix DNS prefix to be used to create the FQDN for
 * the master pool.
 * @property {string} vmSize Size of agent VMs. Possible values include:
 * 'Standard_A1', 'Standard_A10', 'Standard_A11', 'Standard_A1_v2',
 * 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2', 'Standard_A3',
 * 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2', 'Standard_A5',
 * 'Standard_A6', 'Standard_A7', 'Standard_A8', 'Standard_A8_v2',
 * 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms', 'Standard_B2s',
 * 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1', 'Standard_D11',
 * 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12',
 * 'Standard_D12_v2', 'Standard_D12_v2_Promo', 'Standard_D13',
 * 'Standard_D13_v2', 'Standard_D13_v2_Promo', 'Standard_D14',
 * 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
 * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2',
 * 'Standard_D2_v2', 'Standard_D2_v2_Promo', 'Standard_D2_v3',
 * 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3', 'Standard_D32s_v3',
 * 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
 * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3',
 * 'Standard_D5_v2', 'Standard_D5_v2_Promo', 'Standard_D64_v3',
 * 'Standard_D64s_v3', 'Standard_D8_v3', 'Standard_D8s_v3', 'Standard_DS1',
 * 'Standard_DS11', 'Standard_DS11_v2', 'Standard_DS11_v2_Promo',
 * 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
 * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2',
 * 'Standard_DS13_v2', 'Standard_DS13_v2_Promo', 'Standard_DS14',
 * 'Standard_DS14-4_v2', 'Standard_DS14-8_v2', 'Standard_DS14_v2',
 * 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
 * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3',
 * 'Standard_DS3_v2', 'Standard_DS3_v2_Promo', 'Standard_DS4',
 * 'Standard_DS4_v2', 'Standard_DS4_v2_Promo', 'Standard_DS5_v2',
 * 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
 * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3',
 * 'Standard_E32-8s_v3', 'Standard_E32_v3', 'Standard_E32s_v3',
 * 'Standard_E4_v3', 'Standard_E4s_v3', 'Standard_E64-16s_v3',
 * 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
 * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16',
 * 'Standard_F16s', 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2',
 * 'Standard_F2s', 'Standard_F2s_v2', 'Standard_F32s_v2', 'Standard_F4',
 * 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2',
 * 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
 * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
 * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4',
 * 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
 * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r',
 * 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
 * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms',
 * 'Standard_M128ms', 'Standard_M128s', 'Standard_M64-16ms',
 * 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s', 'Standard_NC12',
 * 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
 * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
 * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3',
 * 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s', 'Standard_ND6s',
 * 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
 * @property {number} [osDiskSizeGB] OS Disk Size in GB to be used to specify
 * the disk size for every machine in this master/agent pool. If you specify 0,
 * it will apply the default osDisk size according to the vmSize specified.
 * @property {string} [vnetSubnetID] VNet SubnetID specifies the vnet's subnet
 * identifier.
 * @property {string} [firstConsecutiveStaticIP] FirstConsecutiveStaticIP used
 * to specify the first static ip of masters. Default value: '10.240.255.5' .
 * @property {string} [storageProfile] Storage profile specifies what kind of
 * storage used. Choose from StorageAccount and ManagedDisks. Leave it empty,
 * we will choose for you based on the orchestrator choice. Possible values
 * include: 'StorageAccount', 'ManagedDisks'
 * @property {string} [fqdn] FDQN for the master pool.
 */
export interface ContainerServiceMasterProfile {
  count?: number;
  dnsPrefix: string;
  vmSize: string;
  osDiskSizeGB?: number;
  vnetSubnetID?: string;
  firstConsecutiveStaticIP?: string;
  storageProfile?: string;
  readonly fqdn?: string;
}

/**
 * @class
 * Initializes a new instance of the ContainerServiceAgentPoolProfile class.
 * @constructor
 * Profile for the container service agent pool.
 *
 * @property {string} name Unique name of the agent pool profile in the context
 * of the subscription and resource group.
 * @property {number} [count] Number of agents (VMs) to host docker containers.
 * Allowed values must be in the range of 1 to 100 (inclusive). The default
 * value is 1. . Default value: 1 .
 * @property {string} vmSize Size of agent VMs. Possible values include:
 * 'Standard_A1', 'Standard_A10', 'Standard_A11', 'Standard_A1_v2',
 * 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2', 'Standard_A3',
 * 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2', 'Standard_A5',
 * 'Standard_A6', 'Standard_A7', 'Standard_A8', 'Standard_A8_v2',
 * 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms', 'Standard_B2s',
 * 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1', 'Standard_D11',
 * 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12',
 * 'Standard_D12_v2', 'Standard_D12_v2_Promo', 'Standard_D13',
 * 'Standard_D13_v2', 'Standard_D13_v2_Promo', 'Standard_D14',
 * 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
 * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2',
 * 'Standard_D2_v2', 'Standard_D2_v2_Promo', 'Standard_D2_v3',
 * 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3', 'Standard_D32s_v3',
 * 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
 * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3',
 * 'Standard_D5_v2', 'Standard_D5_v2_Promo', 'Standard_D64_v3',
 * 'Standard_D64s_v3', 'Standard_D8_v3', 'Standard_D8s_v3', 'Standard_DS1',
 * 'Standard_DS11', 'Standard_DS11_v2', 'Standard_DS11_v2_Promo',
 * 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
 * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2',
 * 'Standard_DS13_v2', 'Standard_DS13_v2_Promo', 'Standard_DS14',
 * 'Standard_DS14-4_v2', 'Standard_DS14-8_v2', 'Standard_DS14_v2',
 * 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
 * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3',
 * 'Standard_DS3_v2', 'Standard_DS3_v2_Promo', 'Standard_DS4',
 * 'Standard_DS4_v2', 'Standard_DS4_v2_Promo', 'Standard_DS5_v2',
 * 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
 * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3',
 * 'Standard_E32-8s_v3', 'Standard_E32_v3', 'Standard_E32s_v3',
 * 'Standard_E4_v3', 'Standard_E4s_v3', 'Standard_E64-16s_v3',
 * 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
 * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16',
 * 'Standard_F16s', 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2',
 * 'Standard_F2s', 'Standard_F2s_v2', 'Standard_F32s_v2', 'Standard_F4',
 * 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2',
 * 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
 * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
 * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4',
 * 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
 * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r',
 * 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
 * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms',
 * 'Standard_M128ms', 'Standard_M128s', 'Standard_M64-16ms',
 * 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s', 'Standard_NC12',
 * 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
 * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
 * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3',
 * 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s', 'Standard_ND6s',
 * 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
 * @property {number} [osDiskSizeGB] OS Disk Size in GB to be used to specify
 * the disk size for every machine in this master/agent pool. If you specify 0,
 * it will apply the default osDisk size according to the vmSize specified.
 * @property {string} [dnsPrefix] DNS prefix to be used to create the FQDN for
 * the agent pool.
 * @property {string} [fqdn] FDQN for the agent pool.
 * @property {array} [ports] Ports number array used to expose on this agent
 * pool. The default opened ports are different based on your choice of
 * orchestrator.
 * @property {string} [storageProfile] Storage profile specifies what kind of
 * storage used. Choose from StorageAccount and ManagedDisks. Leave it empty,
 * we will choose for you based on the orchestrator choice. Possible values
 * include: 'StorageAccount', 'ManagedDisks'
 * @property {string} [vnetSubnetID] VNet SubnetID specifies the vnet's subnet
 * identifier.
 * @property {string} [osType] OsType to be used to specify os type. Choose
 * from Linux and Windows. Default to Linux. Possible values include: 'Linux',
 * 'Windows'. Default value: 'Linux' .
 */
export interface ContainerServiceAgentPoolProfile {
  name: string;
  count?: number;
  vmSize: string;
  osDiskSizeGB?: number;
  dnsPrefix?: string;
  readonly fqdn?: string;
  ports?: number[];
  storageProfile?: string;
  vnetSubnetID?: string;
  osType?: string;
}

/**
 * @class
 * Initializes a new instance of the ContainerServiceWindowsProfile class.
 * @constructor
 * Profile for Windows VMs in the container service cluster.
 *
 * @property {string} adminUsername The administrator username to use for
 * Windows VMs.
 * @property {string} adminPassword The administrator password to use for
 * Windows VMs.
 */
export interface ContainerServiceWindowsProfile {
  adminUsername: string;
  adminPassword: string;
}

/**
 * @class
 * Initializes a new instance of the ContainerServiceSshPublicKey class.
 * @constructor
 * Contains information about SSH certificate public key data.
 *
 * @property {string} keyData Certificate public key used to authenticate with
 * VMs through SSH. The certificate must be in PEM format with or without
 * headers.
 */
export interface ContainerServiceSshPublicKey {
  keyData: string;
}

/**
 * @class
 * Initializes a new instance of the ContainerServiceSshConfiguration class.
 * @constructor
 * SSH configuration for Linux-based VMs running on Azure.
 *
 * @property {array} publicKeys The list of SSH public keys used to
 * authenticate with Linux-based VMs. Only expect one key specified.
 */
export interface ContainerServiceSshConfiguration {
  publicKeys: ContainerServiceSshPublicKey[];
}

/**
 * @class
 * Initializes a new instance of the ContainerServiceLinuxProfile class.
 * @constructor
 * Profile for Linux VMs in the container service cluster.
 *
 * @property {string} adminUsername The administrator username to use for Linux
 * VMs.
 * @property {object} ssh SSH configuration for Linux-based VMs running on
 * Azure.
 * @property {array} [ssh.publicKeys] The list of SSH public keys used to
 * authenticate with Linux-based VMs. Only expect one key specified.
 */
export interface ContainerServiceLinuxProfile {
  adminUsername: string;
  ssh: ContainerServiceSshConfiguration;
}

/**
 * @class
 * Initializes a new instance of the ContainerServiceVMDiagnostics class.
 * @constructor
 * Profile for diagnostics on the container service VMs.
 *
 * @property {boolean} enabled Whether the VM diagnostic agent is provisioned
 * on the VM.
 * @property {string} [storageUri] The URI of the storage account where
 * diagnostics are stored.
 */
export interface ContainerServiceVMDiagnostics {
  enabled: boolean;
  readonly storageUri?: string;
}

/**
 * @class
 * Initializes a new instance of the ContainerServiceDiagnosticsProfile class.
 * @constructor
 * Profile for diagnostics on the container service cluster.
 *
 * @property {object} vmDiagnostics Profile for diagnostics on the container
 * service VMs.
 * @property {boolean} [vmDiagnostics.enabled] Whether the VM diagnostic agent
 * is provisioned on the VM.
 * @property {string} [vmDiagnostics.storageUri] The URI of the storage account
 * where diagnostics are stored.
 */
export interface ContainerServiceDiagnosticsProfile {
  vmDiagnostics: ContainerServiceVMDiagnostics;
}

/**
 * @class
 * Initializes a new instance of the ContainerService class.
 * @constructor
 * Container service.
 *
 * @property {string} [provisioningState] The current deployment or
 * provisioning state, which only appears in the response.
 * @property {object} orchestratorProfile Profile for the container service
 * orchestrator.
 * @property {string} [orchestratorProfile.orchestratorType] The orchestrator
 * to use to manage container service cluster resources. Valid values are
 * Kubernetes, Swarm, DCOS, DockerCE and Custom. Possible values include:
 * 'Kubernetes', 'Swarm', 'DCOS', 'DockerCE', 'Custom'
 * @property {string} [orchestratorProfile.orchestratorVersion] The version of
 * the orchestrator to use. You can specify the major.minor.patch part of the
 * actual version.For example, you can specify version as "1.6.11".
 * @property {object} [customProfile] Properties to configure a custom
 * container service cluster.
 * @property {string} [customProfile.orchestrator] The name of the custom
 * orchestrator to use.
 * @property {object} [servicePrincipalProfile] Information about a service
 * principal identity for the cluster to use for manipulating Azure APIs. Exact
 * one of secret or keyVaultSecretRef need to be specified.
 * @property {string} [servicePrincipalProfile.clientId] The ID for the service
 * principal.
 * @property {string} [servicePrincipalProfile.secret] The secret password
 * associated with the service principal in plain text.
 * @property {object} [servicePrincipalProfile.keyVaultSecretRef] Reference to
 * a secret stored in Azure Key Vault.
 * @property {string} [servicePrincipalProfile.keyVaultSecretRef.vaultID] Key
 * vault identifier.
 * @property {string} [servicePrincipalProfile.keyVaultSecretRef.secretName]
 * The secret name.
 * @property {string} [servicePrincipalProfile.keyVaultSecretRef.version] The
 * secret version.
 * @property {object} masterProfile Profile for the container service master.
 * @property {number} [masterProfile.count] Number of masters (VMs) in the
 * container service cluster. Allowed values are 1, 3, and 5. The default value
 * is 1.
 * @property {string} [masterProfile.dnsPrefix] DNS prefix to be used to create
 * the FQDN for the master pool.
 * @property {string} [masterProfile.vmSize] Size of agent VMs. Possible values
 * include: 'Standard_A1', 'Standard_A10', 'Standard_A11', 'Standard_A1_v2',
 * 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2', 'Standard_A3',
 * 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2', 'Standard_A5',
 * 'Standard_A6', 'Standard_A7', 'Standard_A8', 'Standard_A8_v2',
 * 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms', 'Standard_B2s',
 * 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1', 'Standard_D11',
 * 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12',
 * 'Standard_D12_v2', 'Standard_D12_v2_Promo', 'Standard_D13',
 * 'Standard_D13_v2', 'Standard_D13_v2_Promo', 'Standard_D14',
 * 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
 * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2',
 * 'Standard_D2_v2', 'Standard_D2_v2_Promo', 'Standard_D2_v3',
 * 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3', 'Standard_D32s_v3',
 * 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
 * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3',
 * 'Standard_D5_v2', 'Standard_D5_v2_Promo', 'Standard_D64_v3',
 * 'Standard_D64s_v3', 'Standard_D8_v3', 'Standard_D8s_v3', 'Standard_DS1',
 * 'Standard_DS11', 'Standard_DS11_v2', 'Standard_DS11_v2_Promo',
 * 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
 * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2',
 * 'Standard_DS13_v2', 'Standard_DS13_v2_Promo', 'Standard_DS14',
 * 'Standard_DS14-4_v2', 'Standard_DS14-8_v2', 'Standard_DS14_v2',
 * 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
 * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3',
 * 'Standard_DS3_v2', 'Standard_DS3_v2_Promo', 'Standard_DS4',
 * 'Standard_DS4_v2', 'Standard_DS4_v2_Promo', 'Standard_DS5_v2',
 * 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
 * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3',
 * 'Standard_E32-8s_v3', 'Standard_E32_v3', 'Standard_E32s_v3',
 * 'Standard_E4_v3', 'Standard_E4s_v3', 'Standard_E64-16s_v3',
 * 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
 * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16',
 * 'Standard_F16s', 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2',
 * 'Standard_F2s', 'Standard_F2s_v2', 'Standard_F32s_v2', 'Standard_F4',
 * 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2',
 * 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
 * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
 * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4',
 * 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
 * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r',
 * 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
 * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms',
 * 'Standard_M128ms', 'Standard_M128s', 'Standard_M64-16ms',
 * 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s', 'Standard_NC12',
 * 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
 * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
 * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3',
 * 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s', 'Standard_ND6s',
 * 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
 * @property {number} [masterProfile.osDiskSizeGB] OS Disk Size in GB to be
 * used to specify the disk size for every machine in this master/agent pool.
 * If you specify 0, it will apply the default osDisk size according to the
 * vmSize specified.
 * @property {string} [masterProfile.vnetSubnetID] VNet SubnetID specifies the
 * vnet's subnet identifier.
 * @property {string} [masterProfile.firstConsecutiveStaticIP]
 * FirstConsecutiveStaticIP used to specify the first static ip of masters.
 * @property {string} [masterProfile.storageProfile] Storage profile specifies
 * what kind of storage used. Choose from StorageAccount and ManagedDisks.
 * Leave it empty, we will choose for you based on the orchestrator choice.
 * Possible values include: 'StorageAccount', 'ManagedDisks'
 * @property {string} [masterProfile.fqdn] FDQN for the master pool.
 * @property {array} [agentPoolProfiles] Properties of the agent pool.
 * @property {object} [windowsProfile] Profile for Windows VMs in the container
 * service cluster.
 * @property {string} [windowsProfile.adminUsername] The administrator username
 * to use for Windows VMs.
 * @property {string} [windowsProfile.adminPassword] The administrator password
 * to use for Windows VMs.
 * @property {object} linuxProfile Profile for Linux VMs in the container
 * service cluster.
 * @property {string} [linuxProfile.adminUsername] The administrator username
 * to use for Linux VMs.
 * @property {object} [linuxProfile.ssh] SSH configuration for Linux-based VMs
 * running on Azure.
 * @property {array} [linuxProfile.ssh.publicKeys] The list of SSH public keys
 * used to authenticate with Linux-based VMs. Only expect one key specified.
 * @property {object} [diagnosticsProfile] Profile for diagnostics in the
 * container service cluster.
 * @property {object} [diagnosticsProfile.vmDiagnostics] Profile for
 * diagnostics on the container service VMs.
 * @property {boolean} [diagnosticsProfile.vmDiagnostics.enabled] Whether the
 * VM diagnostic agent is provisioned on the VM.
 * @property {string} [diagnosticsProfile.vmDiagnostics.storageUri] The URI of
 * the storage account where diagnostics are stored.
 */
export interface ContainerService extends Resource {
  readonly provisioningState?: string;
  orchestratorProfile: ContainerServiceOrchestratorProfile;
  customProfile?: ContainerServiceCustomProfile;
  servicePrincipalProfile?: ContainerServiceServicePrincipalProfile;
  masterProfile: ContainerServiceMasterProfile;
  agentPoolProfiles?: ContainerServiceAgentPoolProfile[];
  windowsProfile?: ContainerServiceWindowsProfile;
  linuxProfile: ContainerServiceLinuxProfile;
  diagnosticsProfile?: ContainerServiceDiagnosticsProfile;
}

/**
 * @class
 * Initializes a new instance of the OperationValue class.
 * @constructor
 * Describes the properties of a Compute Operation value.
 *
 * @property {string} [origin] The origin of the compute operation.
 * @property {string} [name] The name of the compute operation.
 * @property {string} [operation] The display name of the compute operation.
 * @property {string} [resource] The display name of the resource the operation
 * applies to.
 * @property {string} [description] The description of the operation.
 * @property {string} [provider] The resource provider for the operation.
 */
export interface OperationValue {
  readonly origin?: string;
  readonly name?: string;
  readonly operation?: string;
  readonly resource?: string;
  readonly description?: string;
  readonly provider?: string;
}

/**
 * @class
 * Initializes a new instance of the ManagedClusterServicePrincipalProfile class.
 * @constructor
 * Information about a service principal identity for the cluster to use for
 * manipulating Azure APIs.
 *
 * @property {string} clientId The ID for the service principal.
 * @property {string} [secret] The secret password associated with the service
 * principal in plain text.
 */
export interface ManagedClusterServicePrincipalProfile {
  clientId: string;
  secret?: string;
}

/**
 * @class
 * Initializes a new instance of the ManagedClusterAgentPoolProfile class.
 * @constructor
 * Profile for the container service agent pool.
 *
 * @property {string} name Unique name of the agent pool profile in the context
 * of the subscription and resource group.
 * @property {number} count Number of agents (VMs) to host docker containers.
 * Allowed values must be in the range of 1 to 100 (inclusive). The default
 * value is 1. . Default value: 1 .
 * @property {string} vmSize Size of agent VMs. Possible values include:
 * 'Standard_A1', 'Standard_A10', 'Standard_A11', 'Standard_A1_v2',
 * 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2', 'Standard_A3',
 * 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2', 'Standard_A5',
 * 'Standard_A6', 'Standard_A7', 'Standard_A8', 'Standard_A8_v2',
 * 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms', 'Standard_B2s',
 * 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1', 'Standard_D11',
 * 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12',
 * 'Standard_D12_v2', 'Standard_D12_v2_Promo', 'Standard_D13',
 * 'Standard_D13_v2', 'Standard_D13_v2_Promo', 'Standard_D14',
 * 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
 * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2',
 * 'Standard_D2_v2', 'Standard_D2_v2_Promo', 'Standard_D2_v3',
 * 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3', 'Standard_D32s_v3',
 * 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
 * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3',
 * 'Standard_D5_v2', 'Standard_D5_v2_Promo', 'Standard_D64_v3',
 * 'Standard_D64s_v3', 'Standard_D8_v3', 'Standard_D8s_v3', 'Standard_DS1',
 * 'Standard_DS11', 'Standard_DS11_v2', 'Standard_DS11_v2_Promo',
 * 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
 * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2',
 * 'Standard_DS13_v2', 'Standard_DS13_v2_Promo', 'Standard_DS14',
 * 'Standard_DS14-4_v2', 'Standard_DS14-8_v2', 'Standard_DS14_v2',
 * 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
 * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3',
 * 'Standard_DS3_v2', 'Standard_DS3_v2_Promo', 'Standard_DS4',
 * 'Standard_DS4_v2', 'Standard_DS4_v2_Promo', 'Standard_DS5_v2',
 * 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
 * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3',
 * 'Standard_E32-8s_v3', 'Standard_E32_v3', 'Standard_E32s_v3',
 * 'Standard_E4_v3', 'Standard_E4s_v3', 'Standard_E64-16s_v3',
 * 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
 * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16',
 * 'Standard_F16s', 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2',
 * 'Standard_F2s', 'Standard_F2s_v2', 'Standard_F32s_v2', 'Standard_F4',
 * 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2',
 * 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
 * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
 * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4',
 * 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
 * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r',
 * 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
 * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms',
 * 'Standard_M128ms', 'Standard_M128s', 'Standard_M64-16ms',
 * 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s', 'Standard_NC12',
 * 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
 * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
 * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3',
 * 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s', 'Standard_ND6s',
 * 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
 * @property {number} [osDiskSizeGB] OS Disk Size in GB to be used to specify
 * the disk size for every machine in this master/agent pool. If you specify 0,
 * it will apply the default osDisk size according to the vmSize specified.
 * @property {string} [vnetSubnetID] VNet SubnetID specifies the vnet's subnet
 * identifier.
 * @property {number} [maxPods] Maximum number of pods that can run on a node.
 * @property {string} [osType] OsType to be used to specify os type. Choose
 * from Linux and Windows. Default to Linux. Possible values include: 'Linux',
 * 'Windows'. Default value: 'Linux' .
 * @property {number} [maxCount] Maximum number of nodes for auto-scaling
 * @property {number} [minCount] Minimum number of nodes for auto-scaling
 * @property {boolean} [enableAutoScaling] Whether to enable auto-scaler
 * @property {string} [type] AgentPoolType represents types of agentpool.
 * Possible values include: 'VirtualMachineScaleSets', 'AvailabilitySet'
 */
export interface ManagedClusterAgentPoolProfile {
  name: string;
  count: number;
  vmSize: string;
  osDiskSizeGB?: number;
  vnetSubnetID?: string;
  maxPods?: number;
  osType?: string;
  maxCount?: number;
  minCount?: number;
  enableAutoScaling?: boolean;
  type?: string;
}

/**
 * @class
 * Initializes a new instance of the ContainerServiceNetworkProfile class.
 * @constructor
 * Profile of network configuration.
 *
 * @property {string} [networkPlugin] Network plugin used for building
 * Kubernetes network. Possible values include: 'azure', 'kubenet'. Default
 * value: 'kubenet' .
 * @property {string} [networkPolicy] Network policy used for building
 * Kubernetes network. Possible values include: 'calico'
 * @property {string} [podCidr] A CIDR notation IP range from which to assign
 * pod IPs when kubenet is used. Default value: '10.244.0.0/16' .
 * @property {string} [serviceCidr] A CIDR notation IP range from which to
 * assign service cluster IPs. It must not overlap with any Subnet IP ranges.
 * Default value: '10.0.0.0/16' .
 * @property {string} [dnsServiceIP] An IP address assigned to the Kubernetes
 * DNS service. It must be within the Kubernetes service address range
 * specified in serviceCidr. Default value: '10.0.0.10' .
 * @property {string} [dockerBridgeCidr] A CIDR notation IP range assigned to
 * the Docker bridge network. It must not overlap with any Subnet IP ranges or
 * the Kubernetes service address range. Default value: '172.17.0.1/16' .
 */
export interface ContainerServiceNetworkProfile {
  networkPlugin?: string;
  networkPolicy?: string;
  podCidr?: string;
  serviceCidr?: string;
  dnsServiceIP?: string;
  dockerBridgeCidr?: string;
}

/**
 * @class
 * Initializes a new instance of the ManagedClusterAddonProfile class.
 * @constructor
 * A Kubernetes add-on profile for a managed cluster.
 *
 * @property {boolean} enabled Whether the add-on is enabled or not.
 * @property {object} [config] Key-value pairs for configuring an add-on.
 */
export interface ManagedClusterAddonProfile {
  enabled: boolean;
  config?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the ManagedClusterAADProfile class.
 * @constructor
 * AADProfile specifies attributes for Azure Active Directory integration.
 *
 * @property {string} clientAppID The client AAD application ID.
 * @property {string} serverAppID The server AAD application ID.
 * @property {string} [serverAppSecret] The server AAD application secret.
 * @property {string} [tenantID] The AAD tenant ID to use for authentication.
 * If not specified, will use the tenant of the deployment subscription.
 */
export interface ManagedClusterAADProfile {
  clientAppID: string;
  serverAppID: string;
  serverAppSecret?: string;
  tenantID?: string;
}

/**
 * @class
 * Initializes a new instance of the ManagedCluster class.
 * @constructor
 * Managed cluster.
 *
 * @property {string} [provisioningState] The current deployment or
 * provisioning state, which only appears in the response.
 * @property {string} [kubernetesVersion] Version of Kubernetes specified when
 * creating the managed cluster.
 * @property {string} [dnsPrefix] DNS prefix specified when creating the
 * managed cluster.
 * @property {string} [fqdn] FDQN for the master pool.
 * @property {array} [agentPoolProfiles] Properties of the agent pool.
 * @property {object} [linuxProfile] Profile for Linux VMs in the container
 * service cluster.
 * @property {string} [linuxProfile.adminUsername] The administrator username
 * to use for Linux VMs.
 * @property {object} [linuxProfile.ssh] SSH configuration for Linux-based VMs
 * running on Azure.
 * @property {array} [linuxProfile.ssh.publicKeys] The list of SSH public keys
 * used to authenticate with Linux-based VMs. Only expect one key specified.
 * @property {object} [servicePrincipalProfile] Information about a service
 * principal identity for the cluster to use for manipulating Azure APIs.
 * @property {string} [servicePrincipalProfile.clientId] The ID for the service
 * principal.
 * @property {string} [servicePrincipalProfile.secret] The secret password
 * associated with the service principal in plain text.
 * @property {object} [addonProfiles] Profile of managed cluster add-on.
 * @property {string} [nodeResourceGroup] Name of the resource group containing
 * agent pool nodes.
 * @property {boolean} [enableRBAC] Whether to enable Kubernetes Role-Based
 * Access Control.
 * @property {object} [networkProfile] Profile of network configuration.
 * @property {string} [networkProfile.networkPlugin] Network plugin used for
 * building Kubernetes network. Possible values include: 'azure', 'kubenet'
 * @property {string} [networkProfile.networkPolicy] Network policy used for
 * building Kubernetes network. Possible values include: 'calico'
 * @property {string} [networkProfile.podCidr] A CIDR notation IP range from
 * which to assign pod IPs when kubenet is used.
 * @property {string} [networkProfile.serviceCidr] A CIDR notation IP range
 * from which to assign service cluster IPs. It must not overlap with any
 * Subnet IP ranges.
 * @property {string} [networkProfile.dnsServiceIP] An IP address assigned to
 * the Kubernetes DNS service. It must be within the Kubernetes service address
 * range specified in serviceCidr.
 * @property {string} [networkProfile.dockerBridgeCidr] A CIDR notation IP
 * range assigned to the Docker bridge network. It must not overlap with any
 * Subnet IP ranges or the Kubernetes service address range.
 * @property {object} [aadProfile] Profile of Azure Active Directory
 * configuration.
 * @property {string} [aadProfile.clientAppID] The client AAD application ID.
 * @property {string} [aadProfile.serverAppID] The server AAD application ID.
 * @property {string} [aadProfile.serverAppSecret] The server AAD application
 * secret.
 * @property {string} [aadProfile.tenantID] The AAD tenant ID to use for
 * authentication. If not specified, will use the tenant of the deployment
 * subscription.
 */
export interface ManagedCluster extends Resource {
  readonly provisioningState?: string;
  kubernetesVersion?: string;
  dnsPrefix?: string;
  readonly fqdn?: string;
  agentPoolProfiles?: ManagedClusterAgentPoolProfile[];
  linuxProfile?: ContainerServiceLinuxProfile;
  servicePrincipalProfile?: ManagedClusterServicePrincipalProfile;
  addonProfiles?: { [propertyName: string]: ManagedClusterAddonProfile };
  readonly nodeResourceGroup?: string;
  enableRBAC?: boolean;
  networkProfile?: ContainerServiceNetworkProfile;
  aadProfile?: ManagedClusterAADProfile;
}

/**
 * @class
 * Initializes a new instance of the OrchestratorProfile class.
 * @constructor
 * Contains information about orchestrator.
 *
 * @property {string} orchestratorType Orchestrator type.
 * @property {string} orchestratorVersion Orchestrator version (major, minor,
 * patch).
 */
export interface OrchestratorProfile {
  orchestratorType: string;
  orchestratorVersion: string;
}

/**
 * @class
 * Initializes a new instance of the ManagedClusterAccessProfile class.
 * @constructor
 * Managed cluster Access Profile.
 *
 * @property {buffer} [kubeConfig] Base64-encoded Kubernetes configuration
 * file.
 */
export interface ManagedClusterAccessProfile extends Resource {
  kubeConfig?: Buffer;
}

/**
 * @class
 * Initializes a new instance of the ManagedClusterPoolUpgradeProfile class.
 * @constructor
 * The list of available upgrade versions.
 *
 * @property {string} kubernetesVersion Kubernetes version (major, minor,
 * patch).
 * @property {string} [name] Pool name.
 * @property {string} osType OsType to be used to specify os type. Choose from
 * Linux and Windows. Default to Linux. Possible values include: 'Linux',
 * 'Windows'. Default value: 'Linux' .
 * @property {array} [upgrades] List of orchestrator types and versions
 * available for upgrade.
 */
export interface ManagedClusterPoolUpgradeProfile {
  kubernetesVersion: string;
  name?: string;
  osType: string;
  upgrades?: string[];
}

/**
 * @class
 * Initializes a new instance of the ManagedClusterUpgradeProfile class.
 * @constructor
 * The list of available upgrades for compute pools.
 *
 * @property {string} [id] Id of upgrade profile.
 * @property {string} [name] Name of upgrade profile.
 * @property {string} [type] Type of upgrade profile.
 * @property {object} controlPlaneProfile The list of available upgrade
 * versions for the control plane.
 * @property {string} [controlPlaneProfile.kubernetesVersion] Kubernetes
 * version (major, minor, patch).
 * @property {string} [controlPlaneProfile.name] Pool name.
 * @property {string} [controlPlaneProfile.osType] OsType to be used to specify
 * os type. Choose from Linux and Windows. Default to Linux. Possible values
 * include: 'Linux', 'Windows'
 * @property {array} [controlPlaneProfile.upgrades] List of orchestrator types
 * and versions available for upgrade.
 * @property {array} agentPoolProfiles The list of available upgrade versions
 * for agent pools.
 */
export interface ManagedClusterUpgradeProfile {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
  controlPlaneProfile: ManagedClusterPoolUpgradeProfile;
  agentPoolProfiles: ManagedClusterPoolUpgradeProfile[];
}

/**
 * @class
 * Initializes a new instance of the CredentialResult class.
 * @constructor
 * The credential result response.
 *
 * @property {string} [name] The name of the credential.
 * @property {buffer} [value] Base64-encoded Kubernetes configuration file.
 */
export interface CredentialResult {
  readonly name?: string;
  readonly value?: Buffer;
}

/**
 * @class
 * Initializes a new instance of the CredentialResults class.
 * @constructor
 * The list of credential result response.
 *
 * @property {array} [kubeconfigs]
 */
export interface CredentialResults {
  readonly kubeconfigs?: CredentialResult[];
}

/**
 * @class
 * Initializes a new instance of the OrchestratorVersionProfile class.
 * @constructor
 * The profile of an orchestrator and its available versions.
 *
 * @property {string} orchestratorType Orchestrator type.
 * @property {string} orchestratorVersion Orchestrator version (major, minor,
 * patch).
 * @property {boolean} default Installed by default if version is not
 * specified.
 * @property {array} upgrades The list of available upgrade versions.
 */
export interface OrchestratorVersionProfile {
  orchestratorType: string;
  orchestratorVersion: string;
  default: boolean;
  upgrades: OrchestratorProfile[];
}

/**
 * @class
 * Initializes a new instance of the OrchestratorVersionProfileListResult class.
 * @constructor
 * The list of versions for supported orchestrators.
 *
 * @property {string} [id] Id of the orchestrator version profile list result.
 * @property {string} [name] Name of the orchestrator version profile list
 * result.
 * @property {string} [type] Type of the orchestrator version profile list
 * result.
 * @property {array} orchestrators List of orchestrator version profiles.
 */
export interface OrchestratorVersionProfileListResult {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
  orchestrators: OrchestratorVersionProfile[];
}


/**
 * @class
 * Initializes a new instance of the ContainerServiceListResult class.
 * @constructor
 * The response from the List Container Services operation.
 *
 * @property {string} [nextLink] The URL to get the next set of container
 * service results.
 */
export interface ContainerServiceListResult extends Array<ContainerService> {
  readonly nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the OperationListResult class.
 * @constructor
 * The List Compute Operation operation response.
 *
 */
export interface OperationListResult extends Array<OperationValue> {
}

/**
 * @class
 * Initializes a new instance of the ManagedClusterListResult class.
 * @constructor
 * The response from the List Managed Clusters operation.
 *
 * @property {string} [nextLink] The URL to get the next set of managed cluster
 * results.
 */
export interface ManagedClusterListResult extends Array<ManagedCluster> {
  readonly nextLink?: string;
}
