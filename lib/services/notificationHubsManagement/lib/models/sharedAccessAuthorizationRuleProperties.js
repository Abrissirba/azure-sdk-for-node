/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * SharedAccessAuthorizationRule properties.
 *
 */
class SharedAccessAuthorizationRuleProperties {
  /**
   * Create a SharedAccessAuthorizationRuleProperties.
   * @property {array} [rights] The rights associated with the rule.
   * @property {string} [primaryKey] A base64-encoded 256-bit primary key for
   * signing and validating the SAS token.
   * @property {string} [secondaryKey] A base64-encoded 256-bit primary key for
   * signing and validating the SAS token.
   * @property {string} [keyName] A string that describes the authorization
   * rule.
   * @property {string} [claimType] A string that describes the claim type
   * @property {string} [claimValue] A string that describes the claim value
   * @property {string} [modifiedTime] The last modified time for this rule
   * @property {string} [createdTime] The created time for this rule
   * @property {number} [revision] The revision number for the rule
   */
  constructor() {
  }

  /**
   * Defines the metadata of SharedAccessAuthorizationRuleProperties
   *
   * @returns {object} metadata of SharedAccessAuthorizationRuleProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SharedAccessAuthorizationRuleProperties',
      type: {
        name: 'Composite',
        className: 'SharedAccessAuthorizationRuleProperties',
        modelProperties: {
          rights: {
            required: false,
            serializedName: 'rights',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'AccessRightsElementType',
                  type: {
                    name: 'Enum',
                    allowedValues: [ 'Manage', 'Send', 'Listen' ]
                  }
              }
            }
          },
          primaryKey: {
            required: false,
            readOnly: true,
            serializedName: 'primaryKey',
            type: {
              name: 'String'
            }
          },
          secondaryKey: {
            required: false,
            readOnly: true,
            serializedName: 'secondaryKey',
            type: {
              name: 'String'
            }
          },
          keyName: {
            required: false,
            readOnly: true,
            serializedName: 'keyName',
            type: {
              name: 'String'
            }
          },
          claimType: {
            required: false,
            readOnly: true,
            serializedName: 'claimType',
            type: {
              name: 'String'
            }
          },
          claimValue: {
            required: false,
            readOnly: true,
            serializedName: 'claimValue',
            type: {
              name: 'String'
            }
          },
          modifiedTime: {
            required: false,
            readOnly: true,
            serializedName: 'modifiedTime',
            type: {
              name: 'String'
            }
          },
          createdTime: {
            required: false,
            readOnly: true,
            serializedName: 'createdTime',
            type: {
              name: 'String'
            }
          },
          revision: {
            required: false,
            readOnly: true,
            serializedName: 'revision',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = SharedAccessAuthorizationRuleProperties;
