/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Class representing a ImportImageParameters.
 */
class ImportImageParameters {
  /**
   * Create a ImportImageParameters.
   * @member {string} sourceRepository Repository name of the source image.
   * @member {string} [sourceTag] The tag name of the source image.  When both
   * source tag and source manifest are omitted the 'latest' tag will be used.
   * Exclusive with SourceManifestDigest.
   * @member {string} [sourceManifestDigest] The manifest sha of the source
   * image. Exclusive with SourceTag.
   * @member {object} source The source of the image.
   * @member {string} [source.resourceId] The resource identifier of the source
   * Azure Container Registry.
   * @member {array} [targetTags] List of strings of the form repo[:tag].  When
   * tag is omitted the source will be used (or 'latest' if source tag is also
   * omitted.)
   * @member {array} [untaggedTargetRepositories] List of strings of repository
   * names to do a manifest only copy.  No tag will be created.
   * @member {string} [mode] When Force, any existing target tags will be
   * overwritten.  When NoForce, any existing target tags will fail the
   * operation before any copying begins.
   * NoForce is the default. Possible values include: 'NoForce', 'Force'
   */
  constructor() {
  }

  /**
   * Defines the metadata of ImportImageParameters
   *
   * @returns {object} metadata of ImportImageParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ImportImageParameters',
      type: {
        name: 'Composite',
        className: 'ImportImageParameters',
        modelProperties: {
          sourceRepository: {
            required: true,
            serializedName: 'sourceRepository',
            type: {
              name: 'String'
            }
          },
          sourceTag: {
            required: false,
            serializedName: 'sourceTag',
            type: {
              name: 'String'
            }
          },
          sourceManifestDigest: {
            required: false,
            serializedName: 'sourceManifestDigest',
            type: {
              name: 'String'
            }
          },
          source: {
            required: true,
            serializedName: 'source',
            type: {
              name: 'Composite',
              className: 'ImportSource'
            }
          },
          targetTags: {
            required: false,
            serializedName: 'targetTags',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          untaggedTargetRepositories: {
            required: false,
            serializedName: 'untaggedTargetRepositories',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          mode: {
            required: false,
            serializedName: 'mode',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ImportImageParameters;
