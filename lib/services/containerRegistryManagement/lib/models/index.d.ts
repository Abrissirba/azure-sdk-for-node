/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource } from 'ms-rest-azure';
import { CloudError } from 'ms-rest-azure';
import * as moment from 'moment';

export { BaseResource } from 'ms-rest-azure';
export { CloudError } from 'ms-rest-azure';


/**
 * @class
 * Initializes a new instance of the ImportSourceCredentials class.
 * @constructor
 * @property {string} [username] The username to authenticate with the source
 * registry.
 * @property {string} password The password used to authenticate with the
 * source registry.
 */
export interface ImportSourceCredentials {
  username?: string;
  password: string;
}

/**
 * @class
 * Initializes a new instance of the ImportSource class.
 * @constructor
 * @property {string} [resourceId] The resource identifier of the source Azure
 * Container Registry.
 * @property {string} [registryUri] The address of the source registry (e.g.
 * 'mcr.microsoft.com').
 * @property {object} [credentials] Credentials used when importing from a
 * registry uri.
 * @property {string} [credentials.username] The username to authenticate with
 * the source registry.
 * @property {string} [credentials.password] The password used to authenticate
 * with the source registry.
 * @property {string} sourceImage Repository name of the source image.
 * Specify an image by repository ('hello-world'). This will use the 'latest'
 * tag.
 * Specify an image by tag ('hello-world:latest').
 * Specify an image by sha256-based manifest digest
 * ('hello-world@sha256:abc123').
 */
export interface ImportSource {
  resourceId?: string;
  registryUri?: string;
  credentials?: ImportSourceCredentials;
  sourceImage: string;
}

/**
 * @class
 * Initializes a new instance of the ImportImageParameters class.
 * @constructor
 * @property {object} source The source of the image.
 * @property {string} [source.resourceId] The resource identifier of the source
 * Azure Container Registry.
 * @property {string} [source.registryUri] The address of the source registry
 * (e.g. 'mcr.microsoft.com').
 * @property {object} [source.credentials] Credentials used when importing from
 * a registry uri.
 * @property {string} [source.credentials.username] The username to
 * authenticate with the source registry.
 * @property {string} [source.credentials.password] The password used to
 * authenticate with the source registry.
 * @property {string} [source.sourceImage] Repository name of the source image.
 * Specify an image by repository ('hello-world'). This will use the 'latest'
 * tag.
 * Specify an image by tag ('hello-world:latest').
 * Specify an image by sha256-based manifest digest
 * ('hello-world@sha256:abc123').
 * @property {array} [targetTags] List of strings of the form repo[:tag]. When
 * tag is omitted the source will be used (or 'latest' if source tag is also
 * omitted).
 * @property {array} [untaggedTargetRepositories] List of strings of repository
 * names to do a manifest only copy. No tag will be created.
 * @property {string} [mode] When Force, any existing target tags will be
 * overwritten. When NoForce, any existing target tags will fail the operation
 * before any copying begins. Possible values include: 'NoForce', 'Force'.
 * Default value: 'NoForce' .
 */
export interface ImportImageParameters {
  source: ImportSource;
  targetTags?: string[];
  untaggedTargetRepositories?: string[];
  mode?: string;
}

/**
 * @class
 * Initializes a new instance of the RegistryNameCheckRequest class.
 * @constructor
 * A request to check whether a container registry name is available.
 *
 * @property {string} name The name of the container registry.
 */
export interface RegistryNameCheckRequest {
  name: string;
}

/**
 * @class
 * Initializes a new instance of the RegistryNameStatus class.
 * @constructor
 * The result of a request to check the availability of a container registry
 * name.
 *
 * @property {boolean} [nameAvailable] The value that indicates whether the
 * name is available.
 * @property {string} [reason] If any, the reason that the name is not
 * available.
 * @property {string} [message] If any, the error message that provides more
 * detail for the reason that the name is not available.
 */
export interface RegistryNameStatus {
  nameAvailable?: boolean;
  reason?: string;
  message?: string;
}

/**
 * @class
 * Initializes a new instance of the OperationDisplayDefinition class.
 * @constructor
 * The display information for a container registry operation.
 *
 * @property {string} [provider] The resource provider name:
 * Microsoft.ContainerRegistry.
 * @property {string} [resource] The resource on which the operation is
 * performed.
 * @property {string} [operation] The operation that users can perform.
 * @property {string} [description] The description for the operation.
 */
export interface OperationDisplayDefinition {
  provider?: string;
  resource?: string;
  operation?: string;
  description?: string;
}

/**
 * @class
 * Initializes a new instance of the OperationMetricSpecificationDefinition class.
 * @constructor
 * The definition of Azure Monitoring metric.
 *
 * @property {string} [name] Metric name.
 * @property {string} [displayName] Metric display name.
 * @property {string} [displayDescription] Metric description.
 * @property {string} [unit] Metric unit.
 * @property {string} [aggregationType] Metric aggregation type.
 * @property {string} [internalMetricName] Internal metric name.
 */
export interface OperationMetricSpecificationDefinition {
  name?: string;
  displayName?: string;
  displayDescription?: string;
  unit?: string;
  aggregationType?: string;
  internalMetricName?: string;
}

/**
 * @class
 * Initializes a new instance of the OperationServiceSpecificationDefinition class.
 * @constructor
 * The definition of Azure Monitoring metrics list.
 *
 * @property {array} [metricSpecifications] A list of Azure Monitoring metrics
 * definition.
 */
export interface OperationServiceSpecificationDefinition {
  metricSpecifications?: OperationMetricSpecificationDefinition[];
}

/**
 * @class
 * Initializes a new instance of the OperationDefinition class.
 * @constructor
 * The definition of a container registry operation.
 *
 * @property {string} [origin] The origin information of the container registry
 * operation.
 * @property {string} [name] Operation name: {provider}/{resource}/{operation}.
 * @property {object} [display] The display information for the container
 * registry operation.
 * @property {string} [display.provider] The resource provider name:
 * Microsoft.ContainerRegistry.
 * @property {string} [display.resource] The resource on which the operation is
 * performed.
 * @property {string} [display.operation] The operation that users can perform.
 * @property {string} [display.description] The description for the operation.
 * @property {object} [serviceSpecification] The definition of Azure Monitoring
 * service.
 * @property {array} [serviceSpecification.metricSpecifications] A list of
 * Azure Monitoring metrics definition.
 */
export interface OperationDefinition {
  origin?: string;
  name?: string;
  display?: OperationDisplayDefinition;
  serviceSpecification?: OperationServiceSpecificationDefinition;
}

/**
 * @class
 * Initializes a new instance of the Sku class.
 * @constructor
 * The SKU of a container registry.
 *
 * @property {string} name The SKU name of the container registry. Required for
 * registry creation. Possible values include: 'Classic', 'Basic', 'Standard',
 * 'Premium'
 * @property {string} [tier] The SKU tier based on the SKU name. Possible
 * values include: 'Classic', 'Basic', 'Standard', 'Premium'
 */
export interface Sku {
  name: string;
  readonly tier?: string;
}

/**
 * @class
 * Initializes a new instance of the Status class.
 * @constructor
 * The status of an Azure resource at the time the operation was called.
 *
 * @property {string} [displayStatus] The short label for the status.
 * @property {string} [message] The detailed message for the status, including
 * alerts and error messages.
 * @property {date} [timestamp] The timestamp when the status was changed to
 * the current value.
 */
export interface Status {
  readonly displayStatus?: string;
  readonly message?: string;
  readonly timestamp?: Date;
}

/**
 * @class
 * Initializes a new instance of the StorageAccountProperties class.
 * @constructor
 * The properties of a storage account for a container registry. Only
 * applicable to Classic SKU.
 *
 * @property {string} id The resource ID of the storage account.
 */
export interface StorageAccountProperties {
  id: string;
}

/**
 * @class
 * Initializes a new instance of the Resource class.
 * @constructor
 * An Azure resource.
 *
 * @property {string} [id] The resource ID.
 * @property {string} [name] The name of the resource.
 * @property {string} [type] The type of the resource.
 * @property {string} location The location of the resource. This cannot be
 * changed after the resource is created.
 * @property {object} [tags] The tags of the resource.
 */
export interface Resource extends BaseResource {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
  location: string;
  tags?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the Registry class.
 * @constructor
 * An object that represents a container registry.
 *
 * @property {object} sku The SKU of the container registry.
 * @property {string} [sku.name] The SKU name of the container registry.
 * Required for registry creation. Possible values include: 'Classic', 'Basic',
 * 'Standard', 'Premium'
 * @property {string} [sku.tier] The SKU tier based on the SKU name. Possible
 * values include: 'Classic', 'Basic', 'Standard', 'Premium'
 * @property {string} [loginServer] The URL that can be used to log into the
 * container registry.
 * @property {date} [creationDate] The creation date of the container registry
 * in ISO8601 format.
 * @property {string} [provisioningState] The provisioning state of the
 * container registry at the time the operation was called. Possible values
 * include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed',
 * 'Canceled'
 * @property {object} [status] The status of the container registry at the time
 * the operation was called.
 * @property {string} [status.displayStatus] The short label for the status.
 * @property {string} [status.message] The detailed message for the status,
 * including alerts and error messages.
 * @property {date} [status.timestamp] The timestamp when the status was
 * changed to the current value.
 * @property {boolean} [adminUserEnabled] The value that indicates whether the
 * admin user is enabled. Default value: false .
 * @property {object} [storageAccount] The properties of the storage account
 * for the container registry. Only applicable to Classic SKU.
 * @property {string} [storageAccount.id] The resource ID of the storage
 * account.
 */
export interface Registry extends Resource {
  sku: Sku;
  readonly loginServer?: string;
  readonly creationDate?: Date;
  readonly provisioningState?: string;
  readonly status?: Status;
  adminUserEnabled?: boolean;
  storageAccount?: StorageAccountProperties;
}

/**
 * @class
 * Initializes a new instance of the RegistryUpdateParameters class.
 * @constructor
 * The parameters for updating a container registry.
 *
 * @property {object} [tags] The tags for the container registry.
 * @property {object} [sku] The SKU of the container registry.
 * @property {string} [sku.name] The SKU name of the container registry.
 * Required for registry creation. Possible values include: 'Classic', 'Basic',
 * 'Standard', 'Premium'
 * @property {string} [sku.tier] The SKU tier based on the SKU name. Possible
 * values include: 'Classic', 'Basic', 'Standard', 'Premium'
 * @property {boolean} [adminUserEnabled] The value that indicates whether the
 * admin user is enabled.
 * @property {object} [storageAccount] The parameters of a storage account for
 * the container registry. Only applicable to Classic SKU. If specified, the
 * storage account must be in the same physical location as the container
 * registry.
 * @property {string} [storageAccount.id] The resource ID of the storage
 * account.
 */
export interface RegistryUpdateParameters {
  tags?: { [propertyName: string]: string };
  sku?: Sku;
  adminUserEnabled?: boolean;
  storageAccount?: StorageAccountProperties;
}

/**
 * @class
 * Initializes a new instance of the RegistryPassword class.
 * @constructor
 * The login password for the container registry.
 *
 * @property {string} [name] The password name. Possible values include:
 * 'password', 'password2'
 * @property {string} [value] The password value.
 */
export interface RegistryPassword {
  name?: string;
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the RegistryListCredentialsResult class.
 * @constructor
 * The response from the ListCredentials operation.
 *
 * @property {string} [username] The username for a container registry.
 * @property {array} [passwords] The list of passwords for a container
 * registry.
 */
export interface RegistryListCredentialsResult {
  username?: string;
  passwords?: RegistryPassword[];
}

/**
 * @class
 * Initializes a new instance of the RegenerateCredentialParameters class.
 * @constructor
 * The parameters used to regenerate the login credential.
 *
 * @property {string} name Specifies name of the password which should be
 * regenerated -- password or password2. Possible values include: 'password',
 * 'password2'
 */
export interface RegenerateCredentialParameters {
  name: string;
}

/**
 * @class
 * Initializes a new instance of the RegistryUsage class.
 * @constructor
 * The quota usage for a container registry.
 *
 * @property {string} [name] The name of the usage.
 * @property {number} [limit] The limit of the usage.
 * @property {number} [currentValue] The current value of the usage.
 * @property {string} [unit] The unit of measurement. Possible values include:
 * 'Count', 'Bytes'
 */
export interface RegistryUsage {
  name?: string;
  limit?: number;
  currentValue?: number;
  unit?: string;
}

/**
 * @class
 * Initializes a new instance of the RegistryUsageListResult class.
 * @constructor
 * The result of a request to get container registry quota usages.
 *
 * @property {array} [value] The list of container registry quota usages.
 */
export interface RegistryUsageListResult {
  value?: RegistryUsage[];
}

/**
 * @class
 * Initializes a new instance of the QuarantinePolicy class.
 * @constructor
 * An object that represents quarantine policy for a container registry.
 *
 * @property {string} [status] The value that indicates whether the policy is
 * enabled or not. Possible values include: 'enabled', 'disabled'
 */
export interface QuarantinePolicy {
  status?: string;
}

/**
 * @class
 * Initializes a new instance of the TrustPolicy class.
 * @constructor
 * An object that represents content trust policy for a container registry.
 *
 * @property {string} [type] The type of trust policy. Possible values include:
 * 'Notary'
 * @property {string} [status] The value that indicates whether the policy is
 * enabled or not. Possible values include: 'enabled', 'disabled'
 */
export interface TrustPolicy {
  type?: string;
  status?: string;
}

/**
 * @class
 * Initializes a new instance of the RegistryPolicies class.
 * @constructor
 * An object that represents policies for a container registry.
 *
 * @property {object} [quarantinePolicy] An object that represents quarantine
 * policy for a container registry.
 * @property {string} [quarantinePolicy.status] The value that indicates
 * whether the policy is enabled or not. Possible values include: 'enabled',
 * 'disabled'
 * @property {object} [trustPolicy] An object that represents content trust
 * policy for a container registry.
 * @property {string} [trustPolicy.type] The type of trust policy. Possible
 * values include: 'Notary'
 * @property {string} [trustPolicy.status] The value that indicates whether the
 * policy is enabled or not. Possible values include: 'enabled', 'disabled'
 */
export interface RegistryPolicies {
  quarantinePolicy?: QuarantinePolicy;
  trustPolicy?: TrustPolicy;
}

/**
 * @class
 * Initializes a new instance of the Replication class.
 * @constructor
 * An object that represents a replication for a container registry.
 *
 * @property {string} [provisioningState] The provisioning state of the
 * replication at the time the operation was called. Possible values include:
 * 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'
 * @property {object} [status] The status of the replication at the time the
 * operation was called.
 * @property {string} [status.displayStatus] The short label for the status.
 * @property {string} [status.message] The detailed message for the status,
 * including alerts and error messages.
 * @property {date} [status.timestamp] The timestamp when the status was
 * changed to the current value.
 */
export interface Replication extends Resource {
  readonly provisioningState?: string;
  readonly status?: Status;
}

/**
 * @class
 * Initializes a new instance of the ReplicationUpdateParameters class.
 * @constructor
 * The parameters for updating a replication.
 *
 * @property {object} [tags] The tags for the replication.
 */
export interface ReplicationUpdateParameters {
  tags?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the Webhook class.
 * @constructor
 * An object that represents a webhook for a container registry.
 *
 * @property {string} [status] The status of the webhook at the time the
 * operation was called. Possible values include: 'enabled', 'disabled'
 * @property {string} [scope] The scope of repositories where the event can be
 * triggered. For example, 'foo:*' means events for all tags under repository
 * 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to
 * 'foo:latest'. Empty means all events.
 * @property {array} actions The list of actions that trigger the webhook to
 * post notifications.
 * @property {string} [provisioningState] The provisioning state of the webhook
 * at the time the operation was called. Possible values include: 'Creating',
 * 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'
 */
export interface Webhook extends Resource {
  status?: string;
  scope?: string;
  actions: string[];
  readonly provisioningState?: string;
}

/**
 * @class
 * Initializes a new instance of the WebhookCreateParameters class.
 * @constructor
 * The parameters for creating a webhook.
 *
 * @property {object} [tags] The tags for the webhook.
 * @property {string} location The location of the webhook. This cannot be
 * changed after the resource is created.
 * @property {string} serviceUri The service URI for the webhook to post
 * notifications.
 * @property {object} [customHeaders] Custom headers that will be added to the
 * webhook notifications.
 * @property {string} [status] The status of the webhook at the time the
 * operation was called. Possible values include: 'enabled', 'disabled'
 * @property {string} [scope] The scope of repositories where the event can be
 * triggered. For example, 'foo:*' means events for all tags under repository
 * 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to
 * 'foo:latest'. Empty means all events.
 * @property {array} actions The list of actions that trigger the webhook to
 * post notifications.
 */
export interface WebhookCreateParameters {
  tags?: { [propertyName: string]: string };
  location: string;
  serviceUri: string;
  customHeaders?: { [propertyName: string]: string };
  status?: string;
  scope?: string;
  actions: string[];
}

/**
 * @class
 * Initializes a new instance of the WebhookUpdateParameters class.
 * @constructor
 * The parameters for updating a webhook.
 *
 * @property {object} [tags] The tags for the webhook.
 * @property {string} [serviceUri] The service URI for the webhook to post
 * notifications.
 * @property {object} [customHeaders] Custom headers that will be added to the
 * webhook notifications.
 * @property {string} [status] The status of the webhook at the time the
 * operation was called. Possible values include: 'enabled', 'disabled'
 * @property {string} [scope] The scope of repositories where the event can be
 * triggered. For example, 'foo:*' means events for all tags under repository
 * 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to
 * 'foo:latest'. Empty means all events.
 * @property {array} [actions] The list of actions that trigger the webhook to
 * post notifications.
 */
export interface WebhookUpdateParameters {
  tags?: { [propertyName: string]: string };
  serviceUri?: string;
  customHeaders?: { [propertyName: string]: string };
  status?: string;
  scope?: string;
  actions?: string[];
}

/**
 * @class
 * Initializes a new instance of the EventInfo class.
 * @constructor
 * The basic information of an event.
 *
 * @property {string} [id] The event ID.
 */
export interface EventInfo {
  id?: string;
}

/**
 * @class
 * Initializes a new instance of the CallbackConfig class.
 * @constructor
 * The configuration of service URI and custom headers for the webhook.
 *
 * @property {string} serviceUri The service URI for the webhook to post
 * notifications.
 * @property {object} [customHeaders] Custom headers that will be added to the
 * webhook notifications.
 */
export interface CallbackConfig {
  serviceUri: string;
  customHeaders?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the Target class.
 * @constructor
 * The target of the event.
 *
 * @property {string} [mediaType] The MIME type of the referenced object.
 * @property {number} [size] The number of bytes of the content. Same as Length
 * field.
 * @property {string} [digest] The digest of the content, as defined by the
 * Registry V2 HTTP API Specification.
 * @property {number} [length] The number of bytes of the content. Same as Size
 * field.
 * @property {string} [repository] The repository name.
 * @property {string} [url] The direct URL to the content.
 * @property {string} [tag] The tag name.
 */
export interface Target {
  mediaType?: string;
  size?: number;
  digest?: string;
  length?: number;
  repository?: string;
  url?: string;
  tag?: string;
}

/**
 * @class
 * Initializes a new instance of the Request class.
 * @constructor
 * The request that generated the event.
 *
 * @property {string} [id] The ID of the request that initiated the event.
 * @property {string} [addr] The IP or hostname and possibly port of the client
 * connection that initiated the event. This is the RemoteAddr from the
 * standard http request.
 * @property {string} [host] The externally accessible hostname of the registry
 * instance, as specified by the http host header on incoming requests.
 * @property {string} [method] The request method that generated the event.
 * @property {string} [useragent] The user agent header of the request.
 */
export interface Request {
  id?: string;
  addr?: string;
  host?: string;
  method?: string;
  useragent?: string;
}

/**
 * @class
 * Initializes a new instance of the Actor class.
 * @constructor
 * The agent that initiated the event. For most situations, this could be from
 * the authorization context of the request.
 *
 * @property {string} [name] The subject or username associated with the
 * request context that generated the event.
 */
export interface Actor {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the Source class.
 * @constructor
 * The registry node that generated the event. Put differently, while the actor
 * initiates the event, the source generates it.
 *
 * @property {string} [addr] The IP or hostname and the port of the registry
 * node that generated the event. Generally, this will be resolved by
 * os.Hostname() along with the running port.
 * @property {string} [instanceID] The running instance of an application.
 * Changes after each restart.
 */
export interface Source {
  addr?: string;
  instanceID?: string;
}

/**
 * @class
 * Initializes a new instance of the EventContent class.
 * @constructor
 * The content of the event request message.
 *
 * @property {string} [id] The event ID.
 * @property {date} [timestamp] The time at which the event occurred.
 * @property {string} [action] The action that encompasses the provided event.
 * @property {object} [target] The target of the event.
 * @property {string} [target.mediaType] The MIME type of the referenced
 * object.
 * @property {number} [target.size] The number of bytes of the content. Same as
 * Length field.
 * @property {string} [target.digest] The digest of the content, as defined by
 * the Registry V2 HTTP API Specification.
 * @property {number} [target.length] The number of bytes of the content. Same
 * as Size field.
 * @property {string} [target.repository] The repository name.
 * @property {string} [target.url] The direct URL to the content.
 * @property {string} [target.tag] The tag name.
 * @property {object} [request] The request that generated the event.
 * @property {string} [request.id] The ID of the request that initiated the
 * event.
 * @property {string} [request.addr] The IP or hostname and possibly port of
 * the client connection that initiated the event. This is the RemoteAddr from
 * the standard http request.
 * @property {string} [request.host] The externally accessible hostname of the
 * registry instance, as specified by the http host header on incoming
 * requests.
 * @property {string} [request.method] The request method that generated the
 * event.
 * @property {string} [request.useragent] The user agent header of the request.
 * @property {object} [actor] The agent that initiated the event. For most
 * situations, this could be from the authorization context of the request.
 * @property {string} [actor.name] The subject or username associated with the
 * request context that generated the event.
 * @property {object} [source] The registry node that generated the event. Put
 * differently, while the actor initiates the event, the source generates it.
 * @property {string} [source.addr] The IP or hostname and the port of the
 * registry node that generated the event. Generally, this will be resolved by
 * os.Hostname() along with the running port.
 * @property {string} [source.instanceID] The running instance of an
 * application. Changes after each restart.
 */
export interface EventContent {
  id?: string;
  timestamp?: Date;
  action?: string;
  target?: Target;
  request?: Request;
  actor?: Actor;
  source?: Source;
}

/**
 * @class
 * Initializes a new instance of the EventRequestMessage class.
 * @constructor
 * The event request message sent to the service URI.
 *
 * @property {object} [content] The content of the event request message.
 * @property {string} [content.id] The event ID.
 * @property {date} [content.timestamp] The time at which the event occurred.
 * @property {string} [content.action] The action that encompasses the provided
 * event.
 * @property {object} [content.target] The target of the event.
 * @property {string} [content.target.mediaType] The MIME type of the
 * referenced object.
 * @property {number} [content.target.size] The number of bytes of the content.
 * Same as Length field.
 * @property {string} [content.target.digest] The digest of the content, as
 * defined by the Registry V2 HTTP API Specification.
 * @property {number} [content.target.length] The number of bytes of the
 * content. Same as Size field.
 * @property {string} [content.target.repository] The repository name.
 * @property {string} [content.target.url] The direct URL to the content.
 * @property {string} [content.target.tag] The tag name.
 * @property {object} [content.request] The request that generated the event.
 * @property {string} [content.request.id] The ID of the request that initiated
 * the event.
 * @property {string} [content.request.addr] The IP or hostname and possibly
 * port of the client connection that initiated the event. This is the
 * RemoteAddr from the standard http request.
 * @property {string} [content.request.host] The externally accessible hostname
 * of the registry instance, as specified by the http host header on incoming
 * requests.
 * @property {string} [content.request.method] The request method that
 * generated the event.
 * @property {string} [content.request.useragent] The user agent header of the
 * request.
 * @property {object} [content.actor] The agent that initiated the event. For
 * most situations, this could be from the authorization context of the
 * request.
 * @property {string} [content.actor.name] The subject or username associated
 * with the request context that generated the event.
 * @property {object} [content.source] The registry node that generated the
 * event. Put differently, while the actor initiates the event, the source
 * generates it.
 * @property {string} [content.source.addr] The IP or hostname and the port of
 * the registry node that generated the event. Generally, this will be resolved
 * by os.Hostname() along with the running port.
 * @property {string} [content.source.instanceID] The running instance of an
 * application. Changes after each restart.
 * @property {object} [headers] The headers of the event request message.
 * @property {string} [method] The HTTP method used to send the event request
 * message.
 * @property {string} [requestUri] The URI used to send the event request
 * message.
 * @property {string} [version] The HTTP message version.
 */
export interface EventRequestMessage {
  content?: EventContent;
  headers?: { [propertyName: string]: string };
  method?: string;
  requestUri?: string;
  version?: string;
}

/**
 * @class
 * Initializes a new instance of the EventResponseMessage class.
 * @constructor
 * The event response message received from the service URI.
 *
 * @property {string} [content] The content of the event response message.
 * @property {object} [headers] The headers of the event response message.
 * @property {string} [reasonPhrase] The reason phrase of the event response
 * message.
 * @property {string} [statusCode] The status code of the event response
 * message.
 * @property {string} [version] The HTTP message version.
 */
export interface EventResponseMessage {
  content?: string;
  headers?: { [propertyName: string]: string };
  reasonPhrase?: string;
  statusCode?: string;
  version?: string;
}

/**
 * @class
 * Initializes a new instance of the Event class.
 * @constructor
 * The event for a webhook.
 *
 * @property {object} [eventRequestMessage] The event request message sent to
 * the service URI.
 * @property {object} [eventRequestMessage.content] The content of the event
 * request message.
 * @property {string} [eventRequestMessage.content.id] The event ID.
 * @property {date} [eventRequestMessage.content.timestamp] The time at which
 * the event occurred.
 * @property {string} [eventRequestMessage.content.action] The action that
 * encompasses the provided event.
 * @property {object} [eventRequestMessage.content.target] The target of the
 * event.
 * @property {string} [eventRequestMessage.content.target.mediaType] The MIME
 * type of the referenced object.
 * @property {number} [eventRequestMessage.content.target.size] The number of
 * bytes of the content. Same as Length field.
 * @property {string} [eventRequestMessage.content.target.digest] The digest of
 * the content, as defined by the Registry V2 HTTP API Specification.
 * @property {number} [eventRequestMessage.content.target.length] The number of
 * bytes of the content. Same as Size field.
 * @property {string} [eventRequestMessage.content.target.repository] The
 * repository name.
 * @property {string} [eventRequestMessage.content.target.url] The direct URL
 * to the content.
 * @property {string} [eventRequestMessage.content.target.tag] The tag name.
 * @property {object} [eventRequestMessage.content.request] The request that
 * generated the event.
 * @property {string} [eventRequestMessage.content.request.id] The ID of the
 * request that initiated the event.
 * @property {string} [eventRequestMessage.content.request.addr] The IP or
 * hostname and possibly port of the client connection that initiated the
 * event. This is the RemoteAddr from the standard http request.
 * @property {string} [eventRequestMessage.content.request.host] The externally
 * accessible hostname of the registry instance, as specified by the http host
 * header on incoming requests.
 * @property {string} [eventRequestMessage.content.request.method] The request
 * method that generated the event.
 * @property {string} [eventRequestMessage.content.request.useragent] The user
 * agent header of the request.
 * @property {object} [eventRequestMessage.content.actor] The agent that
 * initiated the event. For most situations, this could be from the
 * authorization context of the request.
 * @property {string} [eventRequestMessage.content.actor.name] The subject or
 * username associated with the request context that generated the event.
 * @property {object} [eventRequestMessage.content.source] The registry node
 * that generated the event. Put differently, while the actor initiates the
 * event, the source generates it.
 * @property {string} [eventRequestMessage.content.source.addr] The IP or
 * hostname and the port of the registry node that generated the event.
 * Generally, this will be resolved by os.Hostname() along with the running
 * port.
 * @property {string} [eventRequestMessage.content.source.instanceID] The
 * running instance of an application. Changes after each restart.
 * @property {object} [eventRequestMessage.headers] The headers of the event
 * request message.
 * @property {string} [eventRequestMessage.method] The HTTP method used to send
 * the event request message.
 * @property {string} [eventRequestMessage.requestUri] The URI used to send the
 * event request message.
 * @property {string} [eventRequestMessage.version] The HTTP message version.
 * @property {object} [eventResponseMessage] The event response message
 * received from the service URI.
 * @property {string} [eventResponseMessage.content] The content of the event
 * response message.
 * @property {object} [eventResponseMessage.headers] The headers of the event
 * response message.
 * @property {string} [eventResponseMessage.reasonPhrase] The reason phrase of
 * the event response message.
 * @property {string} [eventResponseMessage.statusCode] The status code of the
 * event response message.
 * @property {string} [eventResponseMessage.version] The HTTP message version.
 */
export interface Event extends EventInfo {
  eventRequestMessage?: EventRequestMessage;
  eventResponseMessage?: EventResponseMessage;
}

/**
 * @class
 * Initializes a new instance of the RunRequest class.
 * @constructor
 * The request parameters for scheduling a run.
 *
 * @property {boolean} [isArchiveEnabled] The value that indicates whether
 * archiving is enabled for the run or not. Default value: false .
 * @property {string} type Polymorphic Discriminator
 */
export interface RunRequest {
  isArchiveEnabled?: boolean;
  type: string;
}

/**
 * @class
 * Initializes a new instance of the ImageDescriptor class.
 * @constructor
 * Properties for a registry image.
 *
 * @property {string} [registry] The registry login server.
 * @property {string} [repository] The repository name.
 * @property {string} [tag] The tag name.
 * @property {string} [digest] The sha256-based digest of the image manifest.
 */
export interface ImageDescriptor {
  registry?: string;
  repository?: string;
  tag?: string;
  digest?: string;
}

/**
 * @class
 * Initializes a new instance of the ImageUpdateTrigger class.
 * @constructor
 * The image update trigger that caused a build.
 *
 * @property {string} [id] The unique ID of the trigger.
 * @property {date} [timestamp] The timestamp when the image update happened.
 * @property {array} [images] The list of image updates that caused the build.
 */
export interface ImageUpdateTrigger {
  id?: string;
  timestamp?: Date;
  images?: ImageDescriptor[];
}

/**
 * @class
 * Initializes a new instance of the SourceTriggerDescriptor class.
 * @constructor
 * The source trigger that caused a run.
 *
 * @property {string} [id] The unique ID of the trigger.
 * @property {string} [eventType] The event type of the trigger.
 * @property {string} [commitId] The unique ID that identifies a commit.
 * @property {string} [pullRequestId] The unique ID that identifies pull
 * request.
 * @property {string} [repositoryUrl] The repository URL.
 * @property {string} [branchName] The branch name in the repository.
 * @property {string} [providerType] The source control provider type.
 */
export interface SourceTriggerDescriptor {
  id?: string;
  eventType?: string;
  commitId?: string;
  pullRequestId?: string;
  repositoryUrl?: string;
  branchName?: string;
  providerType?: string;
}

/**
 * @class
 * Initializes a new instance of the PlatformProperties class.
 * @constructor
 * The platform properties against which the run has to happen.
 *
 * @property {string} os The operating system type required for the run.
 * Possible values include: 'Windows', 'Linux'
 * @property {string} [architecture] The OS architecture. Possible values
 * include: 'amd64', 'x86', 'arm'
 * @property {string} [variant] Variant of the CPU. Possible values include:
 * 'v6', 'v7', 'v8'
 */
export interface PlatformProperties {
  os: string;
  architecture?: string;
  variant?: string;
}

/**
 * @class
 * Initializes a new instance of the AgentProperties class.
 * @constructor
 * The properties that determine the run agent configuration.
 *
 * @property {number} [cpu] The CPU configuration in terms of number of cores
 * required for the run.
 */
export interface AgentProperties {
  cpu?: number;
}

/**
 * @class
 * Initializes a new instance of the ProxyResource class.
 * @constructor
 * The resource model definition for a ARM proxy resource. It will have
 * everything other than required location and tags.
 *
 * @property {string} [id] The resource ID.
 * @property {string} [name] The name of the resource.
 * @property {string} [type] The type of the resource.
 */
export interface ProxyResource extends BaseResource {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
}

/**
 * @class
 * Initializes a new instance of the Run class.
 * @constructor
 * Run resource properties
 *
 * @property {string} [runId] The unique identifier for the run.
 * @property {string} [status] The current status of the run. Possible values
 * include: 'Queued', 'Started', 'Running', 'Succeeded', 'Failed', 'Canceled',
 * 'Error', 'Timeout'
 * @property {date} [lastUpdatedTime] The last updated time for the run.
 * @property {string} [runType] The type of run. Possible values include:
 * 'QuickBuild', 'QuickRun', 'AutoBuild', 'AutoRun'
 * @property {date} [createTime] The time the run was scheduled.
 * @property {date} [startTime] The time the run started.
 * @property {date} [finishTime] The time the run finished.
 * @property {array} [outputImages] The list of all images that were generated
 * from the run. This is applicable if the run generates base image
 * dependencies.
 * @property {string} [task] The task against which run was scheduled.
 * @property {object} [imageUpdateTrigger] The image update trigger that caused
 * the run. This is applicable if the task has base image trigger configured.
 * @property {string} [imageUpdateTrigger.id] The unique ID of the trigger.
 * @property {date} [imageUpdateTrigger.timestamp] The timestamp when the image
 * update happened.
 * @property {array} [imageUpdateTrigger.images] The list of image updates that
 * caused the build.
 * @property {object} [sourceTrigger] The source trigger that caused the run.
 * @property {string} [sourceTrigger.id] The unique ID of the trigger.
 * @property {string} [sourceTrigger.eventType] The event type of the trigger.
 * @property {string} [sourceTrigger.commitId] The unique ID that identifies a
 * commit.
 * @property {string} [sourceTrigger.pullRequestId] The unique ID that
 * identifies pull request.
 * @property {string} [sourceTrigger.repositoryUrl] The repository URL.
 * @property {string} [sourceTrigger.branchName] The branch name in the
 * repository.
 * @property {string} [sourceTrigger.providerType] The source control provider
 * type.
 * @property {boolean} [isArchiveEnabled] The value that indicates whether
 * archiving is enabled or not. Default value: false .
 * @property {object} [platform] The platform properties against which the run
 * will happen.
 * @property {string} [platform.os] The operating system type required for the
 * run. Possible values include: 'Windows', 'Linux'
 * @property {string} [platform.architecture] The OS architecture. Possible
 * values include: 'amd64', 'x86', 'arm'
 * @property {string} [platform.variant] Variant of the CPU. Possible values
 * include: 'v6', 'v7', 'v8'
 * @property {object} [agentConfiguration] The machine configuration of the run
 * agent.
 * @property {number} [agentConfiguration.cpu] The CPU configuration in terms
 * of number of cores required for the run.
 * @property {string} [provisioningState] The provisioning state of a run.
 * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded',
 * 'Failed', 'Canceled'
 */
export interface Run extends ProxyResource {
  runId?: string;
  status?: string;
  lastUpdatedTime?: Date;
  runType?: string;
  createTime?: Date;
  startTime?: Date;
  finishTime?: Date;
  outputImages?: ImageDescriptor[];
  task?: string;
  imageUpdateTrigger?: ImageUpdateTrigger;
  sourceTrigger?: SourceTriggerDescriptor;
  isArchiveEnabled?: boolean;
  platform?: PlatformProperties;
  agentConfiguration?: AgentProperties;
  provisioningState?: string;
}

/**
 * @class
 * Initializes a new instance of the SourceUploadDefinition class.
 * @constructor
 * The properties of a response to source upload request.
 *
 * @property {string} [uploadUrl] The URL where the client can upload the
 * source.
 * @property {string} [relativePath] The relative path to the source. This is
 * used to submit the subsequent queue build request.
 */
export interface SourceUploadDefinition {
  uploadUrl?: string;
  relativePath?: string;
}

/**
 * @class
 * Initializes a new instance of the RunFilter class.
 * @constructor
 * Properties that are enabled for Odata querying on runs.
 *
 * @property {string} [runId] The unique identifier for the run.
 * @property {string} [runType] The type of run. Possible values include:
 * 'QuickBuild', 'QuickRun', 'AutoBuild', 'AutoRun'
 * @property {string} [status] The current status of the run. Possible values
 * include: 'Queued', 'Started', 'Running', 'Succeeded', 'Failed', 'Canceled',
 * 'Error', 'Timeout'
 * @property {date} [createTime] The create time for a run.
 * @property {date} [finishTime] The time the run finished.
 * @property {string} [outputImageManifests] The list of comma-separated image
 * manifests that were generated from the run. This is applicable if the run is
 * of
 * build type.
 * @property {boolean} [isArchiveEnabled] The value that indicates whether
 * archiving is enabled or not.
 * @property {string} [taskName] The name of the task that the run corresponds
 * to.
 */
export interface RunFilter {
  runId?: string;
  runType?: string;
  status?: string;
  createTime?: Date;
  finishTime?: Date;
  outputImageManifests?: string;
  isArchiveEnabled?: boolean;
  taskName?: string;
}

/**
 * @class
 * Initializes a new instance of the RunUpdateParameters class.
 * @constructor
 * The set of run properties that can be updated.
 *
 * @property {boolean} [isArchiveEnabled] The value that indicates whether
 * archiving is enabled or not.
 */
export interface RunUpdateParameters {
  isArchiveEnabled?: boolean;
}

/**
 * @class
 * Initializes a new instance of the RunGetLogResult class.
 * @constructor
 * The result of get log link operation.
 *
 * @property {string} [logLink] The link to logs for a run on a azure container
 * registry.
 */
export interface RunGetLogResult {
  logLink?: string;
}

/**
 * @class
 * Initializes a new instance of the BaseImageDependency class.
 * @constructor
 * Properties that describe a base image dependency.
 *
 * @property {string} [type] The type of the base image dependency. Possible
 * values include: 'BuildTime', 'RunTime'
 * @property {string} [registry] The registry login server.
 * @property {string} [repository] The repository name.
 * @property {string} [tag] The tag name.
 * @property {string} [digest] The sha256-based digest of the image manifest.
 */
export interface BaseImageDependency {
  type?: string;
  registry?: string;
  repository?: string;
  tag?: string;
  digest?: string;
}

/**
 * @class
 * Initializes a new instance of the TaskStepProperties class.
 * @constructor
 * Base properties for any task step.
 *
 * @property {array} [baseImageDependencies] List of base image dependencies
 * for a step.
 * @property {string} [contextPath] The URL(absolute or relative) of the source
 * context for the task step.
 * @property {string} [contextAccessToken] The token (git PAT or SAS token of
 * storage account blob) associated with the context for a step.
 * @property {string} type Polymorphic Discriminator
 */
export interface TaskStepProperties {
  readonly baseImageDependencies?: BaseImageDependency[];
  contextPath?: string;
  contextAccessToken?: string;
  type: string;
}

/**
 * @class
 * Initializes a new instance of the AuthInfo class.
 * @constructor
 * The authorization properties for accessing the source code repository.
 *
 * @property {string} tokenType The type of Auth token. Possible values
 * include: 'PAT', 'OAuth'
 * @property {string} token The access token used to access the source control
 * provider.
 * @property {string} [refreshToken] The refresh token used to refresh the
 * access token.
 * @property {string} [scope] The scope of the access token.
 * @property {number} [expiresIn] Time in seconds that the token remains valid
 */
export interface AuthInfo {
  tokenType: string;
  token: string;
  refreshToken?: string;
  scope?: string;
  expiresIn?: number;
}

/**
 * @class
 * Initializes a new instance of the SourceProperties class.
 * @constructor
 * The properties of the source code repository.
 *
 * @property {string} sourceControlType The type of source control service.
 * Possible values include: 'Github', 'VisualStudioTeamService'
 * @property {string} repositoryUrl The full URL to the source code respository
 * @property {string} [branch] The branch name of the source code.
 * @property {object} [sourceControlAuthProperties] The authorization
 * properties for accessing the source code repository and to set up
 * webhooks for notifications.
 * @property {string} [sourceControlAuthProperties.tokenType] The type of Auth
 * token. Possible values include: 'PAT', 'OAuth'
 * @property {string} [sourceControlAuthProperties.token] The access token used
 * to access the source control provider.
 * @property {string} [sourceControlAuthProperties.refreshToken] The refresh
 * token used to refresh the access token.
 * @property {string} [sourceControlAuthProperties.scope] The scope of the
 * access token.
 * @property {number} [sourceControlAuthProperties.expiresIn] Time in seconds
 * that the token remains valid
 */
export interface SourceProperties {
  sourceControlType: string;
  repositoryUrl: string;
  branch?: string;
  sourceControlAuthProperties?: AuthInfo;
}

/**
 * @class
 * Initializes a new instance of the SourceTrigger class.
 * @constructor
 * The properties of a source based trigger.
 *
 * @property {object} sourceRepository The properties that describes the
 * source(code) for the task.
 * @property {string} [sourceRepository.sourceControlType] The type of source
 * control service. Possible values include: 'Github',
 * 'VisualStudioTeamService'
 * @property {string} [sourceRepository.repositoryUrl] The full URL to the
 * source code respository
 * @property {string} [sourceRepository.branch] The branch name of the source
 * code.
 * @property {object} [sourceRepository.sourceControlAuthProperties] The
 * authorization properties for accessing the source code repository and to set
 * up
 * webhooks for notifications.
 * @property {string} [sourceRepository.sourceControlAuthProperties.tokenType]
 * The type of Auth token. Possible values include: 'PAT', 'OAuth'
 * @property {string} [sourceRepository.sourceControlAuthProperties.token] The
 * access token used to access the source control provider.
 * @property {string}
 * [sourceRepository.sourceControlAuthProperties.refreshToken] The refresh
 * token used to refresh the access token.
 * @property {string} [sourceRepository.sourceControlAuthProperties.scope] The
 * scope of the access token.
 * @property {number} [sourceRepository.sourceControlAuthProperties.expiresIn]
 * Time in seconds that the token remains valid
 * @property {array} sourceTriggerEvents The source event corresponding to the
 * trigger.
 * @property {string} [status] The current status of trigger. Possible values
 * include: 'Disabled', 'Enabled'
 * @property {string} name The name of the trigger.
 */
export interface SourceTrigger {
  sourceRepository: SourceProperties;
  sourceTriggerEvents: string[];
  status?: string;
  name: string;
}

/**
 * @class
 * Initializes a new instance of the BaseImageTrigger class.
 * @constructor
 * The trigger based on base image dependency.
 *
 * @property {string} baseImageTriggerType The type of the auto trigger for
 * base image dependency updates. Possible values include: 'All', 'Runtime'
 * @property {string} [status] The current status of trigger. Possible values
 * include: 'Disabled', 'Enabled'
 * @property {string} name The name of the trigger.
 */
export interface BaseImageTrigger {
  baseImageTriggerType: string;
  status?: string;
  name: string;
}

/**
 * @class
 * Initializes a new instance of the TriggerProperties class.
 * @constructor
 * The properties of a trigger.
 *
 * @property {array} [sourceTriggers] The collection of triggers based on
 * source code repository.
 * @property {object} [baseImageTrigger] The trigger based on base image
 * dependencies.
 * @property {string} [baseImageTrigger.baseImageTriggerType] The type of the
 * auto trigger for base image dependency updates. Possible values include:
 * 'All', 'Runtime'
 * @property {string} [baseImageTrigger.status] The current status of trigger.
 * Possible values include: 'Disabled', 'Enabled'
 * @property {string} [baseImageTrigger.name] The name of the trigger.
 */
export interface TriggerProperties {
  sourceTriggers?: SourceTrigger[];
  baseImageTrigger?: BaseImageTrigger;
}

/**
 * @class
 * Initializes a new instance of the Task class.
 * @constructor
 * The task that has the ARM resource and task properties.
 * The  task will have all information to schedule a run against it.
 *
 * @property {string} [provisioningState] The provisioning state of the task.
 * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded',
 * 'Failed', 'Canceled'
 * @property {date} [creationDate] The creation date of task.
 * @property {string} [status] The current status of task. Possible values
 * include: 'Disabled', 'Enabled'
 * @property {object} platform The platform properties against which the run
 * has to happen.
 * @property {string} [platform.os] The operating system type required for the
 * run. Possible values include: 'Windows', 'Linux'
 * @property {string} [platform.architecture] The OS architecture. Possible
 * values include: 'amd64', 'x86', 'arm'
 * @property {string} [platform.variant] Variant of the CPU. Possible values
 * include: 'v6', 'v7', 'v8'
 * @property {object} [agentConfiguration] The machine configuration of the run
 * agent.
 * @property {number} [agentConfiguration.cpu] The CPU configuration in terms
 * of number of cores required for the run.
 * @property {number} [timeout] Run timeout in seconds. Default value: 3600 .
 * @property {object} step The properties of a task step.
 * @property {array} [step.baseImageDependencies] List of base image
 * dependencies for a step.
 * @property {string} [step.contextPath] The URL(absolute or relative) of the
 * source context for the task step.
 * @property {string} [step.contextAccessToken] The token (git PAT or SAS token
 * of storage account blob) associated with the context for a step.
 * @property {string} [step.type] Polymorphic Discriminator
 * @property {object} [trigger] The properties that describe all triggers for
 * the task.
 * @property {array} [trigger.sourceTriggers] The collection of triggers based
 * on source code repository.
 * @property {object} [trigger.baseImageTrigger] The trigger based on base
 * image dependencies.
 * @property {string} [trigger.baseImageTrigger.baseImageTriggerType] The type
 * of the auto trigger for base image dependency updates. Possible values
 * include: 'All', 'Runtime'
 * @property {string} [trigger.baseImageTrigger.status] The current status of
 * trigger. Possible values include: 'Disabled', 'Enabled'
 * @property {string} [trigger.baseImageTrigger.name] The name of the trigger.
 */
export interface Task extends Resource {
  readonly provisioningState?: string;
  readonly creationDate?: Date;
  status?: string;
  platform: PlatformProperties;
  agentConfiguration?: AgentProperties;
  timeout?: number;
  step: TaskStepProperties;
  trigger?: TriggerProperties;
}

/**
 * @class
 * Initializes a new instance of the PlatformUpdateParameters class.
 * @constructor
 * The properties for updating the platform configuration.
 *
 * @property {string} [os] The operating system type required for the run.
 * Possible values include: 'Windows', 'Linux'
 * @property {string} [architecture] The OS architecture. Possible values
 * include: 'amd64', 'x86', 'arm'
 * @property {string} [variant] Variant of the CPU. Possible values include:
 * 'v6', 'v7', 'v8'
 */
export interface PlatformUpdateParameters {
  os?: string;
  architecture?: string;
  variant?: string;
}

/**
 * @class
 * Initializes a new instance of the TaskStepUpdateParameters class.
 * @constructor
 * Base properties for updating any task step.
 *
 * @property {string} [contextPath] The URL(absolute or relative) of the source
 * context for the task step.
 * @property {string} [contextAccessToken] The token (git PAT or SAS token of
 * storage account blob) associated with the context for a step.
 * @property {string} type Polymorphic Discriminator
 */
export interface TaskStepUpdateParameters {
  contextPath?: string;
  contextAccessToken?: string;
  type: string;
}

/**
 * @class
 * Initializes a new instance of the AuthInfoUpdateParameters class.
 * @constructor
 * The authorization properties for accessing the source code repository.
 *
 * @property {string} [tokenType] The type of Auth token. Possible values
 * include: 'PAT', 'OAuth'
 * @property {string} [token] The access token used to access the source
 * control provider.
 * @property {string} [refreshToken] The refresh token used to refresh the
 * access token.
 * @property {string} [scope] The scope of the access token.
 * @property {number} [expiresIn] Time in seconds that the token remains valid
 */
export interface AuthInfoUpdateParameters {
  tokenType?: string;
  token?: string;
  refreshToken?: string;
  scope?: string;
  expiresIn?: number;
}

/**
 * @class
 * Initializes a new instance of the SourceUpdateParameters class.
 * @constructor
 * The properties for updating the source code repository.
 *
 * @property {string} [sourceControlType] The type of source control service.
 * Possible values include: 'Github', 'VisualStudioTeamService'
 * @property {string} [repositoryUrl] The full URL to the source code
 * respository
 * @property {string} [branch] The branch name of the source code.
 * @property {object} [sourceControlAuthProperties] The authorization
 * properties for accessing the source code repository and to set up
 * webhooks for notifications.
 * @property {string} [sourceControlAuthProperties.tokenType] The type of Auth
 * token. Possible values include: 'PAT', 'OAuth'
 * @property {string} [sourceControlAuthProperties.token] The access token used
 * to access the source control provider.
 * @property {string} [sourceControlAuthProperties.refreshToken] The refresh
 * token used to refresh the access token.
 * @property {string} [sourceControlAuthProperties.scope] The scope of the
 * access token.
 * @property {number} [sourceControlAuthProperties.expiresIn] Time in seconds
 * that the token remains valid
 */
export interface SourceUpdateParameters {
  sourceControlType?: string;
  repositoryUrl?: string;
  branch?: string;
  sourceControlAuthProperties?: AuthInfoUpdateParameters;
}

/**
 * @class
 * Initializes a new instance of the SourceTriggerUpdateParameters class.
 * @constructor
 * The properties for updating a source based trigger.
 *
 * @property {object} [sourceRepository] The properties that describes the
 * source(code) for the task.
 * @property {string} [sourceRepository.sourceControlType] The type of source
 * control service. Possible values include: 'Github',
 * 'VisualStudioTeamService'
 * @property {string} [sourceRepository.repositoryUrl] The full URL to the
 * source code respository
 * @property {string} [sourceRepository.branch] The branch name of the source
 * code.
 * @property {object} [sourceRepository.sourceControlAuthProperties] The
 * authorization properties for accessing the source code repository and to set
 * up
 * webhooks for notifications.
 * @property {string} [sourceRepository.sourceControlAuthProperties.tokenType]
 * The type of Auth token. Possible values include: 'PAT', 'OAuth'
 * @property {string} [sourceRepository.sourceControlAuthProperties.token] The
 * access token used to access the source control provider.
 * @property {string}
 * [sourceRepository.sourceControlAuthProperties.refreshToken] The refresh
 * token used to refresh the access token.
 * @property {string} [sourceRepository.sourceControlAuthProperties.scope] The
 * scope of the access token.
 * @property {number} [sourceRepository.sourceControlAuthProperties.expiresIn]
 * Time in seconds that the token remains valid
 * @property {array} [sourceTriggerEvents] The source event corresponding to
 * the trigger.
 * @property {string} [status] The current status of trigger. Possible values
 * include: 'Disabled', 'Enabled'
 * @property {string} name The name of the trigger.
 */
export interface SourceTriggerUpdateParameters {
  sourceRepository?: SourceUpdateParameters;
  sourceTriggerEvents?: string[];
  status?: string;
  name: string;
}

/**
 * @class
 * Initializes a new instance of the BaseImageTriggerUpdateParameters class.
 * @constructor
 * The properties for updating base image dependency trigger.
 *
 * @property {string} [baseImageTriggerType] The type of the auto trigger for
 * base image dependency updates. Possible values include: 'All', 'Runtime'
 * @property {string} [status] The current status of trigger. Possible values
 * include: 'Disabled', 'Enabled'
 * @property {string} name The name of the trigger.
 */
export interface BaseImageTriggerUpdateParameters {
  baseImageTriggerType?: string;
  status?: string;
  name: string;
}

/**
 * @class
 * Initializes a new instance of the TriggerUpdateParameters class.
 * @constructor
 * The properties for updating triggers.
 *
 * @property {array} [sourceTriggers] The collection of triggers based on
 * source code repository.
 * @property {object} [baseImageTrigger] The trigger based on base image
 * dependencies.
 * @property {string} [baseImageTrigger.baseImageTriggerType] The type of the
 * auto trigger for base image dependency updates. Possible values include:
 * 'All', 'Runtime'
 * @property {string} [baseImageTrigger.status] The current status of trigger.
 * Possible values include: 'Disabled', 'Enabled'
 * @property {string} [baseImageTrigger.name] The name of the trigger.
 */
export interface TriggerUpdateParameters {
  sourceTriggers?: SourceTriggerUpdateParameters[];
  baseImageTrigger?: BaseImageTriggerUpdateParameters;
}

/**
 * @class
 * Initializes a new instance of the TaskUpdateParameters class.
 * @constructor
 * The parameters for updating a task.
 *
 * @property {string} [status] The current status of task. Possible values
 * include: 'Disabled', 'Enabled'
 * @property {object} [platform] The platform properties against which the run
 * has to happen.
 * @property {string} [platform.os] The operating system type required for the
 * run. Possible values include: 'Windows', 'Linux'
 * @property {string} [platform.architecture] The OS architecture. Possible
 * values include: 'amd64', 'x86', 'arm'
 * @property {string} [platform.variant] Variant of the CPU. Possible values
 * include: 'v6', 'v7', 'v8'
 * @property {object} [agentConfiguration] The machine configuration of the run
 * agent.
 * @property {number} [agentConfiguration.cpu] The CPU configuration in terms
 * of number of cores required for the run.
 * @property {number} [timeout] Run timeout in seconds.
 * @property {object} [step] The properties for updating a task step.
 * @property {string} [step.contextPath] The URL(absolute or relative) of the
 * source context for the task step.
 * @property {string} [step.contextAccessToken] The token (git PAT or SAS token
 * of storage account blob) associated with the context for a step.
 * @property {string} [step.type] Polymorphic Discriminator
 * @property {object} [trigger] The properties for updating trigger properties.
 * @property {array} [trigger.sourceTriggers] The collection of triggers based
 * on source code repository.
 * @property {object} [trigger.baseImageTrigger] The trigger based on base
 * image dependencies.
 * @property {string} [trigger.baseImageTrigger.baseImageTriggerType] The type
 * of the auto trigger for base image dependency updates. Possible values
 * include: 'All', 'Runtime'
 * @property {string} [trigger.baseImageTrigger.status] The current status of
 * trigger. Possible values include: 'Disabled', 'Enabled'
 * @property {string} [trigger.baseImageTrigger.name] The name of the trigger.
 * @property {object} [tags] The ARM resource tags.
 */
export interface TaskUpdateParameters {
  status?: string;
  platform?: PlatformUpdateParameters;
  agentConfiguration?: AgentProperties;
  timeout?: number;
  step?: TaskStepUpdateParameters;
  trigger?: TriggerUpdateParameters;
  tags?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the Argument class.
 * @constructor
 * The properties of a run argument.
 *
 * @property {string} name The name of the argument.
 * @property {string} value The value of the argument.
 * @property {boolean} [isSecret] Flag to indicate whether the argument
 * represents a secret and want to be removed from build logs. Default value:
 * false .
 */
export interface Argument {
  name: string;
  value: string;
  isSecret?: boolean;
}

/**
 * @class
 * Initializes a new instance of the DockerBuildRequest class.
 * @constructor
 * The parameters for a docker quick build.
 *
 * @property {array} [imageNames] The fully qualified image names including the
 * repository and tag.
 * @property {boolean} [isPushEnabled] The value of this property indicates
 * whether the image built should be pushed to the registry or not. Default
 * value: true .
 * @property {boolean} [noCache] The value of this property indicates whether
 * the image cache is enabled or not. Default value: false .
 * @property {string} dockerFilePath The Docker file path relative to the
 * source location.
 * @property {array} [argumentsProperty] The collection of override arguments
 * to be used when executing the run.
 * @property {number} [timeout] Run timeout in seconds. Default value: 3600 .
 * @property {object} platform The platform properties against which the run
 * has to happen.
 * @property {string} [platform.os] The operating system type required for the
 * run. Possible values include: 'Windows', 'Linux'
 * @property {string} [platform.architecture] The OS architecture. Possible
 * values include: 'amd64', 'x86', 'arm'
 * @property {string} [platform.variant] Variant of the CPU. Possible values
 * include: 'v6', 'v7', 'v8'
 * @property {object} [agentConfiguration] The machine configuration of the run
 * agent.
 * @property {number} [agentConfiguration.cpu] The CPU configuration in terms
 * of number of cores required for the run.
 * @property {string} [sourceLocation] The URL(absolute or relative) of the
 * source context. It can be an URL to a tar or git repoistory.
 * If it is relative URL, the relative path should be obtained from calling
 * listBuildSourceUploadUrl API.
 */
export interface DockerBuildRequest extends RunRequest {
  imageNames?: string[];
  isPushEnabled?: boolean;
  noCache?: boolean;
  dockerFilePath: string;
  argumentsProperty?: Argument[];
  timeout?: number;
  platform: PlatformProperties;
  agentConfiguration?: AgentProperties;
  sourceLocation?: string;
}

/**
 * @class
 * Initializes a new instance of the SetValue class.
 * @constructor
 * The properties of a overridable value that can be passed to a task template.
 *
 * @property {string} name The name of the overridable value.
 * @property {string} value The overridable value.
 * @property {boolean} [isSecret] Flag to indicate whether the value represents
 * a secret or not. Default value: false .
 */
export interface SetValue {
  name: string;
  value: string;
  isSecret?: boolean;
}

/**
 * @class
 * Initializes a new instance of the FileTaskRunRequest class.
 * @constructor
 * The request parameters for a scheduling run against a task file.
 *
 * @property {string} taskFilePath The template/definition file path relative
 * to the source.
 * @property {string} [valuesFilePath] The values/parameters file path relative
 * to the source.
 * @property {array} [values] The collection of overridable values that can be
 * passed when running a task.
 * @property {number} [timeout] Run timeout in seconds. Default value: 3600 .
 * @property {object} platform The platform properties against which the run
 * has to happen.
 * @property {string} [platform.os] The operating system type required for the
 * run. Possible values include: 'Windows', 'Linux'
 * @property {string} [platform.architecture] The OS architecture. Possible
 * values include: 'amd64', 'x86', 'arm'
 * @property {string} [platform.variant] Variant of the CPU. Possible values
 * include: 'v6', 'v7', 'v8'
 * @property {object} [agentConfiguration] The machine configuration of the run
 * agent.
 * @property {number} [agentConfiguration.cpu] The CPU configuration in terms
 * of number of cores required for the run.
 * @property {string} [sourceLocation] The URL(absolute or relative) of the
 * source context. It can be an URL to a tar or git repoistory.
 * If it is relative URL, the relative path should be obtained from calling
 * listBuildSourceUploadUrl API.
 */
export interface FileTaskRunRequest extends RunRequest {
  taskFilePath: string;
  valuesFilePath?: string;
  values?: SetValue[];
  timeout?: number;
  platform: PlatformProperties;
  agentConfiguration?: AgentProperties;
  sourceLocation?: string;
}

/**
 * @class
 * Initializes a new instance of the TaskRunRequest class.
 * @constructor
 * The parameters for a task run request.
 *
 * @property {string} taskName The name of task against which run has to be
 * queued.
 * @property {array} [values] The collection of overridable values that can be
 * passed when running a task.
 */
export interface TaskRunRequest extends RunRequest {
  taskName: string;
  values?: SetValue[];
}

/**
 * @class
 * Initializes a new instance of the EncodedTaskRunRequest class.
 * @constructor
 * The parameters for a quick task run request.
 *
 * @property {string} encodedTaskContent Base64 encoded value of the
 * template/definition file content.
 * @property {string} [encodedValuesContent] Base64 encoded value of the
 * parameters/values file content.
 * @property {array} [values] The collection of overridable values that can be
 * passed when running a task.
 * @property {number} [timeout] Run timeout in seconds. Default value: 3600 .
 * @property {object} platform The platform properties against which the run
 * has to happen.
 * @property {string} [platform.os] The operating system type required for the
 * run. Possible values include: 'Windows', 'Linux'
 * @property {string} [platform.architecture] The OS architecture. Possible
 * values include: 'amd64', 'x86', 'arm'
 * @property {string} [platform.variant] Variant of the CPU. Possible values
 * include: 'v6', 'v7', 'v8'
 * @property {object} [agentConfiguration] The machine configuration of the run
 * agent.
 * @property {number} [agentConfiguration.cpu] The CPU configuration in terms
 * of number of cores required for the run.
 * @property {string} [sourceLocation] The URL(absolute or relative) of the
 * source context. It can be an URL to a tar or git repoistory.
 * If it is relative URL, the relative path should be obtained from calling
 * listBuildSourceUploadUrl API.
 */
export interface EncodedTaskRunRequest extends RunRequest {
  encodedTaskContent: string;
  encodedValuesContent?: string;
  values?: SetValue[];
  timeout?: number;
  platform: PlatformProperties;
  agentConfiguration?: AgentProperties;
  sourceLocation?: string;
}

/**
 * @class
 * Initializes a new instance of the DockerBuildStep class.
 * @constructor
 * The Docker build step.
 *
 * @property {array} [imageNames] The fully qualified image names including the
 * repository and tag.
 * @property {boolean} [isPushEnabled] The value of this property indicates
 * whether the image built should be pushed to the registry or not. Default
 * value: true .
 * @property {boolean} [noCache] The value of this property indicates whether
 * the image cache is enabled or not. Default value: false .
 * @property {string} dockerFilePath The Docker file path relative to the
 * source context.
 * @property {array} [argumentsProperty] The collection of override arguments
 * to be used when executing this build step.
 */
export interface DockerBuildStep extends TaskStepProperties {
  imageNames?: string[];
  isPushEnabled?: boolean;
  noCache?: boolean;
  dockerFilePath: string;
  argumentsProperty?: Argument[];
}

/**
 * @class
 * Initializes a new instance of the FileTaskStep class.
 * @constructor
 * The properties of a task step.
 *
 * @property {string} taskFilePath The task template/definition file path
 * relative to the source context.
 * @property {string} [valuesFilePath] The task values/parameters file path
 * relative to the source context.
 * @property {array} [values] The collection of overridable values that can be
 * passed when running a task.
 */
export interface FileTaskStep extends TaskStepProperties {
  taskFilePath: string;
  valuesFilePath?: string;
  values?: SetValue[];
}

/**
 * @class
 * Initializes a new instance of the EncodedTaskStep class.
 * @constructor
 * The properties of a encoded task step.
 *
 * @property {string} encodedTaskContent Base64 encoded value of the
 * template/definition file content.
 * @property {string} [encodedValuesContent] Base64 encoded value of the
 * parameters/values file content.
 * @property {array} [values] The collection of overridable values that can be
 * passed when running a task.
 */
export interface EncodedTaskStep extends TaskStepProperties {
  encodedTaskContent: string;
  encodedValuesContent?: string;
  values?: SetValue[];
}

/**
 * @class
 * Initializes a new instance of the DockerBuildStepUpdateParameters class.
 * @constructor
 * The properties for updating a docker build step.
 *
 * @property {array} [imageNames] The fully qualified image names including the
 * repository and tag.
 * @property {boolean} [isPushEnabled] The value of this property indicates
 * whether the image built should be pushed to the registry or not.
 * @property {boolean} [noCache] The value of this property indicates whether
 * the image cache is enabled or not.
 * @property {string} [dockerFilePath] The Docker file path relative to the
 * source context.
 * @property {array} [argumentsProperty] The collection of override arguments
 * to be used when executing this build step.
 */
export interface DockerBuildStepUpdateParameters extends TaskStepUpdateParameters {
  imageNames?: string[];
  isPushEnabled?: boolean;
  noCache?: boolean;
  dockerFilePath?: string;
  argumentsProperty?: Argument[];
}

/**
 * @class
 * Initializes a new instance of the FileTaskStepUpdateParameters class.
 * @constructor
 * The properties of updating a task step.
 *
 * @property {string} [taskFilePath] The task template/definition file path
 * relative to the source context.
 * @property {string} [valuesFilePath] The values/parameters file path relative
 * to the source context.
 * @property {array} [values] The collection of overridable values that can be
 * passed when running a task.
 */
export interface FileTaskStepUpdateParameters extends TaskStepUpdateParameters {
  taskFilePath?: string;
  valuesFilePath?: string;
  values?: SetValue[];
}

/**
 * @class
 * Initializes a new instance of the EncodedTaskStepUpdateParameters class.
 * @constructor
 * The properties for updating encoded task step.
 *
 * @property {string} [encodedTaskContent] Base64 encoded value of the
 * template/definition file content.
 * @property {string} [encodedValuesContent] Base64 encoded value of the
 * parameters/values file content.
 * @property {array} [values] The collection of overridable values that can be
 * passed when running a task.
 */
export interface EncodedTaskStepUpdateParameters extends TaskStepUpdateParameters {
  encodedTaskContent?: string;
  encodedValuesContent?: string;
  values?: SetValue[];
}


/**
 * @class
 * Initializes a new instance of the RegistryListResult class.
 * @constructor
 * The result of a request to list container registries.
 *
 * @property {string} [nextLink] The URI that can be used to request the next
 * list of container registries.
 */
export interface RegistryListResult extends Array<Registry> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the OperationListResult class.
 * @constructor
 * The result of a request to list container registry operations.
 *
 * @property {string} [nextLink] The URI that can be used to request the next
 * list of container registry operations.
 */
export interface OperationListResult extends Array<OperationDefinition> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the ReplicationListResult class.
 * @constructor
 * The result of a request to list replications for a container registry.
 *
 * @property {string} [nextLink] The URI that can be used to request the next
 * list of replications.
 */
export interface ReplicationListResult extends Array<Replication> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the WebhookListResult class.
 * @constructor
 * The result of a request to list webhooks for a container registry.
 *
 * @property {string} [nextLink] The URI that can be used to request the next
 * list of webhooks.
 */
export interface WebhookListResult extends Array<Webhook> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the EventListResult class.
 * @constructor
 * The result of a request to list events for a webhook.
 *
 * @property {string} [nextLink] The URI that can be used to request the next
 * list of events.
 */
export interface EventListResult extends Array<Event> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the RunListResult class.
 * @constructor
 * Collection of runs.
 *
 * @property {string} [nextLink] The URI that can be used to request the next
 * set of paged results.
 */
export interface RunListResult extends Array<Run> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the TaskListResult class.
 * @constructor
 * The collection of tasks.
 *
 * @property {string} [nextLink] The URI that can be used to request the next
 * set of paged results.
 */
export interface TaskListResult extends Array<Task> {
  nextLink?: string;
}
