/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource } from 'ms-rest-azure';
import { CloudError } from 'ms-rest-azure';
import * as moment from 'moment';

export { BaseResource } from 'ms-rest-azure';
export { CloudError } from 'ms-rest-azure';


/**
 * @class
 * Initializes a new instance of the ManagementLockOwner class.
 * @constructor
 * Lock owner properties.
 *
 * @property {string} [applicationId] The application ID of the lock owner.
 */
export interface ManagementLockOwner {
  applicationId?: string;
}

/**
 * @class
 * Initializes a new instance of the ManagementLockObject class.
 * @constructor
 * The lock information.
 *
 * @property {string} level The level of the lock. Possible values are:
 * NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users
 * are able to read and modify the resources, but not delete. ReadOnly means
 * authorized users can only read from a resource, but they can't modify or
 * delete it. Possible values include: 'NotSpecified', 'CanNotDelete',
 * 'ReadOnly'
 * @property {string} [notes] Notes about the lock. Maximum of 512 characters.
 * @property {array} [owners] The owners of the lock.
 * @property {string} [id] The resource ID of the lock.
 * @property {string} [type] The resource type of the lock -
 * Microsoft.Authorization/locks.
 * @property {string} [name] The name of the lock.
 */
export interface ManagementLockObject extends BaseResource {
  level: string;
  notes?: string;
  owners?: ManagementLockOwner[];
  readonly id?: string;
  readonly type?: string;
  readonly name?: string;
}

/**
 * @class
 * Initializes a new instance of the OperationDisplay class.
 * @constructor
 * The object that represents the operation.
 *
 * @property {string} [provider] Service provider: Microsoft.Authorization
 * @property {string} [resource] Resource on which the operation is performed:
 * Profile, endpoint, etc.
 * @property {string} [operation] Operation type: Read, write, delete, etc.
 */
export interface OperationDisplay {
  provider?: string;
  resource?: string;
  operation?: string;
}

/**
 * @class
 * Initializes a new instance of the Operation class.
 * @constructor
 * Microsoft.Authorization operation
 *
 * @property {string} [name] Operation name: {provider}/{resource}/{operation}
 * @property {object} [display] The object that represents the operation.
 * @property {string} [display.provider] Service provider:
 * Microsoft.Authorization
 * @property {string} [display.resource] Resource on which the operation is
 * performed: Profile, endpoint, etc.
 * @property {string} [display.operation] Operation type: Read, write, delete,
 * etc.
 */
export interface Operation {
  name?: string;
  display?: OperationDisplay;
}


/**
 * @class
 * Initializes a new instance of the OperationListResult class.
 * @constructor
 * Result of the request to list Microsoft.Authorization operations. It
 * contains a list of operations and a URL link to get the next set of results.
 *
 * @property {string} [nextLink] URL to get the next set of operation list
 * results if there are any.
 */
export interface OperationListResult extends Array<Operation> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the ManagementLockListResult class.
 * @constructor
 * The list of locks.
 *
 * @property {string} [nextLink] The URL to use for getting the next set of
 * results.
 */
export interface ManagementLockListResult extends Array<ManagementLockObject> {
  nextLink?: string;
}
