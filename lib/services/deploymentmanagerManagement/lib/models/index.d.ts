/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource } from 'ms-rest-azure';
import { CloudError } from 'ms-rest-azure';
import * as moment from 'moment';

export { BaseResource } from 'ms-rest-azure';
export { CloudError } from 'ms-rest-azure';


/**
 * @class
 * Initializes a new instance of the Identity class.
 * @constructor
 * Identity for the resource.
 *
 * @property {string} type The identity type.
 * @property {array} identityIds The list of identities.
 */
export interface Identity {
  type: string;
  identityIds: string[];
}

/**
 * @class
 * Initializes a new instance of the PrePostStep class.
 * @constructor
 * The properties that define a step.
 *
 * @property {string} stepId The resource Id of the step to be run.
 */
export interface PrePostStep {
  stepId: string;
}

/**
 * @class
 * Initializes a new instance of the Step class.
 * @constructor
 * The properties that define an Azure Deployment Manager step.
 *
 * @property {string} name The name of the step group.
 * @property {array} [dependsOnStepGroups] The list of step group names on
 * which this step group depends on.
 * @property {array} [preDeploymentSteps] The list of steps to be run before
 * deploying the target.
 * @property {string} deploymentTargetId The resource Id of service unit to be
 * deployed. The service unit should be from the service topology referenced in
 * targetServiceTopologyId
 * @property {array} [postDeploymentSteps] The list of steps to be run after
 * deploying the target.
 */
export interface Step {
  name: string;
  dependsOnStepGroups?: string[];
  preDeploymentSteps?: PrePostStep[];
  deploymentTargetId: string;
  postDeploymentSteps?: PrePostStep[];
}

/**
 * @class
 * Initializes a new instance of the Resource class.
 * @constructor
 * @property {string} [id] Fully qualified resource Id for the resource. Ex -
 * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
 * @property {string} [name] The name of the resource
 * @property {string} [type] The type of the resource. Ex-
 * Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
 */
export interface Resource extends BaseResource {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
}

/**
 * @class
 * Initializes a new instance of the TrackedResource class.
 * @constructor
 * The resource model definition for a ARM tracked top level resource
 *
 * @property {object} [tags] Resource tags.
 * @property {string} location The geo-location where the resource lives
 */
export interface TrackedResource extends Resource {
  tags?: { [propertyName: string]: string };
  location: string;
}

/**
 * @class
 * Initializes a new instance of the RolloutRequest class.
 * @constructor
 * Defines the PUT rollout request body.
 *
 * @property {object} identity Identity for the resource.
 * @property {string} [identity.type] The identity type.
 * @property {array} [identity.identityIds] The list of identities.
 * @property {string} buildVersion The version of the build being deployed.
 * @property {string} [artifactSourceId] The reference to the artifact source
 * resource Id where the payload is located.
 * @property {string} targetServiceTopologyId The resource Id of the service
 * topology from which service units are being referenced in step groups to be
 * deployed.
 * @property {array} stepGroups The list of step groups that define the
 * orchestration.
 */
export interface RolloutRequest extends TrackedResource {
  identity: Identity;
  buildVersion: string;
  artifactSourceId?: string;
  targetServiceTopologyId: string;
  stepGroups: Step[];
}

/**
 * @class
 * Initializes a new instance of the ArtifactSource class.
 * @constructor
 * The resource that defines the source location where the artifacts are
 * located.
 *
 * @property {string} sourceType The type of artifact source used.
 * @property {string} [artifactRoot] The path from the location that the
 * 'authentication' property [say, a SAS URI to the blob container] refers to,
 * to the location of the artifacts. This can be used to differentiate
 * different versions of the artifacts. Or, different types of artifacts like
 * binaries or templates. The location referenced by the authentication
 * property concatenated with this optional artifactRoot path forms the
 * artifact source location where the artifacts are expected to be found.
 * @property {object} authentication The authentication method to use to access
 * the artifact source.
 * @property {string} [authentication.type] Polymorphic Discriminator
 */
export interface ArtifactSource extends TrackedResource {
  sourceType: string;
  artifactRoot?: string;
  authentication: Authentication;
}

/**
 * @class
 * Initializes a new instance of the Authentication class.
 * @constructor
 * Defines the authentication method and properties to access the artifacts.
 *
 * @property {string} type Polymorphic Discriminator
 */
export interface Authentication {
  type: string;
}

/**
 * @class
 * Initializes a new instance of the ArtifactSourcePropertiesModel class.
 * @constructor
 * The properties that define the source location where the artifacts are
 * located.
 *
 * @property {string} sourceType The type of artifact source used.
 * @property {string} [artifactRoot] The path from the location that the
 * 'authentication' property [say, a SAS URI to the blob container] refers to,
 * to the location of the artifacts. This can be used to differentiate
 * different versions of the artifacts. Or, different types of artifacts like
 * binaries or templates. The location referenced by the authentication
 * property concatenated with this optional artifactRoot path forms the
 * artifact source location where the artifacts are expected to be found.
 * @property {object} authentication The authentication method to use to access
 * the artifact source.
 * @property {string} [authentication.type] Polymorphic Discriminator
 */
export interface ArtifactSourcePropertiesModel {
  sourceType: string;
  artifactRoot?: string;
  authentication: Authentication;
}

/**
 * @class
 * Initializes a new instance of the SasAuthentication class.
 * @constructor
 * Defines the properties to access the artifacts using an Azure Storage SAS
 * URI.
 *
 * @property {string} sasUri The SAS URI to the Azure Storage blob container.
 * Any offset from the root of the container to where the artifacts are located
 * can be defined in the artifactRoot.
 */
export interface SasAuthentication extends Authentication {
  sasUri: string;
}

/**
 * @class
 * Initializes a new instance of the CloudErrorBody class.
 * @constructor
 * Detailed error information of any failure.
 *
 * @property {string} [code] Error code string.
 * @property {string} [message] Descriptive error information.
 * @property {string} [target] Error target
 * @property {array} [details] More detailed error information.
 */
export interface CloudErrorBody {
  readonly code?: string;
  readonly message?: string;
  target?: string;
  details?: CloudErrorBody[];
}

/**
 * @class
 * Initializes a new instance of the RolloutOperationInfo class.
 * @constructor
 * Detailed runtime information of the rollout.
 *
 * @property {number} [retryAttempt] The ordinal count of the number of retry
 * attempts on a rollout. 0 if no retries of the rollout have been performed.
 * If the rollout is updated with a PUT, this count is reset to 0.
 * @property {boolean} [skipSucceededOnRetry] True, if all steps that succeeded
 * on the previous run/attempt were chosen to be skipped in this retry attempt.
 * False, otherwise.
 * @property {date} [startTime] The start time of the rollout in UTC.
 * @property {date} [endTime] The start time of the rollout in UTC. This
 * property will not be set if the rollout has not completed yet.
 * @property {object} [error] The detailed error information for any failure.
 * @property {string} [error.code] Error code string.
 * @property {string} [error.message] Descriptive error information.
 * @property {string} [error.target] Error target
 * @property {array} [error.details] More detailed error information.
 */
export interface RolloutOperationInfo {
  readonly retryAttempt?: number;
  readonly skipSucceededOnRetry?: boolean;
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly error?: CloudErrorBody;
}

/**
 * @class
 * Initializes a new instance of the StepOperationInfo class.
 * @constructor
 * Detailed information of a specific step run.
 *
 * @property {string} [deploymentName] The name of the ARM deployment initiated
 * as part of the step.
 * @property {string} [correlationId] Unique identifier to track the request
 * for ARM-based resources.
 * @property {date} [startTime] Start time of the action in UTC.
 * @property {date} [endTime] End time of the action in UTC.
 * @property {date} [lastUpdatedTime] Last time in UTC this operation was
 * updated.
 * @property {object} [error] The errors, if any, for the action.
 * @property {string} [error.code] Error code string.
 * @property {string} [error.message] Descriptive error information.
 * @property {string} [error.target] Error target
 * @property {array} [error.details] More detailed error information.
 */
export interface StepOperationInfo {
  readonly deploymentName?: string;
  readonly correlationId?: string;
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly lastUpdatedTime?: Date;
  error?: CloudErrorBody;
}

/**
 * @class
 * Initializes a new instance of the ResourceOperation class.
 * @constructor
 * Individial resource operation information.
 *
 * @property {string} [resourceName] Name of the resource as specified in the
 * artifacts. For ARM resources, this is the name of the resource specified in
 * the template.
 * @property {string} [operationId] Unique identifier of the operation. For ARM
 * resources, this is the operationId obtained from ARM service.
 * @property {string} [resourceType] Type of the resource as specified in the
 * artifacts. For ARM resources, this is the type of the resource specified in
 * the template.
 * @property {string} [provisioningState] State of the resource deployment. For
 * ARM resources, this is the current provisioning state of the resource.
 * @property {string} [statusMessage] Descriptive information of the resource
 * operation.
 * @property {string} [statusCode] Http status code of the operation.
 */
export interface ResourceOperation {
  resourceName?: string;
  readonly operationId?: string;
  resourceType?: string;
  readonly provisioningState?: string;
  readonly statusMessage?: string;
  readonly statusCode?: string;
}

/**
 * @class
 * Initializes a new instance of the Message class.
 * @constructor
 * Supplementary contextual messages during a rollout.
 *
 * @property {date} [timeStamp] Time in UTC this message was provided.
 * @property {string} [message] The actual message text.
 */
export interface Message {
  readonly timeStamp?: Date;
  readonly message?: string;
}

/**
 * @class
 * Initializes a new instance of the RolloutStep class.
 * @constructor
 * Defines a specific step on a target service unit.
 *
 * @property {string} name Name of the step.
 * @property {string} [status] Current state of the step.
 * @property {string} [stepGroup] The step group the current step is part of.
 * @property {object} [operationInfo] Detailed information of specific action
 * execution.
 * @property {string} [operationInfo.deploymentName] The name of the ARM
 * deployment initiated as part of the step.
 * @property {string} [operationInfo.correlationId] Unique identifier to track
 * the request for ARM-based resources.
 * @property {date} [operationInfo.startTime] Start time of the action in UTC.
 * @property {date} [operationInfo.endTime] End time of the action in UTC.
 * @property {date} [operationInfo.lastUpdatedTime] Last time in UTC this
 * operation was updated.
 * @property {object} [operationInfo.error] The errors, if any, for the action.
 * @property {string} [operationInfo.error.code] Error code string.
 * @property {string} [operationInfo.error.message] Descriptive error
 * information.
 * @property {string} [operationInfo.error.target] Error target
 * @property {array} [operationInfo.error.details] More detailed error
 * information.
 * @property {array} [resourceOperations] Set of resource operations that were
 * performed, if any, on an Azure resource.
 * @property {array} [messages] Supplementary informative messages during
 * rollout.
 */
export interface RolloutStep {
  name: string;
  readonly status?: string;
  stepGroup?: string;
  readonly operationInfo?: StepOperationInfo;
  readonly resourceOperations?: ResourceOperation[];
  readonly messages?: Message[];
}

/**
 * @class
 * Initializes a new instance of the ServiceUnitProperties class.
 * @constructor
 * Defines the properties of a service unit.
 *
 * @property {string} targetResourceGroup The Azure Resource Group to which the
 * resources in the service unit belong to or should be deployed to.
 * @property {string} deploymentMode Describes the type of ARM deployment to be
 * performed on the resource. Possible values include: 'Incremental',
 * 'Complete'
 * @property {object} [artifacts] The artifacts for the service unit.
 * @property {string} [artifacts.templateUri] The full URI of the ARM template
 * file with the SAS token.
 * @property {string} [artifacts.parametersUri] The full URI of the ARM
 * parameters file with the SAS token.
 * @property {string} [artifacts.templateArtifactSourceRelativePath] The path
 * to the ARM template file relative to the artifact source.
 * @property {string} [artifacts.parametersArtifactSourceRelativePath] The path
 * to the ARM parameters file relative to the artifact source.
 */
export interface ServiceUnitProperties {
  targetResourceGroup: string;
  deploymentMode: string;
  artifacts?: ServiceUnitArtifacts;
}

/**
 * @class
 * Initializes a new instance of the ServiceUnit class.
 * @constructor
 * Defines a service unit.
 *
 * @property {string} [name] Name of the service unit.
 * @property {array} [steps] Detailed step information, if present.
 */
export interface ServiceUnit extends ServiceUnitProperties {
  name?: string;
  steps?: RolloutStep[];
}

/**
 * @class
 * Initializes a new instance of the ServiceProperties class.
 * @constructor
 * The properties of a service.
 *
 * @property {string} targetLocation The Azure location to which the resources
 * in the service belong to or should be deployed to.
 * @property {string} targetSubscriptionId The subscription to which the
 * resources in the service belong to or should be deployed to.
 */
export interface ServiceProperties {
  targetLocation: string;
  targetSubscriptionId: string;
}

/**
 * @class
 * Initializes a new instance of the Service class.
 * @constructor
 * Defines a service.
 *
 * @property {string} [name] Name of the service.
 * @property {array} [serviceUnits] The detailed information about the units
 * that make up the service.
 */
export interface Service extends ServiceProperties {
  name?: string;
  serviceUnits?: ServiceUnit[];
}

/**
 * @class
 * Initializes a new instance of the Rollout class.
 * @constructor
 * Defines the rollout.
 *
 * @property {object} [identity] Identity for the resource.
 * @property {string} [identity.type] The identity type.
 * @property {array} [identity.identityIds] The list of identities.
 * @property {string} buildVersion The version of the build being deployed.
 * @property {string} [artifactSourceId] The reference to the artifact source
 * resource Id where the payload is located.
 * @property {string} targetServiceTopologyId The resource Id of the service
 * topology from which service units are being referenced in step groups to be
 * deployed.
 * @property {array} stepGroups The list of step groups that define the
 * orchestration.
 * @property {string} [status] The current status of the rollout.
 * @property {number} [totalRetryAttempts] The cardinal count of total number
 * of retries performed on the rollout at a given time.
 * @property {object} [operationInfo] Operational information of the rollout.
 * @property {number} [operationInfo.retryAttempt] The ordinal count of the
 * number of retry attempts on a rollout. 0 if no retries of the rollout have
 * been performed. If the rollout is updated with a PUT, this count is reset to
 * 0.
 * @property {boolean} [operationInfo.skipSucceededOnRetry] True, if all steps
 * that succeeded on the previous run/attempt were chosen to be skipped in this
 * retry attempt. False, otherwise.
 * @property {date} [operationInfo.startTime] The start time of the rollout in
 * UTC.
 * @property {date} [operationInfo.endTime] The start time of the rollout in
 * UTC. This property will not be set if the rollout has not completed yet.
 * @property {object} [operationInfo.error] The detailed error information for
 * any failure.
 * @property {string} [operationInfo.error.code] Error code string.
 * @property {string} [operationInfo.error.message] Descriptive error
 * information.
 * @property {string} [operationInfo.error.target] Error target
 * @property {array} [operationInfo.error.details] More detailed error
 * information.
 * @property {array} [services] The detailed information on the services being
 * deployed.
 */
export interface Rollout extends TrackedResource {
  identity?: Identity;
  buildVersion: string;
  artifactSourceId?: string;
  targetServiceTopologyId: string;
  stepGroups: Step[];
  readonly status?: string;
  readonly totalRetryAttempts?: number;
  readonly operationInfo?: RolloutOperationInfo;
  readonly services?: Service[];
}

/**
 * @class
 * Initializes a new instance of the RolloutPropertiesModel class.
 * @constructor
 * Defines the properties of a rollout.
 *
 * @property {string} [status] The current status of the rollout.
 * @property {number} [totalRetryAttempts] The cardinal count of total number
 * of retries performed on the rollout at a given time.
 * @property {object} [operationInfo] Operational information of the rollout.
 * @property {number} [operationInfo.retryAttempt] The ordinal count of the
 * number of retry attempts on a rollout. 0 if no retries of the rollout have
 * been performed. If the rollout is updated with a PUT, this count is reset to
 * 0.
 * @property {boolean} [operationInfo.skipSucceededOnRetry] True, if all steps
 * that succeeded on the previous run/attempt were chosen to be skipped in this
 * retry attempt. False, otherwise.
 * @property {date} [operationInfo.startTime] The start time of the rollout in
 * UTC.
 * @property {date} [operationInfo.endTime] The start time of the rollout in
 * UTC. This property will not be set if the rollout has not completed yet.
 * @property {object} [operationInfo.error] The detailed error information for
 * any failure.
 * @property {string} [operationInfo.error.code] Error code string.
 * @property {string} [operationInfo.error.message] Descriptive error
 * information.
 * @property {string} [operationInfo.error.target] Error target
 * @property {array} [operationInfo.error.details] More detailed error
 * information.
 * @property {array} [services] The detailed information on the services being
 * deployed.
 */
export interface RolloutPropertiesModel {
  readonly status?: string;
  readonly totalRetryAttempts?: number;
  readonly operationInfo?: RolloutOperationInfo;
  readonly services?: Service[];
}

/**
 * @class
 * Initializes a new instance of the ServiceTopologyResource class.
 * @constructor
 * The resource representation of a service topology.
 *
 * @property {string} [artifactSourceId] The resource Id of the artifact source
 * that contains the artifacts that can be referenced in the service units.
 */
export interface ServiceTopologyResource extends TrackedResource {
  artifactSourceId?: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceTopologyProperties class.
 * @constructor
 * The properties of a service topology.
 *
 * @property {string} [artifactSourceId] The resource Id of the artifact source
 * that contains the artifacts that can be referenced in the service units.
 */
export interface ServiceTopologyProperties {
  artifactSourceId?: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceResource class.
 * @constructor
 * The resource representation of a service in a service topology.
 *
 * @property {string} targetLocation The Azure location to which the resources
 * in the service belong to or should be deployed to.
 * @property {string} targetSubscriptionId The subscription to which the
 * resources in the service belong to or should be deployed to.
 */
export interface ServiceResource extends TrackedResource {
  targetLocation: string;
  targetSubscriptionId: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceUnitResource class.
 * @constructor
 * Represents the response of a service unit resource.
 *
 * @property {string} targetResourceGroup The Azure Resource Group to which the
 * resources in the service unit belong to or should be deployed to.
 * @property {string} deploymentMode Describes the type of ARM deployment to be
 * performed on the resource. Possible values include: 'Incremental',
 * 'Complete'
 * @property {object} [artifacts] The artifacts for the service unit.
 * @property {string} [artifacts.templateUri] The full URI of the ARM template
 * file with the SAS token.
 * @property {string} [artifacts.parametersUri] The full URI of the ARM
 * parameters file with the SAS token.
 * @property {string} [artifacts.templateArtifactSourceRelativePath] The path
 * to the ARM template file relative to the artifact source.
 * @property {string} [artifacts.parametersArtifactSourceRelativePath] The path
 * to the ARM parameters file relative to the artifact source.
 */
export interface ServiceUnitResource extends TrackedResource {
  targetResourceGroup: string;
  deploymentMode: string;
  artifacts?: ServiceUnitArtifacts;
}

/**
 * @class
 * Initializes a new instance of the ServiceUnitArtifacts class.
 * @constructor
 * Defines the artifacts of a service unit.
 *
 * @property {string} [templateUri] The full URI of the ARM template file with
 * the SAS token.
 * @property {string} [parametersUri] The full URI of the ARM parameters file
 * with the SAS token.
 * @property {string} [templateArtifactSourceRelativePath] The path to the ARM
 * template file relative to the artifact source.
 * @property {string} [parametersArtifactSourceRelativePath] The path to the
 * ARM parameters file relative to the artifact source.
 */
export interface ServiceUnitArtifacts {
  templateUri?: string;
  parametersUri?: string;
  templateArtifactSourceRelativePath?: string;
  parametersArtifactSourceRelativePath?: string;
}

/**
 * @class
 * Initializes a new instance of the OperationDetail class.
 * @constructor
 * The detail about an operation.
 *
 * @property {string} [provider] The name of the provider that supports the
 * operation.
 * @property {string} [resource] The resource type on which this operation can
 * be performed.
 * @property {string} [operation] The name of the operation.
 * @property {string} [description] The description of the operation.
 */
export interface OperationDetail {
  provider?: string;
  resource?: string;
  operation?: string;
  description?: string;
}

/**
 * @class
 * Initializes a new instance of the Operation class.
 * @constructor
 * Represents an operation that can be performed on the service.
 *
 * @property {string} [name] The name of the operation.
 * @property {object} [display] The display name of the operation.
 * @property {string} [display.provider] The name of the provider that supports
 * the operation.
 * @property {string} [display.resource] The resource type on which this
 * operation can be performed.
 * @property {string} [display.operation] The name of the operation.
 * @property {string} [display.description] The description of the operation.
 * @property {string} [origin] The origin of the operation.
 * @property {object} [properties] The properties of the operation.
 */
export interface Operation {
  name?: string;
  display?: OperationDetail;
  origin?: string;
  properties?: any;
}

/**
 * @class
 * Initializes a new instance of the StepProperties class.
 * @constructor
 * The properties of a step resource.
 *
 * @property {string} stepType Polymorphic Discriminator
 */
export interface StepProperties {
  stepType: string;
}

/**
 * @class
 * Initializes a new instance of the StepResource class.
 * @constructor
 * The resource representation of a rollout step.
 *
 * @property {object} properties The properties that define the step.
 * @property {string} [properties.stepType] Polymorphic Discriminator
 */
export interface StepResource extends TrackedResource {
  properties: StepProperties;
}

/**
 * @class
 * Initializes a new instance of the WaitStepAttributes class.
 * @constructor
 * The parameters for the wait step.
 *
 * @property {string} duration The duration in ISO 8601 format of how long the
 * wait should be.
 */
export interface WaitStepAttributes {
  duration: string;
}

/**
 * @class
 * Initializes a new instance of the WaitStepProperties class.
 * @constructor
 * Defines the properties of a Wait step.
 *
 * @property {object} [attributes] The Wait attributes
 * @property {string} [attributes.duration] The duration in ISO 8601 format of
 * how long the wait should be.
 */
export interface WaitStepProperties extends StepProperties {
  attributes?: WaitStepAttributes;
}

/**
 * @class
 * Initializes a new instance of the ProxyResource class.
 * @constructor
 * The resource model definition for a ARM proxy resource. It will have
 * everything other than required location and tags
 *
 */
export interface ProxyResource extends Resource {
}

/**
 * @class
 * Initializes a new instance of the AzureEntityResource class.
 * @constructor
 * The resource model definition for a Azure Resource Manager resource with an
 * etag.
 *
 * @property {string} [etag] Resource Etag.
 */
export interface AzureEntityResource extends Resource {
  readonly etag?: string;
}

