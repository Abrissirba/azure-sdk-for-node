/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as moment from "moment";


/**
 * @class
 * Initializes a new instance of the FaceRectangle class.
 * @constructor
 * An object describing face rectangle.
 *
 * @property {number} [left] X-coordinate of the top left point of the face.
 * @property {number} [top] Y-coordinate of the top left point of the face.
 * @property {number} [width] Width measured from the top-left point of the
 * face.
 * @property {number} [height] Height measured from the top-left point of the
 * face.
 */
export interface FaceRectangle {
  left?: number;
  top?: number;
  width?: number;
  height?: number;
}

/**
 * @class
 * Initializes a new instance of the CelebritiesModel class.
 * @constructor
 * An object describing possible celebrity identification.
 *
 * @property {string} [name] Name of the celebrity.
 * @property {number} [confidence] Level of confidence ranging from 0 to 1.
 * @property {object} [faceRectangle]
 * @property {number} [faceRectangle.left] X-coordinate of the top left point
 * of the face.
 * @property {number} [faceRectangle.top] Y-coordinate of the top left point of
 * the face.
 * @property {number} [faceRectangle.width] Width measured from the top-left
 * point of the face.
 * @property {number} [faceRectangle.height] Height measured from the top-left
 * point of the face.
 */
export interface CelebritiesModel {
  name?: string;
  confidence?: number;
  faceRectangle?: FaceRectangle;
}

/**
 * @class
 * Initializes a new instance of the LandmarksModel class.
 * @constructor
 * A landmark recognized in the image
 *
 * @property {string} [name] Name of the landmark.
 * @property {number} [confidence] Confidence level for the landmark
 * recognition.
 */
export interface LandmarksModel {
  name?: string;
  confidence?: number;
}

/**
 * @class
 * Initializes a new instance of the CategoryDetail class.
 * @constructor
 * An object describing additional category details.
 *
 * @property {array} [celebrities] An array of celebrities if any identified.
 * @property {array} [landmarks] An array of landmarks if any identified.
 */
export interface CategoryDetail {
  celebrities?: CelebritiesModel[];
  landmarks?: LandmarksModel[];
}

/**
 * @class
 * Initializes a new instance of the Category class.
 * @constructor
 * An object describing identified category.
 *
 * @property {string} [name] Name of the category.
 * @property {number} [score] Scoring of the category.
 * @property {object} [detail]
 * @property {array} [detail.celebrities] An array of celebrities if any
 * identified.
 * @property {array} [detail.landmarks] An array of landmarks if any
 * identified.
 */
export interface Category {
  name?: string;
  score?: number;
  detail?: CategoryDetail;
}

/**
 * @class
 * Initializes a new instance of the AdultInfo class.
 * @constructor
 * An object describing whether the image contains adult-oriented content
 * and/or is racy.
 *
 * @property {boolean} [isAdultContent] A value indicating if the image
 * contains adult-oriented content.
 * @property {boolean} [isRacyContent] A value indicating if the image is race.
 * @property {number} [adultScore] Score from 0 to 1 that indicates how much of
 * adult content is within the image.
 * @property {number} [racyScore] Score from 0 to 1 that indicates how
 * suggestive is the image.
 */
export interface AdultInfo {
  isAdultContent?: boolean;
  isRacyContent?: boolean;
  adultScore?: number;
  racyScore?: number;
}

/**
 * @class
 * Initializes a new instance of the ColorInfo class.
 * @constructor
 * An object providing additional metadata describing color attributes.
 *
 * @property {string} [dominantColorForeground] Possible dominant foreground
 * color.
 * @property {string} [dominantColorBackground] Possible dominant background
 * color.
 * @property {array} [dominantColors] An array of possible dominant colors.
 * @property {string} [accentColor] Possible accent color.
 * @property {boolean} [isBWImg] A value indicating if the image is black and
 * white.
 */
export interface ColorInfo {
  dominantColorForeground?: string;
  dominantColorBackground?: string;
  dominantColors?: string[];
  accentColor?: string;
  isBWImg?: boolean;
}

/**
 * @class
 * Initializes a new instance of the ImageType class.
 * @constructor
 * An object providing possible image types and matching confidence levels.
 *
 * @property {number} [clipArtType] Confidence level that the image is a clip
 * art.
 * @property {number} [lineDrawingType] Confidence level that the image is a
 * line drawing.
 */
export interface ImageType {
  clipArtType?: number;
  lineDrawingType?: number;
}

/**
 * @class
 * Initializes a new instance of the ImageTag class.
 * @constructor
 * An image caption, i.e. a brief description of what the image depicts.
 *
 * @property {string} [name] The tag value
 * @property {number} [confidence] The level of confidence the service has in
 * the caption
 * @property {string} [hint] Optional categorization for the tag
 */
export interface ImageTag {
  name?: string;
  confidence?: number;
  hint?: string;
}

/**
 * @class
 * Initializes a new instance of the ImageCaption class.
 * @constructor
 * An image caption, i.e. a brief description of what the image depicts.
 *
 * @property {string} [text] The text of the caption
 * @property {number} [confidence] The level of confidence the service has in
 * the caption
 */
export interface ImageCaption {
  text?: string;
  confidence?: number;
}

/**
 * @class
 * Initializes a new instance of the ImageDescriptionDetails class.
 * @constructor
 * A collection of content tags, along with a list of captions sorted by
 * confidence level, and image metadata.
 *
 * @property {array} [tags] A collection of image tags.
 * @property {array} [captions] A list of captions, sorted by confidence level.
 */
export interface ImageDescriptionDetails {
  tags?: string[];
  captions?: ImageCaption[];
}

/**
 * @class
 * Initializes a new instance of the FaceDescription class.
 * @constructor
 * An object describing a face identified in the image.
 *
 * @property {number} [age] Possible age of the face.
 * @property {string} [gender] Possible gender of the face. Possible values
 * include: 'Male', 'Female'
 * @property {object} [faceRectangle]
 * @property {number} [faceRectangle.left] X-coordinate of the top left point
 * of the face.
 * @property {number} [faceRectangle.top] Y-coordinate of the top left point of
 * the face.
 * @property {number} [faceRectangle.width] Width measured from the top-left
 * point of the face.
 * @property {number} [faceRectangle.height] Height measured from the top-left
 * point of the face.
 */
export interface FaceDescription {
  age?: number;
  gender?: string;
  faceRectangle?: FaceRectangle;
}

/**
 * @class
 * Initializes a new instance of the ImageMetadata class.
 * @constructor
 * Image metadata
 *
 * @property {number} [width] Image width
 * @property {number} [height] Image height
 * @property {string} [format] Image format
 */
export interface ImageMetadata {
  width?: number;
  height?: number;
  format?: string;
}

/**
 * @class
 * Initializes a new instance of the ImageAnalysis class.
 * @constructor
 * Result of AnalyzeImage operation.
 *
 * @property {array} [categories] An array indicating identified categories.
 * @property {object} [adult]
 * @property {boolean} [adult.isAdultContent] A value indicating if the image
 * contains adult-oriented content.
 * @property {boolean} [adult.isRacyContent] A value indicating if the image is
 * race.
 * @property {number} [adult.adultScore] Score from 0 to 1 that indicates how
 * much of adult content is within the image.
 * @property {number} [adult.racyScore] Score from 0 to 1 that indicates how
 * suggestive is the image.
 * @property {object} [color]
 * @property {string} [color.dominantColorForeground] Possible dominant
 * foreground color.
 * @property {string} [color.dominantColorBackground] Possible dominant
 * background color.
 * @property {array} [color.dominantColors] An array of possible dominant
 * colors.
 * @property {string} [color.accentColor] Possible accent color.
 * @property {boolean} [color.isBWImg] A value indicating if the image is black
 * and white.
 * @property {object} [imageType]
 * @property {number} [imageType.clipArtType] Confidence level that the image
 * is a clip art.
 * @property {number} [imageType.lineDrawingType] Confidence level that the
 * image is a line drawing.
 * @property {array} [tags] A list of tags with confidence level.
 * @property {object} [description]
 * @property {array} [description.tags] A collection of image tags.
 * @property {array} [description.captions] A list of captions, sorted by
 * confidence level.
 * @property {array} [faces] An array of possible faces within the image.
 * @property {string} [requestId] Id of the request for tracking purposes.
 * @property {object} [metadata]
 * @property {number} [metadata.width] Image width
 * @property {number} [metadata.height] Image height
 * @property {string} [metadata.format] Image format
 */
export interface ImageAnalysis {
  categories?: Category[];
  adult?: AdultInfo;
  color?: ColorInfo;
  imageType?: ImageType;
  tags?: ImageTag[];
  description?: ImageDescriptionDetails;
  faces?: FaceDescription[];
  requestId?: string;
  metadata?: ImageMetadata;
}

/**
 * @class
 * Initializes a new instance of the OcrWord class.
 * @constructor
 * Information on a recognized word.
 *
 * @property {string} [boundingBox] Bounding box of a recognized word. The four
 * integers represent the x-coordinate of the left edge, the y-coordinate of
 * the top edge, width, and height of the bounding box, in the coordinate
 * system of the input image, after it has been rotated around its center
 * according to the detected text angle (see textAngle property), with the
 * origin at the top-left corner, and the y-axis pointing down.
 * @property {string} [text] String value of a recognized word.
 */
export interface OcrWord {
  boundingBox?: string;
  text?: string;
}

/**
 * @class
 * Initializes a new instance of the OcrLine class.
 * @constructor
 * An object describing a single recognized line of text.
 *
 * @property {string} [boundingBox] Bounding box of a recognized line. The four
 * integers represent the x-coordinate of the left edge, the y-coordinate of
 * the top edge, width, and height of the bounding box, in the coordinate
 * system of the input image, after it has been rotated around its center
 * according to the detected text angle (see textAngle property), with the
 * origin at the top-left corner, and the y-axis pointing down.
 * @property {array} [words] An array of objects, where each object represents
 * a recognized word.
 */
export interface OcrLine {
  boundingBox?: string;
  words?: OcrWord[];
}

/**
 * @class
 * Initializes a new instance of the OcrRegion class.
 * @constructor
 * A region consists of multiple lines (e.g. a column of text in a multi-column
 * document).
 *
 * @property {string} [boundingBox] Bounding box of a recognized region. The
 * four integers represent the x-coordinate of the left edge, the y-coordinate
 * of the top edge, width, and height of the bounding box, in the coordinate
 * system of the input image, after it has been rotated around its center
 * according to the detected text angle (see textAngle property), with the
 * origin at the top-left corner, and the y-axis pointing down.
 * @property {array} [lines]
 */
export interface OcrRegion {
  boundingBox?: string;
  lines?: OcrLine[];
}

/**
 * @class
 * Initializes a new instance of the OcrResult class.
 * @constructor
 * @property {string} [language] The BCP-47 language code of the text in the
 * image.
 * @property {number} [textAngle] The angle, in degrees, of the detected text
 * with respect to the closest horizontal or vertical direction. After rotating
 * the input image clockwise by this angle, the recognized text lines become
 * horizontal or vertical. In combination with the orientation property it can
 * be used to overlay recognition results correctly on the original image, by
 * rotating either the original image or recognition results by a suitable
 * angle around the center of the original image. If the angle cannot be
 * confidently detected, this property is not present. If the image contains
 * text at different angles, only part of the text will be recognized
 * correctly.
 * @property {string} [orientation] Orientation of the text recognized in the
 * image. The value (up,down,left, or right) refers to the direction that the
 * top of the recognized text is facing, after the image has been rotated
 * around its center according to the detected text angle (see textAngle
 * property).
 * @property {array} [regions] An array of objects, where each object
 * represents a region of recognized text.
 */
export interface OcrResult {
  language?: string;
  textAngle?: number;
  orientation?: string;
  regions?: OcrRegion[];
}

/**
 * @class
 * Initializes a new instance of the ModelDescription class.
 * @constructor
 * An object describing supported model by name and categories.
 *
 * @property {string} [name]
 * @property {array} [categories]
 */
export interface ModelDescription {
  name?: string;
  categories?: string[];
}

/**
 * @class
 * Initializes a new instance of the ListModelsResult class.
 * @constructor
 * Result of the List Domain Models operation.
 *
 * @property {array} [modelsProperty] An array of supported models.
 */
export interface ListModelsResult {
  readonly modelsProperty?: ModelDescription[];
}

/**
 * @class
 * Initializes a new instance of the DomainModelResults class.
 * @constructor
 * Result of image analysis using a specific domain model including additional
 * metadata.
 *
 * @property {object} [result] Model-specific response
 * @property {string} [requestId] Id of the REST API request.
 * @property {object} [metadata]
 * @property {number} [metadata.width] Image width
 * @property {number} [metadata.height] Image height
 * @property {string} [metadata.format] Image format
 */
export interface DomainModelResults {
  result?: any;
  requestId?: string;
  metadata?: ImageMetadata;
}

/**
 * @class
 * Initializes a new instance of the CelebrityResults class.
 * @constructor
 * List of celebrities recognized in the image.
 *
 * @property {array} [celebrities]
 * @property {string} [requestId] Id of the REST API request.
 * @property {object} [metadata]
 * @property {number} [metadata.width] Image width
 * @property {number} [metadata.height] Image height
 * @property {string} [metadata.format] Image format
 */
export interface CelebrityResults {
  celebrities?: CelebritiesModel[];
  requestId?: string;
  metadata?: ImageMetadata;
}

/**
 * @class
 * Initializes a new instance of the LandmarkResults class.
 * @constructor
 * List of landmarks recognized in the image.
 *
 * @property {array} [landmarks]
 * @property {string} [requestId] Id of the REST API request.
 * @property {object} [metadata]
 * @property {number} [metadata.width] Image width
 * @property {number} [metadata.height] Image height
 * @property {string} [metadata.format] Image format
 */
export interface LandmarkResults {
  landmarks?: LandmarksModel[];
  requestId?: string;
  metadata?: ImageMetadata;
}

/**
 * @class
 * Initializes a new instance of the ImageDescription class.
 * @constructor
 * A collection of content tags, along with a list of captions sorted by
 * confidence level, and image metadata.
 *
 * @property {array} [tags] A collection of image tags.
 * @property {array} [captions] A list of captions, sorted by confidence level.
 * @property {string} [requestId] Id of the REST API request.
 * @property {object} [metadata]
 * @property {number} [metadata.width] Image width
 * @property {number} [metadata.height] Image height
 * @property {string} [metadata.format] Image format
 */
export interface ImageDescription {
  tags?: string[];
  captions?: ImageCaption[];
  requestId?: string;
  metadata?: ImageMetadata;
}

/**
 * @class
 * Initializes a new instance of the TagResult class.
 * @constructor
 * The results of a image tag operation, including any tags and image metadata.
 *
 * @property {array} [tags] A list of tags with confidence level.
 * @property {string} [requestId] Id of the REST API request.
 * @property {object} [metadata]
 * @property {number} [metadata.width] Image width
 * @property {number} [metadata.height] Image height
 * @property {string} [metadata.format] Image format
 */
export interface TagResult {
  tags?: ImageTag[];
  requestId?: string;
  metadata?: ImageMetadata;
}

/**
 * @class
 * Initializes a new instance of the ComputerVisionError class.
 * @constructor
 * @property {string} code The error code. Possible values include:
 * 'InvalidImageUrl', 'InvalidImageFormat', 'InvalidImageSize',
 * 'NotSupportedVisualFeature', 'NotSupportedImage', 'InvalidDetails',
 * 'NotSupportedLanguage', 'BadArgument', 'FailedToProcess', 'Timeout',
 * 'InternalServerError', 'Unspecified', 'StorageException'
 * @property {string} message A message explaining the error reported by the
 * service.
 * @property {string} [requestId] A unique request identifier.
 */
export interface ComputerVisionError {
  code: string;
  message: string;
  requestId?: string;
}

/**
 * @class
 * Initializes a new instance of the ImageUrl class.
 * @constructor
 * @property {string} url Publicly reachable URL of an image
 */
export interface ImageUrl {
  url: string;
}

/**
 * @class
 * Initializes a new instance of the Word class.
 * @constructor
 * @property {array} [boundingBox]
 * @property {string} [text]
 */
export interface Word {
  boundingBox?: number[];
  text?: string;
}

/**
 * @class
 * Initializes a new instance of the Line class.
 * @constructor
 * @property {array} [boundingBox]
 * @property {string} [text]
 * @property {array} [words]
 */
export interface Line {
  boundingBox?: number[];
  text?: string;
  words?: Word[];
}

/**
 * @class
 * Initializes a new instance of the RecognitionResult class.
 * @constructor
 * @property {array} [lines]
 */
export interface RecognitionResult {
  lines?: Line[];
}

/**
 * @class
 * Initializes a new instance of the TextOperationResult class.
 * @constructor
 * @property {string} [status] Status of the text operation. Possible values
 * include: 'Not Started', 'Running', 'Failed', 'Succeeded'
 * @property {object} [recognitionResult]
 * @property {array} [recognitionResult.lines]
 */
export interface TextOperationResult {
  status?: string;
  recognitionResult?: RecognitionResult;
}
