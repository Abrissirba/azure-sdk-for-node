/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Provides information about an Azure data center location.
 *
 */
class Location {
  /**
   * Create a Location.
   * @property {string} [id] Specifies the resource identifier of the location.
   * @property {string} [name] Specifies the name of the location. Use List
   * Locations to get all supported locations.
   * @property {string} [type] Specifies the type of the location.
   * @property {string} [recipientName] The recipient name to use when shipping
   * the drives to the Azure data center.
   * @property {string} [streetAddress1] The first line of the street address
   * to use when shipping the drives to the Azure data center.
   * @property {string} [streetAddress2] The second line of the street address
   * to use when shipping the drives to the Azure data center.
   * @property {string} [city] The city name to use when shipping the drives to
   * the Azure data center.
   * @property {string} [stateOrProvince] The state or province to use when
   * shipping the drives to the Azure data center.
   * @property {string} [postalCode] The postal code to use when shipping the
   * drives to the Azure data center.
   * @property {string} [countryOrRegion] The country or region to use when
   * shipping the drives to the Azure data center.
   * @property {string} [phone] The phone number for the Azure data center.
   * @property {array} [supportedCarriers] A list of carriers that are
   * supported at this location.
   * @property {array} [alternateLocations] A list of location IDs that should
   * be used to ship shipping drives to for jobs created against the current
   * location. If the current location is active, it will be part of the list.
   * If it is temporarily closed due to maintenance, this list may contain
   * other locations.
   */
  constructor() {
  }

  /**
   * Defines the metadata of Location
   *
   * @returns {object} metadata of Location
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Location',
      type: {
        name: 'Composite',
        className: 'Location',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          recipientName: {
            required: false,
            serializedName: 'properties.recipientName',
            type: {
              name: 'String'
            }
          },
          streetAddress1: {
            required: false,
            serializedName: 'properties.streetAddress1',
            type: {
              name: 'String'
            }
          },
          streetAddress2: {
            required: false,
            serializedName: 'properties.streetAddress2',
            type: {
              name: 'String'
            }
          },
          city: {
            required: false,
            serializedName: 'properties.city',
            type: {
              name: 'String'
            }
          },
          stateOrProvince: {
            required: false,
            serializedName: 'properties.stateOrProvince',
            type: {
              name: 'String'
            }
          },
          postalCode: {
            required: false,
            serializedName: 'properties.postalCode',
            type: {
              name: 'String'
            }
          },
          countryOrRegion: {
            required: false,
            serializedName: 'properties.countryOrRegion',
            type: {
              name: 'String'
            }
          },
          phone: {
            required: false,
            serializedName: 'properties.phone',
            type: {
              name: 'String'
            }
          },
          supportedCarriers: {
            required: false,
            serializedName: 'properties.supportedCarriers',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          alternateLocations: {
            required: false,
            serializedName: 'properties.alternateLocations',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = Location;
