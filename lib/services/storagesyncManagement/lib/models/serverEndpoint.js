/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Server Endpoint object.
 *
 * @extends models['BaseResource']
 */
class ServerEndpoint extends models['BaseResource'] {
  /**
   * Create a ServerEndpoint.
   * @member {string} [serverLocalPath] Server Local path.
   * @member {string} [cloudTiering] Cloud Tiering. Possible values include:
   * 'on', 'off'
   * @member {number} [volumeFreeSpacePercent] Level of free space to be
   * maintained by Cloud Tiering if it is enabled.
   * @member {string} [friendlyName] Friendly Name
   * @member {date} [lastSyncSuccess] Last Sync Success
   * @member {string} [syncErrorState] Sync Error State
   * @member {date} [syncErrorStateTimestamp] Sync Error State Timestamp
   * @member {string} [syncErrorDirection] Sync Error Direction. Possible
   * values include: 'none', 'initialize', 'download', 'upload', 'recall'
   * @member {number} [itemUploadErrorCount] Item Upload Error Count.
   * @member {number} [itemDownloadErrorCount] Item download error count.
   * @member {string} [syncErrorContext] sync error context.
   * @member {string} [currentProgressType] current progress type. Possible
   * values include: 'none', 'initialize', 'download', 'upload', 'recall'
   * @member {number} [itemProgressCount] Item Progress Count
   * @member {number} [itemTotalCount] Item Total Count
   * @member {number} [byteProgress] Bytes in progress
   * @member {number} [totalProgress] Total progress
   * @member {number} [byteTotal] Bytes total
   * @member {string} [serverResourceId] Server Resource Id.
   * @member {string} [provisioningState] ServerEndpoint Provisioning State
   * @member {string} [lastWorkflowId] ServerEndpoint lastWorkflowId
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ServerEndpoint
   *
   * @returns {object} metadata of ServerEndpoint
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ServerEndpoint',
      type: {
        name: 'Composite',
        className: 'ServerEndpoint',
        modelProperties: {
          serverLocalPath: {
            required: false,
            serializedName: 'properties.serverLocalPath',
            type: {
              name: 'String'
            }
          },
          cloudTiering: {
            required: false,
            serializedName: 'properties.cloudTiering',
            type: {
              name: 'String'
            }
          },
          volumeFreeSpacePercent: {
            required: false,
            serializedName: 'properties.volumeFreeSpacePercent',
            constraints: {
              InclusiveMaximum: 100,
              InclusiveMinimum: 0
            },
            type: {
              name: 'Number'
            }
          },
          friendlyName: {
            required: false,
            serializedName: 'properties.friendlyName',
            type: {
              name: 'String'
            }
          },
          lastSyncSuccess: {
            required: false,
            serializedName: 'properties.lastSyncSuccess',
            type: {
              name: 'DateTime'
            }
          },
          syncErrorState: {
            required: false,
            serializedName: 'properties.syncErrorState',
            type: {
              name: 'String'
            }
          },
          syncErrorStateTimestamp: {
            required: false,
            serializedName: 'properties.syncErrorStateTimestamp',
            type: {
              name: 'DateTime'
            }
          },
          syncErrorDirection: {
            required: false,
            serializedName: 'properties.syncErrorDirection',
            type: {
              name: 'String'
            }
          },
          itemUploadErrorCount: {
            required: false,
            serializedName: 'properties.itemUploadErrorCount',
            type: {
              name: 'Number'
            }
          },
          itemDownloadErrorCount: {
            required: false,
            serializedName: 'properties.itemDownloadErrorCount',
            type: {
              name: 'Number'
            }
          },
          syncErrorContext: {
            required: false,
            serializedName: 'properties.syncErrorContext',
            type: {
              name: 'String'
            }
          },
          currentProgressType: {
            required: false,
            serializedName: 'properties.currentProgressType',
            type: {
              name: 'String'
            }
          },
          itemProgressCount: {
            required: false,
            serializedName: 'properties.itemProgressCount',
            type: {
              name: 'Number'
            }
          },
          itemTotalCount: {
            required: false,
            serializedName: 'properties.itemTotalCount',
            type: {
              name: 'Number'
            }
          },
          byteProgress: {
            required: false,
            serializedName: 'properties.byteProgress',
            type: {
              name: 'Number'
            }
          },
          totalProgress: {
            required: false,
            serializedName: 'properties.totalProgress',
            type: {
              name: 'Number'
            }
          },
          byteTotal: {
            required: false,
            serializedName: 'properties.byteTotal',
            type: {
              name: 'Number'
            }
          },
          serverResourceId: {
            required: false,
            serializedName: 'properties.serverResourceId',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          lastWorkflowId: {
            required: false,
            serializedName: 'properties.lastWorkflowId',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ServerEndpoint;
