/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The parameters supplied to the create or update watcher operation.
 *
 */
class WatcherCreateOrUpdateParameters {
  /**
   * Create a WatcherCreateOrUpdateParameters.
   * @member {string} name Gets or sets the name of the watcher.
   * @member {number} [executionFrequencyInSeconds] Gets or sets the frequency
   * at which the watcher is invoked.
   * @member {string} [scriptName] Gets or sets the name of the script the
   * watcher is attached to, i.e. the name of an existing runbook.
   * @member {object} [scriptParameters] Gets or sets the parameters of the
   * script.
   * @member {string} [scriptRunOn] Gets or sets the name of the hybrid worker
   * group the webhook job will run on.
   * @member {string} [description] Gets or sets the watcher's description.
   */
  constructor() {
  }

  /**
   * Defines the metadata of WatcherCreateOrUpdateParameters
   *
   * @returns {object} metadata of WatcherCreateOrUpdateParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'WatcherCreateOrUpdateParameters',
      type: {
        name: 'Composite',
        className: 'WatcherCreateOrUpdateParameters',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          executionFrequencyInSeconds: {
            required: false,
            serializedName: 'properties.executionFrequencyInSeconds',
            type: {
              name: 'Number'
            }
          },
          scriptName: {
            required: false,
            serializedName: 'properties.scriptName',
            type: {
              name: 'String'
            }
          },
          scriptParameters: {
            required: false,
            serializedName: 'properties.scriptParameters',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          scriptRunOn: {
            required: false,
            serializedName: 'properties.scriptRunOn',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'properties.description',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = WatcherCreateOrUpdateParameters;
