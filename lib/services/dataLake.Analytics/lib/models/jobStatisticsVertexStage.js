/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The Data Lake Analytics job statistics vertex stage information.
 *
 */
class JobStatisticsVertexStage {
  /**
   * Create a JobStatisticsVertexStage.
   * @member {number} [dataRead] The amount of data read, in bytes.
   * @member {number} [dataReadCrossPod] The amount of data read across
   * multiple pods, in bytes.
   * @member {number} [dataReadIntraPod] The amount of data read in one pod, in
   * bytes.
   * @member {number} [dataToRead] The amount of data remaining to be read, in
   * bytes.
   * @member {number} [dataWritten] The amount of data written, in bytes.
   * @member {number} [duplicateDiscardCount] The number of duplicates that
   * were discarded.
   * @member {number} [failedCount] The number of failures that occured in this
   * stage.
   * @member {number} [maxVertexDataRead] The maximum amount of data read in a
   * single vertex, in bytes.
   * @member {number} [minVertexDataRead] The minimum amount of data read in a
   * single vertex, in bytes.
   * @member {number} [readFailureCount] The number of read failures in this
   * stage.
   * @member {number} [revocationCount] The number of vertices that were
   * revoked during this stage.
   * @member {number} [runningCount] The number of currently running vertices
   * in this stage.
   * @member {number} [scheduledCount] The number of currently scheduled
   * vertices in this stage.
   * @member {string} [stageName] The name of this stage in job execution.
   * @member {number} [succeededCount] The number of vertices that succeeded in
   * this stage.
   * @member {number} [tempDataWritten] The amount of temporary data written,
   * in bytes.
   * @member {number} [totalCount] The total vertex count for this stage.
   * @member {moment.duration} [totalFailedTime] The amount of time that failed
   * vertices took up in this stage.
   * @member {number} [totalProgress] The current progress of this stage, as a
   * percentage.
   * @member {moment.duration} [totalSucceededTime] The amount of time all
   * successful vertices took in this stage.
   * @member {number} [totalPeakMemUsage] The sum of the peak memory usage of
   * all the vertices in the stage, in bytes.
   * @member {moment.duration} [totalExecutionTime] The sum of the total
   * execution time of all the vertices in the stage.
   * @member {object} [maxDataReadVertex] the vertex with the maximum amount of
   * data read.
   * @member {string} [maxDataReadVertex.name] The name of the vertex.
   * @member {uuid} [maxDataReadVertex.vertexId] The id of the vertex.
   * @member {moment.duration} [maxDataReadVertex.executionTime] The amount of
   * execution time of the vertex.
   * @member {number} [maxDataReadVertex.dataRead] The amount of data read of
   * the vertex, in bytes.
   * @member {number} [maxDataReadVertex.peakMemUsage] The amount of peak
   * memory usage of the vertex, in bytes.
   * @member {object} [maxExecutionTimeVertex] the vertex with the maximum
   * execution time.
   * @member {string} [maxExecutionTimeVertex.name] The name of the vertex.
   * @member {uuid} [maxExecutionTimeVertex.vertexId] The id of the vertex.
   * @member {moment.duration} [maxExecutionTimeVertex.executionTime] The
   * amount of execution time of the vertex.
   * @member {number} [maxExecutionTimeVertex.dataRead] The amount of data read
   * of the vertex, in bytes.
   * @member {number} [maxExecutionTimeVertex.peakMemUsage] The amount of peak
   * memory usage of the vertex, in bytes.
   * @member {object} [maxPeakMemUsageVertex] the vertex with the maximum peak
   * memory usage.
   * @member {string} [maxPeakMemUsageVertex.name] The name of the vertex.
   * @member {uuid} [maxPeakMemUsageVertex.vertexId] The id of the vertex.
   * @member {moment.duration} [maxPeakMemUsageVertex.executionTime] The amount
   * of execution time of the vertex.
   * @member {number} [maxPeakMemUsageVertex.dataRead] The amount of data read
   * of the vertex, in bytes.
   * @member {number} [maxPeakMemUsageVertex.peakMemUsage] The amount of peak
   * memory usage of the vertex, in bytes.
   * @member {number} [estimatedVertexCpuCoreCount] The estimated vertex CPU
   * core count.
   * @member {number} [estimatedVertexPeakCpuCoreCount] The estimated vertex
   * peak CPU core count.
   * @member {number} [estimatedVertexMemSize] The estimated vertex memory
   * size, in bytes.
   * @member {object} [allocatedContainerCpuCoreCount] The statistics
   * information for the allocated container CPU core count.
   * @member {number} [allocatedContainerCpuCoreCount.average] The average
   * value.
   * @member {number} [allocatedContainerCpuCoreCount.minimum] The minimum
   * value.
   * @member {number} [allocatedContainerCpuCoreCount.maximum] The maximum
   * value.
   * @member {object} [allocatedContainerMemSize] The statistics information
   * for the allocated container memory size.
   * @member {number} [allocatedContainerMemSize.average] The average value.
   * @member {number} [allocatedContainerMemSize.minimum] The minimum value.
   * @member {number} [allocatedContainerMemSize.maximum] The maximum value.
   * @member {object} [usedVertexCpuCoreCount] The statistics information for
   * the used vertex CPU core count.
   * @member {number} [usedVertexCpuCoreCount.average] The average value.
   * @member {number} [usedVertexCpuCoreCount.minimum] The minimum value.
   * @member {number} [usedVertexCpuCoreCount.maximum] The maximum value.
   * @member {object} [usedVertexPeakMemSize] The statistics information for
   * the used vertex peak memory size.
   * @member {number} [usedVertexPeakMemSize.average] The average value.
   * @member {number} [usedVertexPeakMemSize.minimum] The minimum value.
   * @member {number} [usedVertexPeakMemSize.maximum] The maximum value.
   */
  constructor() {
  }

  /**
   * Defines the metadata of JobStatisticsVertexStage
   *
   * @returns {object} metadata of JobStatisticsVertexStage
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'JobStatisticsVertexStage',
      type: {
        name: 'Composite',
        className: 'JobStatisticsVertexStage',
        modelProperties: {
          dataRead: {
            required: false,
            readOnly: true,
            serializedName: 'dataRead',
            type: {
              name: 'Number'
            }
          },
          dataReadCrossPod: {
            required: false,
            readOnly: true,
            serializedName: 'dataReadCrossPod',
            type: {
              name: 'Number'
            }
          },
          dataReadIntraPod: {
            required: false,
            readOnly: true,
            serializedName: 'dataReadIntraPod',
            type: {
              name: 'Number'
            }
          },
          dataToRead: {
            required: false,
            readOnly: true,
            serializedName: 'dataToRead',
            type: {
              name: 'Number'
            }
          },
          dataWritten: {
            required: false,
            readOnly: true,
            serializedName: 'dataWritten',
            type: {
              name: 'Number'
            }
          },
          duplicateDiscardCount: {
            required: false,
            readOnly: true,
            serializedName: 'duplicateDiscardCount',
            type: {
              name: 'Number'
            }
          },
          failedCount: {
            required: false,
            readOnly: true,
            serializedName: 'failedCount',
            type: {
              name: 'Number'
            }
          },
          maxVertexDataRead: {
            required: false,
            readOnly: true,
            serializedName: 'maxVertexDataRead',
            type: {
              name: 'Number'
            }
          },
          minVertexDataRead: {
            required: false,
            readOnly: true,
            serializedName: 'minVertexDataRead',
            type: {
              name: 'Number'
            }
          },
          readFailureCount: {
            required: false,
            readOnly: true,
            serializedName: 'readFailureCount',
            type: {
              name: 'Number'
            }
          },
          revocationCount: {
            required: false,
            readOnly: true,
            serializedName: 'revocationCount',
            type: {
              name: 'Number'
            }
          },
          runningCount: {
            required: false,
            readOnly: true,
            serializedName: 'runningCount',
            type: {
              name: 'Number'
            }
          },
          scheduledCount: {
            required: false,
            readOnly: true,
            serializedName: 'scheduledCount',
            type: {
              name: 'Number'
            }
          },
          stageName: {
            required: false,
            readOnly: true,
            serializedName: 'stageName',
            type: {
              name: 'String'
            }
          },
          succeededCount: {
            required: false,
            readOnly: true,
            serializedName: 'succeededCount',
            type: {
              name: 'Number'
            }
          },
          tempDataWritten: {
            required: false,
            readOnly: true,
            serializedName: 'tempDataWritten',
            type: {
              name: 'Number'
            }
          },
          totalCount: {
            required: false,
            readOnly: true,
            serializedName: 'totalCount',
            type: {
              name: 'Number'
            }
          },
          totalFailedTime: {
            required: false,
            readOnly: true,
            serializedName: 'totalFailedTime',
            type: {
              name: 'TimeSpan'
            }
          },
          totalProgress: {
            required: false,
            readOnly: true,
            serializedName: 'totalProgress',
            type: {
              name: 'Number'
            }
          },
          totalSucceededTime: {
            required: false,
            readOnly: true,
            serializedName: 'totalSucceededTime',
            type: {
              name: 'TimeSpan'
            }
          },
          totalPeakMemUsage: {
            required: false,
            readOnly: true,
            serializedName: 'totalPeakMemUsage',
            type: {
              name: 'Number'
            }
          },
          totalExecutionTime: {
            required: false,
            readOnly: true,
            serializedName: 'totalExecutionTime',
            type: {
              name: 'TimeSpan'
            }
          },
          maxDataReadVertex: {
            required: false,
            serializedName: 'maxDataReadVertex',
            type: {
              name: 'Composite',
              className: 'JobStatisticsVertex'
            }
          },
          maxExecutionTimeVertex: {
            required: false,
            serializedName: 'maxExecutionTimeVertex',
            type: {
              name: 'Composite',
              className: 'JobStatisticsVertex'
            }
          },
          maxPeakMemUsageVertex: {
            required: false,
            serializedName: 'maxPeakMemUsageVertex',
            type: {
              name: 'Composite',
              className: 'JobStatisticsVertex'
            }
          },
          estimatedVertexCpuCoreCount: {
            required: false,
            readOnly: true,
            serializedName: 'estimatedVertexCpuCoreCount',
            type: {
              name: 'Number'
            }
          },
          estimatedVertexPeakCpuCoreCount: {
            required: false,
            readOnly: true,
            serializedName: 'estimatedVertexPeakCpuCoreCount',
            type: {
              name: 'Number'
            }
          },
          estimatedVertexMemSize: {
            required: false,
            readOnly: true,
            serializedName: 'estimatedVertexMemSize',
            type: {
              name: 'Number'
            }
          },
          allocatedContainerCpuCoreCount: {
            required: false,
            serializedName: 'allocatedContainerCpuCoreCount',
            type: {
              name: 'Composite',
              className: 'ResourceUsageStatistics'
            }
          },
          allocatedContainerMemSize: {
            required: false,
            serializedName: 'allocatedContainerMemSize',
            type: {
              name: 'Composite',
              className: 'ResourceUsageStatistics'
            }
          },
          usedVertexCpuCoreCount: {
            required: false,
            serializedName: 'usedVertexCpuCoreCount',
            type: {
              name: 'Composite',
              className: 'ResourceUsageStatistics'
            }
          },
          usedVertexPeakMemSize: {
            required: false,
            serializedName: 'usedVertexPeakMemSize',
            type: {
              name: 'Composite',
              className: 'ResourceUsageStatistics'
            }
          }
        }
      }
    };
  }
}

module.exports = JobStatisticsVertexStage;
