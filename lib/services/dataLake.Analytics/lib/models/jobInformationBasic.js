/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The common Data Lake Analytics job information properties.
 *
 */
class JobInformationBasic {
  /**
   * Create a JobInformationBasic.
   * @member {uuid} [jobId] The job's unique identifier (a GUID).
   * @member {string} name The friendly name of the job.
   * @member {string} type The job type of the current job (Hive, USql, or
   * Scope (for internal use only)). Possible values include: 'USql', 'Hive',
   * 'Scope'
   * @member {string} [submitter] The user or account that submitted the job.
   * @member {number} [degreeOfParallelism] The degree of parallelism used for
   * this job. This must be greater than 0, if set to less than 0 it will
   * default to 1. Default value: 1 .
   * @member {number} [priority] The priority value for the current job. Lower
   * numbers have a higher priority. By default, a job has a priority of 1000.
   * This must be greater than 0.
   * @member {date} [submitTime] The time the job was submitted to the service.
   * @member {date} [startTime] The start time of the job.
   * @member {date} [endTime] The completion time of the job.
   * @member {string} [state] The job state. When the job is in the Ended
   * state, refer to Result and ErrorMessage for details. Possible values
   * include: 'Accepted', 'Compiling', 'Ended', 'New', 'Queued', 'Running',
   * 'Scheduling', 'Starting', 'Paused', 'WaitingForCapacity'
   * @member {string} [result] The result of job execution or the current
   * result of the running job. Possible values include: 'None', 'Succeeded',
   * 'Cancelled', 'Failed'
   * @member {string} [logFolder] The log folder path to use in the following
   * format:
   * adl://<accountName>.azuredatalakestore.net/system/jobservice/jobs/Usql/2016/03/13/17/18/5fe51957-93bc-4de0-8ddc-c5a4753b068b/logs/.
   * @member {array} [logFilePatterns] The list of log file name patterns to
   * find in the logFolder. '*' is the only matching character allowed. Example
   * format: jobExecution*.log or *mylog*.txt
   * @member {object} [related] The recurring job relationship information
   * properties.
   * @member {uuid} [related.pipelineId] The job relationship pipeline
   * identifier (a GUID).
   * @member {string} [related.pipelineName] The friendly name of the job
   * relationship pipeline, which does not need to be unique.
   * @member {string} [related.pipelineUri] The pipeline uri, unique, links to
   * the originating service for this pipeline.
   * @member {uuid} [related.runId] The run identifier (a GUID), unique
   * identifier of the iteration of this pipeline.
   * @member {uuid} [related.recurrenceId] The recurrence identifier (a GUID),
   * unique per activity/script, regardless of iterations. This is something to
   * link different occurrences of the same job together.
   * @member {string} [related.recurrenceName] The recurrence name, user
   * friendly name for the correlation between jobs.
   * @member {object} [tags] The key-value pairs used to add additional
   * metadata to the job information. (Only for use internally with Scope job
   * type.)
   */
  constructor() {
  }

  /**
   * Defines the metadata of JobInformationBasic
   *
   * @returns {object} metadata of JobInformationBasic
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'JobInformationBasic',
      type: {
        name: 'Composite',
        className: 'JobInformationBasic',
        modelProperties: {
          jobId: {
            required: false,
            readOnly: true,
            serializedName: 'jobId',
            type: {
              name: 'String'
            }
          },
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: true,
            serializedName: 'type',
            type: {
              name: 'Enum',
              allowedValues: [ 'USql', 'Hive', 'Scope' ]
            }
          },
          submitter: {
            required: false,
            readOnly: true,
            serializedName: 'submitter',
            type: {
              name: 'String'
            }
          },
          degreeOfParallelism: {
            required: false,
            serializedName: 'degreeOfParallelism',
            defaultValue: 1,
            type: {
              name: 'Number'
            }
          },
          priority: {
            required: false,
            serializedName: 'priority',
            type: {
              name: 'Number'
            }
          },
          submitTime: {
            required: false,
            readOnly: true,
            serializedName: 'submitTime',
            type: {
              name: 'DateTime'
            }
          },
          startTime: {
            required: false,
            readOnly: true,
            serializedName: 'startTime',
            type: {
              name: 'DateTime'
            }
          },
          endTime: {
            required: false,
            readOnly: true,
            serializedName: 'endTime',
            type: {
              name: 'DateTime'
            }
          },
          state: {
            required: false,
            readOnly: true,
            serializedName: 'state',
            type: {
              name: 'Enum',
              allowedValues: [ 'Accepted', 'Compiling', 'Ended', 'New', 'Queued', 'Running', 'Scheduling', 'Starting', 'Paused', 'WaitingForCapacity' ]
            }
          },
          result: {
            required: false,
            readOnly: true,
            serializedName: 'result',
            type: {
              name: 'Enum',
              allowedValues: [ 'None', 'Succeeded', 'Cancelled', 'Failed' ]
            }
          },
          logFolder: {
            required: false,
            readOnly: true,
            serializedName: 'logFolder',
            type: {
              name: 'String'
            }
          },
          logFilePatterns: {
            required: false,
            serializedName: 'logFilePatterns',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          related: {
            required: false,
            serializedName: 'related',
            type: {
              name: 'Composite',
              className: 'JobRelationshipProperties'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = JobInformationBasic;
