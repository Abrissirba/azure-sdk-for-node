/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Scope job properties used when submitting and retrieving Scope jobs. (Only
 * for use internally with Scope job type.)
 *
 * @extends models['JobProperties']
 */
class ScopeJobProperties extends models['JobProperties'] {
  /**
   * Create a ScopeJobProperties.
   * @member {array} [resources] The list of resources that are required by the
   * job.
   * @member {string} [userAlgebraPath] The algebra file path after the job has
   * completed.
   * @member {string} [notifier] The list of email addresses, separated by
   * semi-colons, to notify when the job reaches a terminal state.
   * @member {moment.duration} [totalCompilationTime] The total time this job
   * spent compiling. This value should not be set by the user and will be
   * ignored if it is.
   * @member {moment.duration} [totalQueuedTime] The total time this job spent
   * queued. This value should not be set by the user and will be ignored if it
   * is.
   * @member {moment.duration} [totalRunningTime] The total time this job spent
   * executing. This value should not be set by the user and will be ignored if
   * it is.
   * @member {moment.duration} [totalPausedTime] The total time this job spent
   * paused. This value should not be set by the user and will be ignored if it
   * is.
   * @member {string} [rootProcessNodeId] The ID used to identify the job
   * manager coordinating job execution. This value should not be set by the
   * user and will be ignored if it is.
   * @member {string} [yarnApplicationId] The ID used to identify the yarn
   * application executing the job. This value should not be set by the user
   * and will be ignored if it is.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ScopeJobProperties
   *
   * @returns {object} metadata of ScopeJobProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Scope',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'type',
          clientName: 'type'
        },
        uberParent: 'JobProperties',
        className: 'ScopeJobProperties',
        modelProperties: {
          runtimeVersion: {
            required: false,
            serializedName: 'runtimeVersion',
            type: {
              name: 'String'
            }
          },
          script: {
            required: true,
            serializedName: 'script',
            type: {
              name: 'String'
            }
          },
          type: {
            required: true,
            serializedName: 'type',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          resources: {
            required: false,
            readOnly: true,
            serializedName: 'resources',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ScopeJobResourceElementType',
                  type: {
                    name: 'Composite',
                    className: 'ScopeJobResource'
                  }
              }
            }
          },
          userAlgebraPath: {
            required: false,
            readOnly: true,
            serializedName: 'userAlgebraPath',
            type: {
              name: 'String'
            }
          },
          notifier: {
            required: false,
            serializedName: 'notifier',
            type: {
              name: 'String'
            }
          },
          totalCompilationTime: {
            required: false,
            readOnly: true,
            serializedName: 'totalCompilationTime',
            type: {
              name: 'TimeSpan'
            }
          },
          totalQueuedTime: {
            required: false,
            readOnly: true,
            serializedName: 'totalQueuedTime',
            type: {
              name: 'TimeSpan'
            }
          },
          totalRunningTime: {
            required: false,
            readOnly: true,
            serializedName: 'totalRunningTime',
            type: {
              name: 'TimeSpan'
            }
          },
          totalPausedTime: {
            required: false,
            readOnly: true,
            serializedName: 'totalPausedTime',
            type: {
              name: 'TimeSpan'
            }
          },
          rootProcessNodeId: {
            required: false,
            readOnly: true,
            serializedName: 'rootProcessNodeId',
            type: {
              name: 'String'
            }
          },
          yarnApplicationId: {
            required: false,
            readOnly: true,
            serializedName: 'yarnApplicationId',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ScopeJobProperties;
