/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as moment from "moment";


/**
 * @class
 * Initializes a new instance of the ResponseBase class.
 * @constructor
 * Response base.
 *
 * @property {string} _type Polymorphic Discriminator
 */
export interface ResponseBase {
  _type: string;
}

/**
 * @class
 * Initializes a new instance of the Identifiable class.
 * @constructor
 * Defines the identity of a resource.
 *
 * @property {string} [id] A String identifier.
 */
export interface Identifiable extends ResponseBase {
  readonly id?: string;
}

/**
 * @class
 * Initializes a new instance of the Response class.
 * @constructor
 * Defines a response. All schemas that return at the root of the response must
 * inherit from this object.
 *
 * @property {string} [readLink] The URL that returns this resource. To use the
 * URL, append query parameters as appropriate and include the
 * Ocp-Apim-Subscription-Key header.
 * @property {string} [webSearchUrl] The URL to Bing's search result for this
 * item.
 */
export interface Response extends Identifiable {
  readonly readLink?: string;
  readonly webSearchUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the Thing class.
 * @constructor
 * Defines a thing.
 *
 * @property {string} [name] The name of the thing represented by this object.
 * @property {string} [url] The URL to get more information about the thing
 * represented by this object.
 * @property {object} [image] An image of the item.
 * @property {object} [image.thumbnail] The URL to a thumbnail of the image.
 * @property {string} [image.imageInsightsToken] The token that you use in a
 * subsequent call to Visual Search API to get additional information about the
 * image. For information about using this token, see the imageInsightsToken
 * field inside the knowledgeRequest request parameter.
 * @property {object} [image.insightsMetadata] A count of the number of
 * websites where you can shop or perform other actions related to the image.
 * For example, if the image is of an apple pie, this object includes a count
 * of the number of websites where you can buy an apple pie. To indicate the
 * number of offers in your UX, include badging such as a shopping cart icon
 * that contains the count. When the user clicks on the icon, use
 * imageInisghtsToken in a subsequent Visual Search API call to get the list of
 * shopping websites.
 * @property {number} [image.insightsMetadata.shoppingSourcesCount] The number
 * of websites that sell the products seen in the image.
 * @property {number} [image.insightsMetadata.recipeSourcesCount] The number of
 * websites that offer recipes of the food seen in the image.
 * @property {object} [image.insightsMetadata.aggregateOffer] A summary of the
 * online offers of products found in the image. For example, if the image is
 * of a dress, the offer might identify the lowest price and the number of
 * offers found. Only visually similar products insights include this field.
 * The offer includes the following fields: Name, AggregateRating, OfferCount,
 * and LowPrice.
 * @property {array} [image.insightsMetadata.aggregateOffer.offers] A list of
 * offers from merchants that have offerings related to the image.
 * @property {string} [image.imageId] Unique Id for the image.
 * @property {string} [image.accentColor] A three-byte hexadecimal number that
 * represents the color that dominates the image. Use the color as the
 * temporary background in your client until the image is loaded.
 * @property {string} [image.visualWords] For interal use only.
 * @property {string} [description] A short description of the item.
 * @property {string} [alternateName] An alias for the item.
 * @property {string} [bingId] An ID that uniquely identifies this item.
 */
export interface Thing extends Response {
  readonly name?: string;
  readonly url?: string;
  readonly image?: ImageObject;
  readonly description?: string;
  readonly alternateName?: string;
  readonly bingId?: string;
}

/**
 * @class
 * Initializes a new instance of the Intangible class.
 * @constructor
 * A utility class that serves as the umbrella for a number of 'intangible'
 * things such as quantities, structured values, etc.
 *
 */
export interface Intangible extends Thing {
}

/**
 * @class
 * Initializes a new instance of the StructuredValue class.
 * @constructor
 */
export interface StructuredValue extends Intangible {
}

/**
 * @class
 * Initializes a new instance of the Point2D class.
 * @constructor
 * Defines a 2D point with X and Y coordinates.
 *
 * @property {number} x The x-coordinate of the point.
 * @property {number} y The y-coordinate of the point.
 */
export interface Point2D extends StructuredValue {
  x: number;
  y: number;
}

/**
 * @class
 * Initializes a new instance of the NormalizedQuadrilateral class.
 * @constructor
 * Defines a region of an image. The region is a convex quadrilateral defined
 * by coordinates of its top left, top right, bottom left, and bottom right
 * points. The coordinates are fractional values of the original image's width
 * and height in the range 0.0 through 1.0.
 *
 * @property {object} topLeft The top left corner coordinate.
 * @property {number} [topLeft.x] The x-coordinate of the point.
 * @property {number} [topLeft.y] The y-coordinate of the point.
 * @property {object} topRight The top right corner coordinate.
 * @property {number} [topRight.x] The x-coordinate of the point.
 * @property {number} [topRight.y] The y-coordinate of the point.
 * @property {object} bottomRight The bottom right corner coordinate.
 * @property {number} [bottomRight.x] The x-coordinate of the point.
 * @property {number} [bottomRight.y] The y-coordinate of the point.
 * @property {object} bottomLeft The bottom left corner coordinate.
 * @property {number} [bottomLeft.x] The x-coordinate of the point.
 * @property {number} [bottomLeft.y] The y-coordinate of the point.
 */
export interface NormalizedQuadrilateral extends StructuredValue {
  topLeft: Point2D;
  topRight: Point2D;
  bottomRight: Point2D;
  bottomLeft: Point2D;
}

/**
 * @class
 * Initializes a new instance of the ImageTagRegion class.
 * @constructor
 * Defines an image region relevant to the ImageTag.
 *
 * @property {object} queryRectangle A rectangle that outlines the area of
 * interest for this tag.
 * @property {object} [queryRectangle.topLeft] The top left corner coordinate.
 * @property {number} [queryRectangle.topLeft.x] The x-coordinate of the point.
 * @property {number} [queryRectangle.topLeft.y] The y-coordinate of the point.
 * @property {object} [queryRectangle.topRight] The top right corner
 * coordinate.
 * @property {number} [queryRectangle.topRight.x] The x-coordinate of the
 * point.
 * @property {number} [queryRectangle.topRight.y] The y-coordinate of the
 * point.
 * @property {object} [queryRectangle.bottomRight] The bottom right corner
 * coordinate.
 * @property {number} [queryRectangle.bottomRight.x] The x-coordinate of the
 * point.
 * @property {number} [queryRectangle.bottomRight.y] The y-coordinate of the
 * point.
 * @property {object} [queryRectangle.bottomLeft] The bottom left corner
 * coordinate.
 * @property {number} [queryRectangle.bottomLeft.x] The x-coordinate of the
 * point.
 * @property {number} [queryRectangle.bottomLeft.y] The y-coordinate of the
 * point.
 * @property {object} displayRectangle A recommended rectangle to show to the
 * user.
 * @property {object} [displayRectangle.topLeft] The top left corner
 * coordinate.
 * @property {number} [displayRectangle.topLeft.x] The x-coordinate of the
 * point.
 * @property {number} [displayRectangle.topLeft.y] The y-coordinate of the
 * point.
 * @property {object} [displayRectangle.topRight] The top right corner
 * coordinate.
 * @property {number} [displayRectangle.topRight.x] The x-coordinate of the
 * point.
 * @property {number} [displayRectangle.topRight.y] The y-coordinate of the
 * point.
 * @property {object} [displayRectangle.bottomRight] The bottom right corner
 * coordinate.
 * @property {number} [displayRectangle.bottomRight.x] The x-coordinate of the
 * point.
 * @property {number} [displayRectangle.bottomRight.y] The y-coordinate of the
 * point.
 * @property {object} [displayRectangle.bottomLeft] The bottom left corner
 * coordinate.
 * @property {number} [displayRectangle.bottomLeft.x] The x-coordinate of the
 * point.
 * @property {number} [displayRectangle.bottomLeft.y] The y-coordinate of the
 * point.
 */
export interface ImageTagRegion {
  queryRectangle: NormalizedQuadrilateral;
  displayRectangle: NormalizedQuadrilateral;
}

/**
 * @class
 * Initializes a new instance of the CreativeWork class.
 * @constructor
 * The most generic kind of creative work, including books, movies,
 * photographs, software programs, etc.
 *
 * @property {string} [thumbnailUrl] The URL to a thumbnail of the item.
 * @property {array} [provider] The source of the creative work.
 * @property {string} [datePublished] The date on which the CreativeWork was
 * published.
 * @property {string} [text] Text content of this creative work.
 */
export interface CreativeWork extends Thing {
  readonly thumbnailUrl?: string;
  readonly provider?: Thing[];
  readonly datePublished?: string;
  readonly text?: string;
}

/**
 * @class
 * Initializes a new instance of the Action class.
 * @constructor
 * Defines an action.
 *
 * @property {array} [result] The result produced in the action.
 * @property {string} [displayName] A display name for the action.
 * @property {boolean} [isTopAction] A Boolean representing whether this result
 * is the top action.
 * @property {string} [serviceUrl] Use this URL to get additional data to
 * determine how to take the appropriate action. For example, the serviceUrl
 * might return JSON along with an image URL.
 */
export interface Action extends CreativeWork {
  readonly result?: Thing[];
  readonly displayName?: string;
  readonly isTopAction?: boolean;
  readonly serviceUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the ImageAction class.
 * @constructor
 * Defines an image action.
 *
 * @property {string} [actionType] A string representing the type of action.
 */
export interface ImageAction extends Action {
  readonly actionType?: string;
}

/**
 * @class
 * Initializes a new instance of the ImageTag class.
 * @constructor
 * A visual search tag.
 *
 * @property {string} [displayName] Display name for this tag. For the default
 * tag, the display name is empty.
 * @property {object} [boundingBox] The bounding box for this tag. For the
 * default tag, there is no bounding box.
 * @property {object} [boundingBox.queryRectangle] A rectangle that outlines
 * the area of interest for this tag.
 * @property {object} [boundingBox.queryRectangle.topLeft] The top left corner
 * coordinate.
 * @property {number} [boundingBox.queryRectangle.topLeft.x] The x-coordinate
 * of the point.
 * @property {number} [boundingBox.queryRectangle.topLeft.y] The y-coordinate
 * of the point.
 * @property {object} [boundingBox.queryRectangle.topRight] The top right
 * corner coordinate.
 * @property {number} [boundingBox.queryRectangle.topRight.x] The x-coordinate
 * of the point.
 * @property {number} [boundingBox.queryRectangle.topRight.y] The y-coordinate
 * of the point.
 * @property {object} [boundingBox.queryRectangle.bottomRight] The bottom right
 * corner coordinate.
 * @property {number} [boundingBox.queryRectangle.bottomRight.x] The
 * x-coordinate of the point.
 * @property {number} [boundingBox.queryRectangle.bottomRight.y] The
 * y-coordinate of the point.
 * @property {object} [boundingBox.queryRectangle.bottomLeft] The bottom left
 * corner coordinate.
 * @property {number} [boundingBox.queryRectangle.bottomLeft.x] The
 * x-coordinate of the point.
 * @property {number} [boundingBox.queryRectangle.bottomLeft.y] The
 * y-coordinate of the point.
 * @property {object} [boundingBox.displayRectangle] A recommended rectangle to
 * show to the user.
 * @property {object} [boundingBox.displayRectangle.topLeft] The top left
 * corner coordinate.
 * @property {number} [boundingBox.displayRectangle.topLeft.x] The x-coordinate
 * of the point.
 * @property {number} [boundingBox.displayRectangle.topLeft.y] The y-coordinate
 * of the point.
 * @property {object} [boundingBox.displayRectangle.topRight] The top right
 * corner coordinate.
 * @property {number} [boundingBox.displayRectangle.topRight.x] The
 * x-coordinate of the point.
 * @property {number} [boundingBox.displayRectangle.topRight.y] The
 * y-coordinate of the point.
 * @property {object} [boundingBox.displayRectangle.bottomRight] The bottom
 * right corner coordinate.
 * @property {number} [boundingBox.displayRectangle.bottomRight.x] The
 * x-coordinate of the point.
 * @property {number} [boundingBox.displayRectangle.bottomRight.y] The
 * y-coordinate of the point.
 * @property {object} [boundingBox.displayRectangle.bottomLeft] The bottom left
 * corner coordinate.
 * @property {number} [boundingBox.displayRectangle.bottomLeft.x] The
 * x-coordinate of the point.
 * @property {number} [boundingBox.displayRectangle.bottomLeft.y] The
 * y-coordinate of the point.
 * @property {array} [actions] Actions within this tag. The order of the items
 * denotes the default ranking order of these actions, with the first action
 * being the most likely user intent.
 */
export interface ImageTag extends Thing {
  readonly displayName?: string;
  readonly boundingBox?: ImageTagRegion;
  readonly actions?: ImageAction[];
}

/**
 * @class
 * Initializes a new instance of the Organization class.
 * @constructor
 * Defines an organization.
 *
 */
export interface Organization extends Thing {
}

/**
 * @class
 * Initializes a new instance of the PropertiesItem class.
 * @constructor
 * Defines an item.
 *
 * @property {string} [text] Text representation of an item.
 * @property {string} _type Polymorphic Discriminator
 */
export interface PropertiesItem {
  readonly text?: string;
  _type: string;
}

/**
 * @class
 * Initializes a new instance of the Rating class.
 * @constructor
 * Defines a rating.
 *
 * @property {number} ratingValue The mean (average) rating. The possible
 * values are 1.0 through 5.0.
 * @property {number} [bestRating] The highest rated review. The possible
 * values are 1.0 through 5.0.
 */
export interface Rating extends PropertiesItem {
  ratingValue: number;
  readonly bestRating?: number;
}

/**
 * @class
 * Initializes a new instance of the AggregateRating class.
 * @constructor
 * Defines the metrics that indicate how well an item was rated by others.
 *
 * @property {number} [reviewCount] The number of times the recipe has been
 * rated or reviewed.
 */
export interface AggregateRating extends Rating {
  readonly reviewCount?: number;
}

/**
 * @class
 * Initializes a new instance of the Offer class.
 * @constructor
 * Defines a merchant's offer.
 *
 * @property {object} [seller] Seller for this offer.
 * @property {number} [price] The item's price.
 * @property {string} [priceCurrency] The monetary currency. For example, USD.
 * Possible values include: 'USD', 'CAD', 'GBP', 'EUR', 'COP', 'JPY', 'CNY',
 * 'AUD', 'INR', 'AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AWG', 'AZN',
 * 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BOV', 'BRL',
 * 'BSD', 'BTN', 'BWP', 'BYR', 'BZD', 'CDF', 'CHE', 'CHF', 'CHW', 'CLF', 'CLP',
 * 'COU', 'CRC', 'CUC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP',
 * 'ERN', 'ETB', 'FJD', 'FKP', 'GEL', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD',
 * 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS', 'IQD', 'IRR', 'ISK', 'JMD',
 * 'JOD', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK',
 * 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT',
 * 'MOP', 'MRO', 'MUR', 'MVR', 'MWK', 'MXN', 'MXV', 'MYR', 'MZN', 'NAD', 'NGN',
 * 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN',
 * 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK',
 * 'SGD', 'SHP', 'SLL', 'SOS', 'SRD', 'SSP', 'STD', 'SYP', 'SZL', 'THB', 'TJS',
 * 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TWD', 'TZS', 'UAH', 'UGX', 'UYU', 'UZS',
 * 'VEF', 'VND', 'VUV', 'WST', 'XAF', 'XCD', 'XOF', 'XPF', 'YER', 'ZAR', 'ZMW'.
 * Default value: 'USD' .
 * @property {string} [availability] The item's availability. The following are
 * the possible values: Discontinued, InStock, InStoreOnly,
 * LimitedAvailability, OnlineOnly, OutOfStock, PreOrder, SoldOut. Possible
 * values include: 'Discontinued', 'InStock', 'InStoreOnly',
 * 'LimitedAvailability', 'OnlineOnly', 'OutOfStock', 'PreOrder', 'SoldOut'
 * @property {object} [aggregateRating] An aggregated rating that indicates how
 * well the product has been rated by others.
 * @property {number} [aggregateRating.reviewCount] The number of times the
 * recipe has been rated or reviewed.
 * @property {string} [lastUpdated] The last date that the offer was updated.
 * The date is in the form YYYY-MM-DD.
 */
export interface Offer extends Thing {
  readonly seller?: Organization;
  readonly price?: number;
  readonly priceCurrency?: string;
  readonly availability?: string;
  readonly aggregateRating?: AggregateRating;
  readonly lastUpdated?: string;
}

/**
 * @class
 * Initializes a new instance of the AggregateOffer class.
 * @constructor
 * Defines a list of offers from merchants that are related to the image.
 *
 * @property {array} [offers] A list of offers from merchants that have
 * offerings related to the image.
 */
export interface AggregateOffer extends Offer {
  readonly offers?: Offer[];
}

/**
 * @class
 * Initializes a new instance of the ImagesImageMetadata class.
 * @constructor
 * Defines a count of the number of websites where you can shop or perform
 * other actions related to the image.
 *
 * @property {number} [shoppingSourcesCount] The number of websites that sell
 * the products seen in the image.
 * @property {number} [recipeSourcesCount] The number of websites that offer
 * recipes of the food seen in the image.
 * @property {object} [aggregateOffer] A summary of the online offers of
 * products found in the image. For example, if the image is of a dress, the
 * offer might identify the lowest price and the number of offers found. Only
 * visually similar products insights include this field. The offer includes
 * the following fields: Name, AggregateRating, OfferCount, and LowPrice.
 * @property {array} [aggregateOffer.offers] A list of offers from merchants
 * that have offerings related to the image.
 */
export interface ImagesImageMetadata {
  readonly shoppingSourcesCount?: number;
  readonly recipeSourcesCount?: number;
  readonly aggregateOffer?: AggregateOffer;
}

/**
 * @class
 * Initializes a new instance of the MediaObject class.
 * @constructor
 * Defines a media object.
 *
 * @property {string} [contentUrl] Original URL to retrieve the source (file)
 * for the media object (e.g., the source URL for the image).
 * @property {string} [hostPageUrl] URL of the page that hosts the media
 * object.
 * @property {string} [contentSize] Size of the media object content. Use
 * format "value unit" (e.g., "1024 B").
 * @property {string} [encodingFormat] Encoding format (e.g., png, gif, jpeg,
 * etc).
 * @property {string} [hostPageDisplayUrl] Display URL of the page that hosts
 * the media object.
 * @property {number} [width] The width of the media object, in pixels.
 * @property {number} [height] The height of the media object, in pixels.
 */
export interface MediaObject extends CreativeWork {
  readonly contentUrl?: string;
  readonly hostPageUrl?: string;
  readonly contentSize?: string;
  readonly encodingFormat?: string;
  readonly hostPageDisplayUrl?: string;
  readonly width?: number;
  readonly height?: number;
}

/**
 * @class
 * Initializes a new instance of the ImageObject class.
 * @constructor
 * Defines an image.
 *
 * @property {object} [thumbnail] The URL to a thumbnail of the image.
 * @property {string} [imageInsightsToken] The token that you use in a
 * subsequent call to Visual Search API to get additional information about the
 * image. For information about using this token, see the imageInsightsToken
 * field inside the knowledgeRequest request parameter.
 * @property {object} [insightsMetadata] A count of the number of websites
 * where you can shop or perform other actions related to the image. For
 * example, if the image is of an apple pie, this object includes a count of
 * the number of websites where you can buy an apple pie. To indicate the
 * number of offers in your UX, include badging such as a shopping cart icon
 * that contains the count. When the user clicks on the icon, use
 * imageInisghtsToken in a subsequent Visual Search API call to get the list of
 * shopping websites.
 * @property {number} [insightsMetadata.shoppingSourcesCount] The number of
 * websites that sell the products seen in the image.
 * @property {number} [insightsMetadata.recipeSourcesCount] The number of
 * websites that offer recipes of the food seen in the image.
 * @property {object} [insightsMetadata.aggregateOffer] A summary of the online
 * offers of products found in the image. For example, if the image is of a
 * dress, the offer might identify the lowest price and the number of offers
 * found. Only visually similar products insights include this field. The offer
 * includes the following fields: Name, AggregateRating, OfferCount, and
 * LowPrice.
 * @property {array} [insightsMetadata.aggregateOffer.offers] A list of offers
 * from merchants that have offerings related to the image.
 * @property {string} [imageId] Unique Id for the image.
 * @property {string} [accentColor] A three-byte hexadecimal number that
 * represents the color that dominates the image. Use the color as the
 * temporary background in your client until the image is loaded.
 * @property {string} [visualWords] For interal use only.
 */
export interface ImageObject extends MediaObject {
  readonly thumbnail?: ImageObject;
  readonly imageInsightsToken?: string;
  readonly insightsMetadata?: ImagesImageMetadata;
  readonly imageId?: string;
  readonly accentColor?: string;
  readonly visualWords?: string;
}

/**
 * @class
 * Initializes a new instance of the ImageKnowledge class.
 * @constructor
 * Defines a visual search API response.
 *
 * @property {array} [tags] A list of visual search tags.
 * @property {object} [image] Image object containing metadata about the
 * requested image.
 * @property {object} [image.thumbnail] The URL to a thumbnail of the image.
 * @property {string} [image.imageInsightsToken] The token that you use in a
 * subsequent call to Visual Search API to get additional information about the
 * image. For information about using this token, see the imageInsightsToken
 * field inside the knowledgeRequest request parameter.
 * @property {object} [image.insightsMetadata] A count of the number of
 * websites where you can shop or perform other actions related to the image.
 * For example, if the image is of an apple pie, this object includes a count
 * of the number of websites where you can buy an apple pie. To indicate the
 * number of offers in your UX, include badging such as a shopping cart icon
 * that contains the count. When the user clicks on the icon, use
 * imageInisghtsToken in a subsequent Visual Search API call to get the list of
 * shopping websites.
 * @property {number} [image.insightsMetadata.shoppingSourcesCount] The number
 * of websites that sell the products seen in the image.
 * @property {number} [image.insightsMetadata.recipeSourcesCount] The number of
 * websites that offer recipes of the food seen in the image.
 * @property {object} [image.insightsMetadata.aggregateOffer] A summary of the
 * online offers of products found in the image. For example, if the image is
 * of a dress, the offer might identify the lowest price and the number of
 * offers found. Only visually similar products insights include this field.
 * The offer includes the following fields: Name, AggregateRating, OfferCount,
 * and LowPrice.
 * @property {array} [image.insightsMetadata.aggregateOffer.offers] A list of
 * offers from merchants that have offerings related to the image.
 * @property {string} [image.imageId] Unique Id for the image.
 * @property {string} [image.accentColor] A three-byte hexadecimal number that
 * represents the color that dominates the image. Use the color as the
 * temporary background in your client until the image is loaded.
 * @property {string} [image.visualWords] For interal use only.
 */
export interface ImageKnowledge extends Response {
  readonly tags?: ImageTag[];
  readonly image?: ImageObject;
}

/**
 * @class
 * Initializes a new instance of the ErrorModel class.
 * @constructor
 * Defines the error that occurred.
 *
 * @property {string} code The error code that identifies the category of
 * error. Possible values include: 'None', 'ServerError', 'InvalidRequest',
 * 'RateLimitExceeded', 'InvalidAuthorization', 'InsufficientAuthorization'.
 * Default value: 'None' .
 * @property {string} [subCode] The error code that further helps to identify
 * the error. Possible values include: 'UnexpectedError', 'ResourceError',
 * 'NotImplemented', 'ParameterMissing', 'ParameterInvalidValue',
 * 'HttpNotAllowed', 'Blocked', 'AuthorizationMissing',
 * 'AuthorizationRedundancy', 'AuthorizationDisabled', 'AuthorizationExpired'
 * @property {string} message A description of the error.
 * @property {string} [moreDetails] A description that provides additional
 * information about the error.
 * @property {string} [parameter] The parameter in the request that caused the
 * error.
 * @property {string} [value] The parameter's value in the request that was not
 * valid.
 */
export interface ErrorModel {
  code: string;
  readonly subCode?: string;
  message: string;
  readonly moreDetails?: string;
  readonly parameter?: string;
  readonly value?: string;
}

/**
 * @class
 * Initializes a new instance of the ErrorResponse class.
 * @constructor
 * The top-level response that represents a failed request.
 *
 * @property {array} errors A list of errors that describe the reasons why the
 * request failed.
 */
export interface ErrorResponse extends Response {
  errors: ErrorModel[];
}

/**
 * @class
 * Initializes a new instance of the Person class.
 * @constructor
 * Defines a person.
 *
 * @property {string} [jobTitle] The person's job title.
 * @property {string} [twitterProfile] The URL of the person's twitter profile.
 */
export interface Person extends Thing {
  readonly jobTitle?: string;
  readonly twitterProfile?: string;
}

/**
 * @class
 * Initializes a new instance of the ImageEntityAction class.
 * @constructor
 * Defines an entity action.
 *
 */
export interface ImageEntityAction extends ImageAction {
}

/**
 * @class
 * Initializes a new instance of the ImagesModule class.
 * @constructor
 * Defines a list of images.
 *
 * @property {array} [value] A list of images.
 */
export interface ImagesModule {
  readonly value?: ImageObject[];
}

/**
 * @class
 * Initializes a new instance of the ImageModuleAction class.
 * @constructor
 * Defines an image list action.
 *
 * @property {object} [data] A list of images.
 * @property {array} [data.value] A list of images.
 */
export interface ImageModuleAction extends ImageAction {
  readonly data?: ImagesModule;
}

/**
 * @class
 * Initializes a new instance of the Recipe class.
 * @constructor
 * Defines a cooking recipe.
 *
 * @property {string} [cookTime] The amount of time the food takes to cook. For
 * example, PT25M. For information about the time format, see
 * http://en.wikipedia.org/wiki/ISO_8601#Durations.
 * @property {string} [prepTime] The amount of time required to prepare the
 * ingredients. For example, PT15M. For information about the time format, see
 * http://en.wikipedia.org/wiki/ISO_8601#Durations.
 * @property {string} [totalTime] The total amount of time it takes to prepare
 * and cook the recipe. For example, PT45M. For information about the time
 * format, see http://en.wikipedia.org/wiki/ISO_8601#Durations.
 */
export interface Recipe extends CreativeWork {
  readonly cookTime?: string;
  readonly prepTime?: string;
  readonly totalTime?: string;
}

/**
 * @class
 * Initializes a new instance of the RecipesModule class.
 * @constructor
 * Defines a list of recipes.
 *
 * @property {array} [value] A list of recipes.
 */
export interface RecipesModule {
  readonly value?: Recipe[];
}

/**
 * @class
 * Initializes a new instance of the ImageRecipesAction class.
 * @constructor
 * Defines an recipe action.
 *
 * @property {object} [data] A list of recipes related to the image.
 * @property {array} [data.value] A list of recipes.
 */
export interface ImageRecipesAction extends ImageAction {
  readonly data?: RecipesModule;
}

/**
 * @class
 * Initializes a new instance of the Query class.
 * @constructor
 * Defines a search query.
 *
 * @property {string} text The query string. Use this string as the query term
 * in a new search request.
 * @property {string} [displayText] The display version of the query term.
 * @property {string} [webSearchUrl] The URL that takes the user to the Bing
 * search results page for the query.
 * @property {string} [searchLink] The URL that you use to get the results of
 * the related search. Before using the URL, you must append query parameters
 * as appropriate and include the Ocp-Apim-Subscription-Key header. Use this
 * URL if you're displaying the results in your own user interface. Otherwise,
 * use the webSearchUrl URL.
 * @property {object} [thumbnail] The URL to a thumbnail of a related image.
 * @property {object} [thumbnail.thumbnail] The URL to a thumbnail of the
 * image.
 * @property {string} [thumbnail.imageInsightsToken] The token that you use in
 * a subsequent call to Visual Search API to get additional information about
 * the image. For information about using this token, see the
 * imageInsightsToken field inside the knowledgeRequest request parameter.
 * @property {object} [thumbnail.insightsMetadata] A count of the number of
 * websites where you can shop or perform other actions related to the image.
 * For example, if the image is of an apple pie, this object includes a count
 * of the number of websites where you can buy an apple pie. To indicate the
 * number of offers in your UX, include badging such as a shopping cart icon
 * that contains the count. When the user clicks on the icon, use
 * imageInisghtsToken in a subsequent Visual Search API call to get the list of
 * shopping websites.
 * @property {number} [thumbnail.insightsMetadata.shoppingSourcesCount] The
 * number of websites that sell the products seen in the image.
 * @property {number} [thumbnail.insightsMetadata.recipeSourcesCount] The
 * number of websites that offer recipes of the food seen in the image.
 * @property {object} [thumbnail.insightsMetadata.aggregateOffer] A summary of
 * the online offers of products found in the image. For example, if the image
 * is of a dress, the offer might identify the lowest price and the number of
 * offers found. Only visually similar products insights include this field.
 * The offer includes the following fields: Name, AggregateRating, OfferCount,
 * and LowPrice.
 * @property {array} [thumbnail.insightsMetadata.aggregateOffer.offers] A list
 * of offers from merchants that have offerings related to the image.
 * @property {string} [thumbnail.imageId] Unique Id for the image.
 * @property {string} [thumbnail.accentColor] A three-byte hexadecimal number
 * that represents the color that dominates the image. Use the color as the
 * temporary background in your client until the image is loaded.
 * @property {string} [thumbnail.visualWords] For interal use only.
 */
export interface Query {
  text: string;
  readonly displayText?: string;
  readonly webSearchUrl?: string;
  readonly searchLink?: string;
  readonly thumbnail?: ImageObject;
}

/**
 * @class
 * Initializes a new instance of the RelatedSearchesModule class.
 * @constructor
 * Defines a list of related searches.
 *
 * @property {array} [value] A list of related searches.
 */
export interface RelatedSearchesModule {
  readonly value?: Query[];
}

/**
 * @class
 * Initializes a new instance of the ImageRelatedSearchesAction class.
 * @constructor
 * Defines an related search action.
 *
 * @property {object} [data] A list of queries related to the image.
 * @property {array} [data.value] A list of related searches.
 */
export interface ImageRelatedSearchesAction extends ImageAction {
  readonly data?: RelatedSearchesModule;
}

/**
 * @class
 * Initializes a new instance of the ImageShoppingSourcesAction class.
 * @constructor
 * Defines a shopping sources action.
 *
 * @property {object} [data] A list of merchants that offer items related to
 * the image.
 * @property {array} [data.offers] A list of offers from merchants that have
 * offerings related to the image.
 */
export interface ImageShoppingSourcesAction extends ImageAction {
  readonly data?: AggregateOffer;
}

/**
 * @class
 * Initializes a new instance of the CropArea class.
 * @constructor
 * A JSON object consisting of coordinates specifying the four corners of a
 * cropped rectangle within the input image.
 *
 * @property {number} top The top coordinate of the region to be cropped. The
 * coordinate is a fractional value of the original image's height and is
 * measured from the top edge of the image. Specify the coordinate as a value
 * from 0.0 through 1.0.
 * @property {number} bottom The bottom coordinate of the region to be cropped.
 * The coordinate is a fractional value of the original image's height and is
 * measured from the top edge of the image. Specify the coordinate as a value
 * from 0.0 through 1.0.
 * @property {number} left The left coordinate of the region to be cropped. The
 * coordinate is a fractional value of the original image's width and is
 * measured from the left edge of the image. Specify the coordinate as a value
 * from 0.0 through 1.0.
 * @property {number} right The right coordinate of the region to be cropped.
 * The coordinate is a fractional value of the original image's width and is
 * measured from the left edge of the image. Specify the coordinate as a value
 * from 0.0 through 1.0.
 */
export interface CropArea {
  top: number;
  bottom: number;
  left: number;
  right: number;
}

/**
 * @class
 * Initializes a new instance of the ImageInfo class.
 * @constructor
 * A JSON object that identities the image to get insights of . It also
 * includes the optional crop area that you use to identify the region of
 * interest in the image.
 *
 * @property {string} [imageInsightsToken] An image insights token. To get the
 * insights token, call one of the Image Search APIs (for example,
 * /images/search). In the search results, the
 * [Image](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image)
 * object's
 * [imageInsightsToken](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image-imageinsightstoken)
 * field contains the token. The imageInsightsToken and url fields mutually
 * exclusive; do not specify both. Do not specify an insights token if the
 * request includes the image form data.
 * @property {string} [url] The URL of the input image. The imageInsightsToken
 * and url fields are mutually exclusive; do not specify both. Do not specify
 * the URL if the request includes the image form data.
 * @property {object} [cropArea] A JSON object consisting of coordinates
 * specifying the four corners of a cropped rectangle within the input image.
 * Use the crop area to identify the region of interest in the image. You can
 * apply the crop area to the images specified using the imageInsightsToken or
 * url fields, or an image binary specified in an image form data.
 * @property {number} [cropArea.top] The top coordinate of the region to be
 * cropped. The coordinate is a fractional value of the original image's height
 * and is measured from the top edge of the image. Specify the coordinate as a
 * value from 0.0 through 1.0.
 * @property {number} [cropArea.bottom] The bottom coordinate of the region to
 * be cropped. The coordinate is a fractional value of the original image's
 * height and is measured from the top edge of the image. Specify the
 * coordinate as a value from 0.0 through 1.0.
 * @property {number} [cropArea.left] The left coordinate of the region to be
 * cropped. The coordinate is a fractional value of the original image's width
 * and is measured from the left edge of the image. Specify the coordinate as a
 * value from 0.0 through 1.0.
 * @property {number} [cropArea.right] The right coordinate of the region to be
 * cropped. The coordinate is a fractional value of the original image's width
 * and is measured from the left edge of the image. Specify the coordinate as a
 * value from 0.0 through 1.0.
 */
export interface ImageInfo {
  imageInsightsToken?: string;
  url?: string;
  cropArea?: CropArea;
}

/**
 * @class
 * Initializes a new instance of the Filters class.
 * @constructor
 * A key-value object consisting of filters that may be specified to limit the
 * results returned by the API. Current available filters: site.
 *
 * @property {string} [site] The URL of the site to return similar images and
 * similar products from. (e.g., "www.bing.com", "bing.com").
 */
export interface Filters {
  site?: string;
}

/**
 * @class
 * Initializes a new instance of the KnowledgeRequest class.
 * @constructor
 * A JSON object containing information about the request, such as filters for
 * the resulting actions.
 *
 * @property {object} [filters] A key-value object consisting of filters that
 * may be specified to limit the results returned by the API.
 * @property {string} [filters.site] The URL of the site to return similar
 * images and similar products from. (e.g., "www.bing.com", "bing.com").
 */
export interface KnowledgeRequest {
  filters?: Filters;
}

/**
 * @class
 * Initializes a new instance of the VisualSearchRequest class.
 * @constructor
 * A JSON object that contains information about the image to get insights of.
 * Specify this object only in a knowledgeRequest form data.
 *
 * @property {object} [imageInfo] A JSON object that identities the image to
 * get insights of.
 * @property {string} [imageInfo.imageInsightsToken] An image insights token.
 * To get the insights token, call one of the Image Search APIs (for example,
 * /images/search). In the search results, the
 * [Image](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image)
 * object's
 * [imageInsightsToken](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image-imageinsightstoken)
 * field contains the token. The imageInsightsToken and url fields mutually
 * exclusive; do not specify both. Do not specify an insights token if the
 * request includes the image form data.
 * @property {string} [imageInfo.url] The URL of the input image. The
 * imageInsightsToken and url fields are mutually exclusive; do not specify
 * both. Do not specify the URL if the request includes the image form data.
 * @property {object} [imageInfo.cropArea] A JSON object consisting of
 * coordinates specifying the four corners of a cropped rectangle within the
 * input image. Use the crop area to identify the region of interest in the
 * image. You can apply the crop area to the images specified using the
 * imageInsightsToken or url fields, or an image binary specified in an image
 * form data.
 * @property {number} [imageInfo.cropArea.top] The top coordinate of the region
 * to be cropped. The coordinate is a fractional value of the original image's
 * height and is measured from the top edge of the image. Specify the
 * coordinate as a value from 0.0 through 1.0.
 * @property {number} [imageInfo.cropArea.bottom] The bottom coordinate of the
 * region to be cropped. The coordinate is a fractional value of the original
 * image's height and is measured from the top edge of the image. Specify the
 * coordinate as a value from 0.0 through 1.0.
 * @property {number} [imageInfo.cropArea.left] The left coordinate of the
 * region to be cropped. The coordinate is a fractional value of the original
 * image's width and is measured from the left edge of the image. Specify the
 * coordinate as a value from 0.0 through 1.0.
 * @property {number} [imageInfo.cropArea.right] The right coordinate of the
 * region to be cropped. The coordinate is a fractional value of the original
 * image's width and is measured from the left edge of the image. Specify the
 * coordinate as a value from 0.0 through 1.0.
 * @property {object} [knowledgeRequest] A JSON object containing information
 * about the request, such as filters, or a description.
 * @property {object} [knowledgeRequest.filters] A key-value object consisting
 * of filters that may be specified to limit the results returned by the API.
 * @property {string} [knowledgeRequest.filters.site] The URL of the site to
 * return similar images and similar products from. (e.g., "www.bing.com",
 * "bing.com").
 */
export interface VisualSearchRequest {
  imageInfo?: ImageInfo;
  knowledgeRequest?: KnowledgeRequest;
}
