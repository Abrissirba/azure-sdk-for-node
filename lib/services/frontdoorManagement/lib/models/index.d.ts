/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource } from 'ms-rest-azure';
import { CloudError } from 'ms-rest-azure';
import * as moment from 'moment';

export { BaseResource } from 'ms-rest-azure';
export { CloudError } from 'ms-rest-azure';


/**
 * @class
 * Initializes a new instance of the Resource class.
 * @constructor
 * Common resource representation.
 *
 * @property {string} [id] Resource ID.
 * @property {string} [name] Resource name.
 * @property {string} [type] Resource type.
 * @property {string} [location] Resource location.
 * @property {object} [tags] Resource tags.
 */
export interface Resource extends BaseResource {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
  location?: string;
  tags?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the FrontDoor class.
 * @constructor
 * Front Door represents a collection of backend endpoints to route traffic to
 * along with rules that specify how traffic is sent there.
 *
 * @property {string} [friendlyName] A friendly name for the frontDoor
 * @property {array} [routingRules] Routing rules associated with this Front
 * Door.
 * @property {array} [loadBalancingSettings] Load balancing settings associated
 * with this Front Door instance.
 * @property {array} [healthProbeSettings] Health probe settings associated
 * with this Front Door instance.
 * @property {array} [backendPools] Backend pools available to routing rules.
 * @property {array} [frontendEndpoints] Frontend endpoints available to
 * routing rules.
 * @property {string} [enabledState] Operational status of the Front Door load
 * balancer. Permitted values are 'Enabled' or 'Disabled'. Possible values
 * include: 'Enabled', 'Disabled'
 * @property {string} [resourceState] Resource status of the Front Door.
 * Possible values include: 'Creating', 'Enabling', 'Enabled', 'Disabling',
 * 'Disabled', 'Deleting'
 * @property {string} [provisioningState] Provisioning state of the Front Door.
 * @property {string} [cname] The host that each frontendEndpoint must CNAME
 * to.
 */
export interface FrontDoor extends Resource {
  friendlyName?: string;
  routingRules?: RoutingRule[];
  loadBalancingSettings?: LoadBalancingSettingsModel[];
  healthProbeSettings?: HealthProbeSettingsModel[];
  backendPools?: BackendPool[];
  frontendEndpoints?: FrontendEndpoint[];
  enabledState?: string;
  resourceState?: string;
  readonly provisioningState?: string;
  readonly cname?: string;
}

/**
 * @class
 * Initializes a new instance of the SubResource class.
 * @constructor
 * Reference to another subresource.
 *
 * @property {string} [id] Resource ID.
 */
export interface SubResource extends BaseResource {
  id?: string;
}

/**
 * @class
 * Initializes a new instance of the RoutingRule class.
 * @constructor
 * A routing rule represents a specification for traffic to treat and where to
 * send it, along with health probe information.
 *
 * @property {array} [frontendEndpoints] Frontend endpoints associated with
 * this rule
 * @property {array} [acceptedProtocols] Protocol schemes to match for this
 * rule
 * @property {array} [patternsToMatch] The route patterns of the rule.
 * @property {string} [customForwardingPath] A custom path used to rewrite
 * resource paths matched by this rule. Leave empty to use incoming path.
 * @property {string} [forwardingProtocol] Protocol this rule will use when
 * forwarding traffic to backends. Possible values include: 'HttpOnly',
 * 'HttpsOnly', 'MatchRequest'
 * @property {object} [cacheConfiguration] The caching configuration associated
 * with this rule.
 * @property {string} [cacheConfiguration.queryParameterStripDirective]
 * Treatment of URL query terms when forming the cache key. Possible values
 * include: 'StripNone', 'StripAll'
 * @property {string} [cacheConfiguration.dynamicCompression] Whether to use
 * dynamic compression for cached content. Possible values include: 'Enabled',
 * 'Disabled'
 * @property {object} [backendPool] A reference to the BackendPool which this
 * rule routes to.
 * @property {string} [backendPool.id] Resource ID.
 * @property {string} [enabledState] Whether to enable use of this rule.
 * Permitted values are 'Enabled' or 'Disabled'. Possible values include:
 * 'Enabled', 'Disabled'
 * @property {string} [resourceState] Resource status. Possible values include:
 * 'Creating', 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Deleting'
 * @property {string} [name] Resource name.
 * @property {string} [type] Resource type.
 */
export interface RoutingRule extends SubResource {
  frontendEndpoints?: SubResource[];
  acceptedProtocols?: string[];
  patternsToMatch?: string[];
  customForwardingPath?: string;
  forwardingProtocol?: string;
  cacheConfiguration?: CacheConfiguration;
  backendPool?: SubResource;
  enabledState?: string;
  resourceState?: string;
  name?: string;
  readonly type?: string;
}

/**
 * @class
 * Initializes a new instance of the LoadBalancingSettingsModel class.
 * @constructor
 * Load balancing settings for a backend pool
 *
 * @property {number} [sampleSize] The number of samples to consider for load
 * balancing decisions
 * @property {number} [successfulSamplesRequired] The number of samples within
 * the sample period that must succeed
 * @property {number} [additionalLatencyMilliseconds] The additional latency in
 * milliseconds for probes to fall into the lowest latency bucket
 * @property {string} [resourceState] Resource status. Possible values include:
 * 'Creating', 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Deleting'
 * @property {string} [name] Resource name.
 * @property {string} [type] Resource type.
 */
export interface LoadBalancingSettingsModel extends SubResource {
  sampleSize?: number;
  successfulSamplesRequired?: number;
  additionalLatencyMilliseconds?: number;
  resourceState?: string;
  name?: string;
  readonly type?: string;
}

/**
 * @class
 * Initializes a new instance of the HealthProbeSettingsModel class.
 * @constructor
 * Load balancing settings for a backend pool
 *
 * @property {string} [path] The path to use for the health probe. Default is /
 * @property {string} [protocol] Protocol scheme to use for this probe.
 * Possible values include: 'Http', 'Https'
 * @property {number} [intervalInSeconds] The number of seconds between health
 * probes.
 * @property {string} [resourceState] Resource status. Possible values include:
 * 'Creating', 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Deleting'
 * @property {string} [name] Resource name.
 * @property {string} [type] Resource type.
 */
export interface HealthProbeSettingsModel extends SubResource {
  path?: string;
  protocol?: string;
  intervalInSeconds?: number;
  resourceState?: string;
  name?: string;
  readonly type?: string;
}

/**
 * @class
 * Initializes a new instance of the BackendPool class.
 * @constructor
 * A backend pool is a collection of backends that can be routed to.
 *
 * @property {array} [backends] The set of backends for this pool
 * @property {object} [loadBalancingSettings] Load balancing settings for a
 * backend pool
 * @property {string} [loadBalancingSettings.id] Resource ID.
 * @property {object} [healthProbeSettings] L7 health probe settings for a
 * backend pool
 * @property {string} [healthProbeSettings.id] Resource ID.
 * @property {string} [resourceState] Resource status. Possible values include:
 * 'Creating', 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Deleting'
 * @property {string} [name] Resource name.
 * @property {string} [type] Resource type.
 */
export interface BackendPool extends SubResource {
  backends?: Backend[];
  loadBalancingSettings?: SubResource;
  healthProbeSettings?: SubResource;
  resourceState?: string;
  name?: string;
  readonly type?: string;
}

/**
 * @class
 * Initializes a new instance of the KeyVaultCertificateSourceParametersVault class.
 * @constructor
 * The Key Vault containing the SSL certificate
 *
 * @property {string} [id] Resource ID.
 */
export interface KeyVaultCertificateSourceParametersVault {
  id?: string;
}

/**
 * @class
 * Initializes a new instance of the CustomHttpsConfiguration class.
 * @constructor
 * Https settings for a domain
 *
 * @property {string} [certificateSource] Defines the source of the SSL
 * certificate. Possible values include: 'AzureKeyVault', 'FrontDoor'
 * @property {string} [protocolType] Defines the TLS extension protocol that is
 * used for secure delivery. Possible values include: 'ServerNameIndication'
 * @property {object} [vault] The Key Vault containing the SSL certificate
 * @property {string} [vault.id] Resource ID.
 * @property {string} [secretName] The name of the Key Vault secret
 * representing the full certificate PFX
 * @property {string} [secretVersion] The version of the Key Vault secret
 * representing the full certificate PFX
 * @property {string} [certificateType] Defines the type of the certificate
 * used for secure connections to a frontendEndpoint. Possible values include:
 * 'Dedicated'
 */
export interface CustomHttpsConfiguration {
  certificateSource?: string;
  protocolType?: string;
  vault?: KeyVaultCertificateSourceParametersVault;
  secretName?: string;
  secretVersion?: string;
  certificateType?: string;
}

/**
 * @class
 * Initializes a new instance of the FrontendEndpoint class.
 * @constructor
 * A frontend endpoint used for routing.
 *
 * @property {string} [hostName] The host name of the frontendEndpoint. Must be
 * a domain name.
 * @property {string} [sessionAffinityEnabledState] Whether to allow session
 * affinity on this host. Valid options are 'Enabled' or 'Disabled'. Possible
 * values include: 'Enabled', 'Disabled'
 * @property {number} [sessionAffinityTtlSeconds] UNUSED. This field will be
 * ignored. The TTL to use in seconds for session affinity, if applicable.
 * @property {object} [webApplicationFirewallPolicyLink] Defines the Web
 * Application Firewall policy for each host (if applicable)
 * @property {string} [webApplicationFirewallPolicyLink.id] Resource ID.
 * @property {string} [resourceState] Resource status. Possible values include:
 * 'Creating', 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Deleting'
 * @property {string} [customHttpsProvisioningState] Provisioning status of
 * Custom Https of the frontendEndpoint. Possible values include: 'Enabling',
 * 'Enabled', 'Disabling', 'Disabled', 'Failed'
 * @property {string} [customHttpsProvisioningSubstate] Provisioning substate
 * shows the progress of custom HTTPS enabling/disabling process step by step.
 * Possible values include: 'SubmittingDomainControlValidationRequest',
 * 'PendingDomainControlValidationREquestApproval',
 * 'DomainControlValidationRequestApproved',
 * 'DomainControlValidationRequestRejected',
 * 'DomainControlValidationRequestTimedOut', 'IssuingCertificate',
 * 'DeployingCertificate', 'CertificateDeployed', 'DeletingCertificate',
 * 'CertificateDeleted'
 * @property {object} [customHttpsConfiguration] The configuration specifying
 * how to enable HTTPS
 * @property {string} [customHttpsConfiguration.certificateSource] Defines the
 * source of the SSL certificate. Possible values include: 'AzureKeyVault',
 * 'FrontDoor'
 * @property {string} [customHttpsConfiguration.protocolType] Defines the TLS
 * extension protocol that is used for secure delivery. Possible values
 * include: 'ServerNameIndication'
 * @property {object} [customHttpsConfiguration.vault] The Key Vault containing
 * the SSL certificate
 * @property {string} [customHttpsConfiguration.vault.id] Resource ID.
 * @property {string} [customHttpsConfiguration.secretName] The name of the Key
 * Vault secret representing the full certificate PFX
 * @property {string} [customHttpsConfiguration.secretVersion] The version of
 * the Key Vault secret representing the full certificate PFX
 * @property {string} [customHttpsConfiguration.certificateType] Defines the
 * type of the certificate used for secure connections to a frontendEndpoint.
 * Possible values include: 'Dedicated'
 * @property {string} [name] Resource name.
 * @property {string} [type] Resource type.
 */
export interface FrontendEndpoint extends SubResource {
  hostName?: string;
  sessionAffinityEnabledState?: string;
  sessionAffinityTtlSeconds?: number;
  webApplicationFirewallPolicyLink?: FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink;
  resourceState?: string;
  readonly customHttpsProvisioningState?: string;
  readonly customHttpsProvisioningSubstate?: string;
  readonly customHttpsConfiguration?: CustomHttpsConfiguration;
  name?: string;
  readonly type?: string;
}

/**
 * @class
 * Initializes a new instance of the FrontDoorUpdateParameters class.
 * @constructor
 * The properties needed to update a Front Door
 *
 * @property {string} [friendlyName] A friendly name for the frontDoor
 * @property {array} [routingRules] Routing rules associated with this Front
 * Door.
 * @property {array} [loadBalancingSettings] Load balancing settings associated
 * with this Front Door instance.
 * @property {array} [healthProbeSettings] Health probe settings associated
 * with this Front Door instance.
 * @property {array} [backendPools] Backend pools available to routing rules.
 * @property {array} [frontendEndpoints] Frontend endpoints available to
 * routing rules.
 * @property {string} [enabledState] Operational status of the Front Door load
 * balancer. Permitted values are 'Enabled' or 'Disabled'. Possible values
 * include: 'Enabled', 'Disabled'
 */
export interface FrontDoorUpdateParameters {
  friendlyName?: string;
  routingRules?: RoutingRule[];
  loadBalancingSettings?: LoadBalancingSettingsModel[];
  healthProbeSettings?: HealthProbeSettingsModel[];
  backendPools?: BackendPool[];
  frontendEndpoints?: FrontendEndpoint[];
  enabledState?: string;
}

/**
 * @class
 * Initializes a new instance of the PurgeParameters class.
 * @constructor
 * Parameters required for content purge.
 *
 * @property {array} contentPaths The path to the content to be purged. Can
 * describe a file path or a wild card directory.
 */
export interface PurgeParameters {
  contentPaths: string[];
}

/**
 * @class
 * Initializes a new instance of the CacheConfiguration class.
 * @constructor
 * Caching settings for a caching-type route. To disable caching, do not
 * provide a cacheConfiguration object.
 *
 * @property {string} [queryParameterStripDirective] Treatment of URL query
 * terms when forming the cache key. Possible values include: 'StripNone',
 * 'StripAll'
 * @property {string} [dynamicCompression] Whether to use dynamic compression
 * for cached content. Possible values include: 'Enabled', 'Disabled'
 */
export interface CacheConfiguration {
  queryParameterStripDirective?: string;
  dynamicCompression?: string;
}

/**
 * @class
 * Initializes a new instance of the RoutingRuleUpdateParameters class.
 * @constructor
 * Routing rules to apply to an endpoint
 *
 * @property {array} [frontendEndpoints] Frontend endpoints associated with
 * this rule
 * @property {array} [acceptedProtocols] Protocol schemes to match for this
 * rule
 * @property {array} [patternsToMatch] The route patterns of the rule.
 * @property {string} [customForwardingPath] A custom path used to rewrite
 * resource paths matched by this rule. Leave empty to use incoming path.
 * @property {string} [forwardingProtocol] Protocol this rule will use when
 * forwarding traffic to backends. Possible values include: 'HttpOnly',
 * 'HttpsOnly', 'MatchRequest'
 * @property {object} [cacheConfiguration] The caching configuration associated
 * with this rule.
 * @property {string} [cacheConfiguration.queryParameterStripDirective]
 * Treatment of URL query terms when forming the cache key. Possible values
 * include: 'StripNone', 'StripAll'
 * @property {string} [cacheConfiguration.dynamicCompression] Whether to use
 * dynamic compression for cached content. Possible values include: 'Enabled',
 * 'Disabled'
 * @property {object} [backendPool] A reference to the BackendPool which this
 * rule routes to.
 * @property {string} [backendPool.id] Resource ID.
 * @property {string} [enabledState] Whether to enable use of this rule.
 * Permitted values are 'Enabled' or 'Disabled'. Possible values include:
 * 'Enabled', 'Disabled'
 */
export interface RoutingRuleUpdateParameters {
  frontendEndpoints?: SubResource[];
  acceptedProtocols?: string[];
  patternsToMatch?: string[];
  customForwardingPath?: string;
  forwardingProtocol?: string;
  cacheConfiguration?: CacheConfiguration;
  backendPool?: SubResource;
  enabledState?: string;
}

/**
 * @class
 * Initializes a new instance of the Backend class.
 * @constructor
 * Backend address of a frontDoor load balancer.
 *
 * @property {string} [address] Location of the backend (IP address or FQDN)
 * @property {number} [httpPort] The HTTP TCP port number. Must be between 1
 * and 65535.
 * @property {number} [httpsPort] The HTTPS TCP port number. Must be between 1
 * and 65535.
 * @property {string} [enabledState] Whether to enable use of this backend.
 * Permitted values are 'Enabled' or 'Disabled'. Possible values include:
 * 'Enabled', 'Disabled'
 * @property {number} [priority] Priority to use for load balancing. Higher
 * priorities will not be used for load balancing if any lower priority backend
 * is healthy.
 * @property {number} [weight] Weight of this endpoint for load balancing
 * purposes.
 * @property {string} [backendHostHeader] The value to use as the host header
 * sent to the backend. If blank or unspecified, this defaults to the incoming
 * host.
 */
export interface Backend {
  address?: string;
  httpPort?: number;
  httpsPort?: number;
  enabledState?: string;
  priority?: number;
  weight?: number;
  backendHostHeader?: string;
}

/**
 * @class
 * Initializes a new instance of the LoadBalancingSettingsUpdateParameters class.
 * @constructor
 * Round-Robin load balancing settings for a backend pool
 *
 * @property {number} [sampleSize] The number of samples to consider for load
 * balancing decisions
 * @property {number} [successfulSamplesRequired] The number of samples within
 * the sample period that must succeed
 * @property {number} [additionalLatencyMilliseconds] The additional latency in
 * milliseconds for probes to fall into the lowest latency bucket
 */
export interface LoadBalancingSettingsUpdateParameters {
  sampleSize?: number;
  successfulSamplesRequired?: number;
  additionalLatencyMilliseconds?: number;
}

/**
 * @class
 * Initializes a new instance of the HealthProbeSettingsUpdateParameters class.
 * @constructor
 * L7 health probe settings for a backend pool
 *
 * @property {string} [path] The path to use for the health probe. Default is /
 * @property {string} [protocol] Protocol scheme to use for this probe.
 * Possible values include: 'Http', 'Https'
 * @property {number} [intervalInSeconds] The number of seconds between health
 * probes.
 */
export interface HealthProbeSettingsUpdateParameters {
  path?: string;
  protocol?: string;
  intervalInSeconds?: number;
}

/**
 * @class
 * Initializes a new instance of the BackendPoolUpdateParameters class.
 * @constructor
 * A collection of backends that can be routed to.
 *
 * @property {array} [backends] The set of backends for this pool
 * @property {object} [loadBalancingSettings] Load balancing settings for a
 * backend pool
 * @property {string} [loadBalancingSettings.id] Resource ID.
 * @property {object} [healthProbeSettings] L7 health probe settings for a
 * backend pool
 * @property {string} [healthProbeSettings.id] Resource ID.
 */
export interface BackendPoolUpdateParameters {
  backends?: Backend[];
  loadBalancingSettings?: SubResource;
  healthProbeSettings?: SubResource;
}

/**
 * @class
 * Initializes a new instance of the FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink class.
 * @constructor
 * Defines the Web Application Firewall policy for each host (if applicable)
 *
 * @property {string} [id] Resource ID.
 */
export interface FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink {
  id?: string;
}

/**
 * @class
 * Initializes a new instance of the FrontendEndpointUpdateParameters class.
 * @constructor
 * Frontend endpoint used in routing rule
 *
 * @property {string} [hostName] The host name of the frontendEndpoint. Must be
 * a domain name.
 * @property {string} [sessionAffinityEnabledState] Whether to allow session
 * affinity on this host. Valid options are 'Enabled' or 'Disabled'. Possible
 * values include: 'Enabled', 'Disabled'
 * @property {number} [sessionAffinityTtlSeconds] UNUSED. This field will be
 * ignored. The TTL to use in seconds for session affinity, if applicable.
 * @property {object} [webApplicationFirewallPolicyLink] Defines the Web
 * Application Firewall policy for each host (if applicable)
 * @property {string} [webApplicationFirewallPolicyLink.id] Resource ID.
 */
export interface FrontendEndpointUpdateParameters {
  hostName?: string;
  sessionAffinityEnabledState?: string;
  sessionAffinityTtlSeconds?: number;
  webApplicationFirewallPolicyLink?: FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink;
}

/**
 * @class
 * Initializes a new instance of the ValidateCustomDomainInput class.
 * @constructor
 * Input of the custom domain to be validated for DNS mapping.
 *
 * @property {string} hostName The host name of the custom domain. Must be a
 * domain name.
 */
export interface ValidateCustomDomainInput {
  hostName: string;
}

/**
 * @class
 * Initializes a new instance of the ValidateCustomDomainOutput class.
 * @constructor
 * Output of custom domain validation.
 *
 * @property {boolean} [customDomainValidated] Indicates whether the custom
 * domain is valid or not.
 * @property {string} [reason] The reason why the custom domain is not valid.
 * @property {string} [message] Error message describing why the custom domain
 * is not valid.
 */
export interface ValidateCustomDomainOutput {
  readonly customDomainValidated?: boolean;
  readonly reason?: string;
  readonly message?: string;
}

/**
 * @class
 * Initializes a new instance of the ErrorResponse class.
 * @constructor
 * Error reponse indicates Front Door service is not able to process the
 * incoming request. The reason is provided in the error message.
 *
 * @property {string} [code] Error code.
 * @property {string} [message] Error message indicating why the operation
 * failed.
 */
export interface ErrorResponse {
  readonly code?: string;
  readonly message?: string;
}

/**
 * @class
 * Initializes a new instance of the CheckNameAvailabilityInput class.
 * @constructor
 * Input of CheckNameAvailability API.
 *
 * @property {string} name The resource name to validate.
 * @property {string} type The type of the resource whose name is to be
 * validated. Possible values include: 'Microsoft.Network/frontDoors',
 * 'Microsoft.Network/frontDoors/frontendEndpoints'
 */
export interface CheckNameAvailabilityInput {
  name: string;
  type: string;
}

/**
 * @class
 * Initializes a new instance of the CheckNameAvailabilityOutput class.
 * @constructor
 * Output of check name availability API.
 *
 * @property {string} [nameAvailability] Indicates whether the name is
 * available. Possible values include: 'Available', 'Unavailable'
 * @property {string} [reason] The reason why the name is not available.
 * @property {string} [message] The detailed error message describing why the
 * name is not available.
 */
export interface CheckNameAvailabilityOutput {
  readonly nameAvailability?: string;
  readonly reason?: string;
  readonly message?: string;
}

/**
 * @class
 * Initializes a new instance of the ErrorDetails class.
 * @constructor
 * @property {string} [code]
 * @property {string} [target]
 * @property {string} [message]
 */
export interface ErrorDetails {
  code?: string;
  target?: string;
  message?: string;
}

/**
 * @class
 * Initializes a new instance of the ErrorModel class.
 * @constructor
 * @property {string} [code]
 * @property {string} [message]
 * @property {string} [target]
 * @property {array} [details]
 * @property {string} [innerError]
 */
export interface ErrorModel {
  code?: string;
  message?: string;
  target?: string;
  details?: ErrorDetails[];
  innerError?: string;
}

/**
 * @class
 * Initializes a new instance of the AzureAsyncOperationResult class.
 * @constructor
 * The response body contains the status of the specified asynchronous
 * operation, indicating whether it has succeeded, is in progress, or has
 * failed. Note that this status is distinct from the HTTP status code returned
 * for the Get Operation Status operation itself. If the asynchronous operation
 * succeeded, the response body includes the HTTP status code for the
 * successful request. If the asynchronous operation failed, the response body
 * includes the HTTP status code for the failed request and error information
 * regarding the failure.
 *
 * @property {string} [status] Status of the Azure async operation. Possible
 * values are: 'InProgress', 'Succeeded', and 'Failed'. Possible values
 * include: 'InProgress', 'Succeeded', 'Failed'
 * @property {object} [error]
 * @property {string} [error.code]
 * @property {string} [error.message]
 * @property {string} [error.target]
 * @property {array} [error.details]
 * @property {string} [error.innerError]
 */
export interface AzureAsyncOperationResult {
  status?: string;
  error?: ErrorModel;
}

/**
 * @class
 * Initializes a new instance of the TagsObject class.
 * @constructor
 * Tags object for patch operations.
 *
 * @property {object} [tags] Resource tags.
 */
export interface TagsObject {
  tags?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the PolicySettings class.
 * @constructor
 * Defines contents of a web application firewall global configuration
 *
 * @property {string} [enabledState] describes if the policy is in enabled
 * state or disabled state. Possible values include: 'Disabled', 'Enabled'
 * @property {string} [mode] Describes if it is in detection mode  or
 * prevention mode at policy level. Possible values include: 'Prevention',
 * 'Detection'
 */
export interface PolicySettings {
  enabledState?: string;
  mode?: string;
}

/**
 * @class
 * Initializes a new instance of the MatchCondition1 class.
 * @constructor
 * Define match conditions
 *
 * @property {string} matchVariable Match Variable. Possible values include:
 * 'RemoteAddr', 'RequestMethod', 'QueryString', 'PostArgs', 'RequestUri',
 * 'RequestHeader', 'RequestBody'
 * @property {string} [selector] Name of selector in RequestHeader or
 * RequestBody to be matched
 * @property {string} operator Describes operator to be matched. Possible
 * values include: 'Any', 'IPMatch', 'GeoMatch', 'Equal', 'Contains',
 * 'LessThan', 'GreaterThan', 'LessThanOrEqual', 'GreaterThanOrEqual',
 * 'BeginsWith', 'EndsWith'
 * @property {boolean} [negateCondition] Describes if this is negate condition
 * or not
 * @property {array} matchValue Match value
 */
export interface MatchCondition1 {
  matchVariable: string;
  selector?: string;
  operator: string;
  negateCondition?: boolean;
  matchValue: string[];
}

/**
 * @class
 * Initializes a new instance of the CustomRule class.
 * @constructor
 * Defines contents of a web application rule
 *
 * @property {string} [name] Gets name of the resource that is unique within a
 * policy. This name can be used to access the resource.
 * @property {string} [etag] Gets a unique read-only string that changes
 * whenever the resource is updated.
 * @property {number} priority Describes priority of the rule. Rules with a
 * lower value will be evaluated before rules with a higher value
 * @property {string} ruleType Describes type of rule. Possible values include:
 * 'MatchRule', 'RateLimitRule'
 * @property {number} [rateLimitDurationInMinutes] Defines rate limit duration.
 * Default - 1 minute
 * @property {number} [rateLimitThreshold] Defines rate limit thresold
 * @property {array} matchConditions List of match conditions
 * @property {string} action Type of Actions. Possible values include: 'Allow',
 * 'Block', 'Log'
 * @property {array} [transforms] List of transforms
 */
export interface CustomRule {
  name?: string;
  readonly etag?: string;
  priority: number;
  ruleType: string;
  rateLimitDurationInMinutes?: number;
  rateLimitThreshold?: number;
  matchConditions: MatchCondition1[];
  action: string;
  transforms?: string[];
}

/**
 * @class
 * Initializes a new instance of the CustomRules class.
 * @constructor
 * Defines contents of custom rules
 *
 * @property {array} [rules] List of rules
 */
export interface CustomRules {
  rules?: CustomRule[];
}

/**
 * @class
 * Initializes a new instance of the ManagedRuleSet class.
 * @constructor
 * Base class for all types of ManagedRuleSet.
 *
 * @property {number} [priority] Describes priority of the rule
 * @property {number} [version] defines version of the ruleset
 * @property {string} ruleSetType Polymorphic Discriminator
 */
export interface ManagedRuleSet {
  priority?: number;
  version?: number;
  ruleSetType: string;
}

/**
 * @class
 * Initializes a new instance of the ManagedRuleSets class.
 * @constructor
 * Defines ManagedRuleSets - array of managedRuleSet
 *
 * @property {array} [ruleSets] List of rules
 */
export interface ManagedRuleSets {
  ruleSets?: ManagedRuleSet[];
}

/**
 * @class
 * Initializes a new instance of the WebApplicationFirewallPolicy1 class.
 * @constructor
 * Defines web application firewall policy.
 *
 * @property {object} [policySettings] Describes  policySettings for policy
 * @property {string} [policySettings.enabledState] describes if the policy is
 * in enabled state or disabled state. Possible values include: 'Disabled',
 * 'Enabled'
 * @property {string} [policySettings.mode] Describes if it is in detection
 * mode  or prevention mode at policy level. Possible values include:
 * 'Prevention', 'Detection'
 * @property {object} [customRules] Describes custom rules inside the policy
 * @property {array} [customRules.rules] List of rules
 * @property {object} [managedRules] Describes managed rules inside the policy
 * @property {array} [managedRules.ruleSets] List of rules
 * @property {string} [provisioningState] Provisioning state of the
 * WebApplicationFirewallPolicy.
 * @property {string} [resourceState] Resource status of the policy. Possible
 * values include: 'Creating', 'Enabling', 'Enabled', 'Disabling', 'Disabled',
 * 'Deleting'
 * @property {string} [etag] Gets a unique read-only string that changes
 * whenever the resource is updated.
 */
export interface WebApplicationFirewallPolicy1 extends Resource {
  policySettings?: PolicySettings;
  customRules?: CustomRules;
  managedRules?: ManagedRuleSets;
  readonly provisioningState?: string;
  readonly resourceState?: string;
  etag?: string;
}

/**
 * @class
 * Initializes a new instance of the AzureManagedOverrideRuleGroup class.
 * @constructor
 * Defines contents of a web application rule
 *
 * @property {string} ruleGroupOverride Describes overrideruleGroup. Possible
 * values include: 'SqlInjection', 'XSS'
 * @property {string} action Type of Actions. Possible values include: 'Allow',
 * 'Block', 'Log'
 */
export interface AzureManagedOverrideRuleGroup {
  ruleGroupOverride: string;
  action: string;
}

/**
 * @class
 * Initializes a new instance of the AzureManagedRuleSet class.
 * @constructor
 * Describes azure managed provider.
 *
 * @property {array} [ruleGroupOverrides] List of azure managed provider
 * override configuration (optional)
 */
export interface AzureManagedRuleSet extends ManagedRuleSet {
  ruleGroupOverrides?: AzureManagedOverrideRuleGroup[];
}


/**
 * @class
 * Initializes a new instance of the FrontDoorListResult class.
 * @constructor
 * Result of the request to list Front Doors. It contains a list of Front Door
 * objects and a URL link to get the the next set of results.
 *
 * @property {string} [nextLink] URL to get the next set of Front Door objects
 * if there are any.
 */
export interface FrontDoorListResult extends Array<FrontDoor> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the RoutingRuleListResult class.
 * @constructor
 * Result of the request to list Routing Rules. It contains a list of Routing
 * Rule objects and a URL link to get the the next set of results.
 *
 * @property {string} [nextLink] URL to get the next set of RoutingRule objects
 * if there are any.
 */
export interface RoutingRuleListResult extends Array<RoutingRule> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the HealthProbeSettingsListResult class.
 * @constructor
 * Result of the request to list HealthProbeSettings. It contains a list of
 * HealthProbeSettings objects and a URL link to get the the next set of
 * results.
 *
 * @property {string} [nextLink] URL to get the next set of HealthProbeSettings
 * objects if there are any.
 */
export interface HealthProbeSettingsListResult extends Array<HealthProbeSettingsModel> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the LoadBalancingSettingsListResult class.
 * @constructor
 * Result of the request to list load balancing settings. It contains a list of
 * load balancing settings objects and a URL link to get the the next set of
 * results.
 *
 * @property {string} [nextLink] URL to get the next set of
 * LoadBalancingSettings objects if there are any.
 */
export interface LoadBalancingSettingsListResult extends Array<LoadBalancingSettingsModel> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the BackendPoolListResult class.
 * @constructor
 * Result of the request to list Backend Pools. It contains a list of Backend
 * Pools objects and a URL link to get the the next set of results.
 *
 * @property {string} [nextLink] URL to get the next set of BackendPool objects
 * if there are any.
 */
export interface BackendPoolListResult extends Array<BackendPool> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the FrontendEndpointsListResult class.
 * @constructor
 * Result of the request to list frontend endpoints. It contains a list of
 * Frontend endpoint objects and a URL link to get the the next set of results.
 *
 * @property {string} [nextLink] URL to get the next set of frontend endpoints
 * if there are any.
 */
export interface FrontendEndpointsListResult extends Array<FrontendEndpoint> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the WebApplicationFirewallPolicyListResult class.
 * @constructor
 * Result of the request to list WebApplicationFirewallPolicies. It contains a
 * list of WebApplicationFirewallPolicy objects and a URL link to get the the
 * next set of results.
 *
 * @property {string} [nextLink] URL to get the next set of
 * WebApplicationFirewallPolicy objects if there are any.
 */
export interface WebApplicationFirewallPolicyListResult extends Array<WebApplicationFirewallPolicy1> {
  nextLink?: string;
}
