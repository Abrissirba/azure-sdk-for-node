/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource } from 'ms-rest-azure';
import { CloudError } from 'ms-rest-azure';
import * as moment from 'moment';

export { BaseResource } from 'ms-rest-azure';
export { CloudError } from 'ms-rest-azure';


/**
 * @class
 * Initializes a new instance of the Resource class.
 * @constructor
 * Resource model definition.
 *
 * @property {string} [id] Resource identifier.
 * @property {string} [type] Resource type.
 * @property {string} [name] Resource name.
 */
export interface Resource extends BaseResource {
  readonly id?: string;
  readonly type?: string;
  readonly name?: string;
}

/**
 * @class
 * Initializes a new instance of the ResourceReference class.
 * @constructor
 * Represents a reference to another resource.
 *
 * @property {string} id Resource URI.
 * @property {string} [type] Resource type qualifier.
 * @property {string} [name] Resource name.
 * @property {string} kind Polymorphic Discriminator
 */
export interface ResourceReference {
  id: string;
  readonly type?: string;
  readonly name?: string;
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the MachineReference class.
 * @constructor
 * Reference to a machine.
 *
 */
export interface MachineReference extends ResourceReference {
}

/**
 * @class
 * Initializes a new instance of the ProcessReference class.
 * @constructor
 * Reference to a process.
 *
 * @property {object} [machine] Machine hosting the process.
 */
export interface ProcessReference extends ResourceReference {
  readonly machine?: MachineReference;
}

/**
 * @class
 * Initializes a new instance of the PortReference class.
 * @constructor
 * Reference to a port.
 *
 * @property {object} [machine] Machine hosting the port.
 * @property {string} [ipAddress] IP address of the port.
 * @property {number} [portNumber] Port number.
 */
export interface PortReference extends ResourceReference {
  readonly machine?: MachineReference;
  readonly ipAddress?: string;
  portNumber?: number;
}

/**
 * @class
 * Initializes a new instance of the MachineReferenceWithHints class.
 * @constructor
 * A machine reference with a hint of the machine's name and operating system.
 *
 * @property {string} [displayNameHint] Last known display name.
 * @property {string} [osFamilyHint] Last known operating system family.
 * Possible values include: 'unknown', 'windows', 'linux', 'solaris', 'aix'
 */
export interface MachineReferenceWithHints extends ResourceReference {
  readonly displayNameHint?: string;
  readonly osFamilyHint?: string;
}

/**
 * @class
 * Initializes a new instance of the ClientGroupReference class.
 * @constructor
 * Reference to a client group.
 *
 */
export interface ClientGroupReference extends ResourceReference {
}

/**
 * @class
 * Initializes a new instance of the CoreResource class.
 * @constructor
 * Marker resource for the core Service Map resources
 *
 * @property {string} [etag] Resource ETAG.
 * @property {string} kind Polymorphic Discriminator
 */
export interface CoreResource extends Resource {
  etag?: string;
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the Timezone class.
 * @constructor
 * Describes a timezone.
 *
 * @property {string} [fullName] Timezone full name.
 */
export interface Timezone {
  fullName?: string;
}

/**
 * @class
 * Initializes a new instance of the AgentConfiguration class.
 * @constructor
 * Describes the configuration of the Dependency Agent installed on a machine.
 *
 * @property {string} agentId Health Service Agent unique identifier.
 * @property {string} [dependencyAgentId] Dependency Agent unique identifier.
 * @property {string} [dependencyAgentVersion] Dependency Agent version number.
 * @property {string} [dependencyAgentRevision] Dependency Agent revision
 * number.
 * @property {string} [rebootStatus] Specifies whether the machine has been
 * rebooted since the Dependency Agent installation. Possible values include:
 * 'unknown', 'rebooted', 'notRebooted'
 * @property {number} [clockGranularity] Machine clock granularity in
 * milliseconds.
 */
export interface AgentConfiguration {
  agentId: string;
  dependencyAgentId?: string;
  dependencyAgentVersion?: string;
  dependencyAgentRevision?: string;
  rebootStatus?: string;
  clockGranularity?: number;
}

/**
 * @class
 * Initializes a new instance of the MachineResourcesConfiguration class.
 * @constructor
 * Describes the resources of a machine.
 *
 * @property {number} [physicalMemory] Physical memory in megabytes (MB).
 * @property {number} [cpus] Number of CPUs.
 * @property {number} [cpuSpeed] CPU speed in megahertz (Mhz).
 * @property {string} [cpuSpeedAccuracy] Describes the accuracy of the cpuSpeed
 * field. Possible values include: 'actual', 'estimated'
 */
export interface MachineResourcesConfiguration {
  physicalMemory?: number;
  cpus?: number;
  cpuSpeed?: number;
  cpuSpeedAccuracy?: string;
}

/**
 * @class
 * Initializes a new instance of the Ipv4NetworkInterface class.
 * @constructor
 * Describes an IPv4 network interface.
 *
 * @property {string} ipAddress IPv4 address.
 * @property {string} [subnetMask] IPv4 subnet mask. Default value:
 * '255.255.255.255' .
 */
export interface Ipv4NetworkInterface {
  ipAddress: string;
  subnetMask?: string;
}

/**
 * @class
 * Initializes a new instance of the Ipv6NetworkInterface class.
 * @constructor
 * Describes an IPv6 network interface.
 *
 * @property {string} ipAddress IPv6 address.
 */
export interface Ipv6NetworkInterface {
  ipAddress: string;
}

/**
 * @class
 * Initializes a new instance of the NetworkConfiguration class.
 * @constructor
 * Describes the network configuration of a machine.
 *
 * @property {array} [ipv4Interfaces] IPv4 interfaces.
 * @property {array} [ipv6Interfaces] IPv6 interfaces.
 * @property {array} [defaultIpv4Gateways] Default IPv4 gateways.
 * @property {array} [macAddresses] MAC addresses of all active network
 * interfaces.
 * @property {array} [dnsNames] DNS names associated with the machine.
 */
export interface NetworkConfiguration {
  ipv4Interfaces?: Ipv4NetworkInterface[];
  ipv6Interfaces?: Ipv6NetworkInterface[];
  defaultIpv4Gateways?: string[];
  macAddresses?: string[];
  dnsNames?: string[];
}

/**
 * @class
 * Initializes a new instance of the OperatingSystemConfiguration class.
 * @constructor
 * Describes the configuration of the operating system of a machine.
 *
 * @property {string} family Windows, Linux, etc. Possible values include:
 * 'unknown', 'windows', 'linux', 'solaris', 'aix'
 * @property {string} fullName Operating system full name.
 * @property {string} bitness Operating system bitness (32-bit or 64-bit).
 * Possible values include: '32bit', '64bit'
 */
export interface OperatingSystemConfiguration {
  family: string;
  fullName: string;
  bitness: string;
}

/**
 * @class
 * Initializes a new instance of the VirtualMachineConfiguration class.
 * @constructor
 * Describes the virtualizaton-related configuration of a machine.
 *
 * @property {string} [virtualMachineType] Specifies the virtualization
 * technology used by the machine (hyperv, vmware, etc.). Possible values
 * include: 'unknown', 'hyperv', 'ldom', 'lpar', 'vmware', 'virtualPc', 'xen'
 * @property {string} [nativeMachineId] The unique identifier of the virtual
 * machine as reported by the underlying virtualization sytem.
 * @property {string} [virtualMachineName] The Name of the virtual machine.
 * @property {string} [nativeHostMachineId] The unique identifier of the host
 * of this virtual machine as reported by the underlying virtualization system.
 */
export interface VirtualMachineConfiguration {
  virtualMachineType?: string;
  nativeMachineId?: string;
  virtualMachineName?: string;
  nativeHostMachineId?: string;
}

/**
 * @class
 * Initializes a new instance of the HypervisorConfiguration class.
 * @constructor
 * Describes the hypervisor configuration of a machine.
 *
 * @property {string} [hypervisorType] Specifies the virtualization technology
 * used by the hypervisor (hyperv, vmware, etc.). Possible values include:
 * 'unknown', 'hyperv'
 * @property {string} [nativeHostMachineId] The unique identifier of the
 * hypervisor machine as reported by the underlying virtualization system.
 */
export interface HypervisorConfiguration {
  hypervisorType?: string;
  nativeHostMachineId?: string;
}

/**
 * @class
 * Initializes a new instance of the HostingConfiguration class.
 * @constructor
 * Describes the hosting configuration of a machine.
 *
 * @property {string} [provider] The hosting provider of the VM. Possible
 * values include: 'azure'
 * @property {string} kind Polymorphic Discriminator
 */
export interface HostingConfiguration {
  provider?: string;
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the Machine class.
 * @constructor
 * A machine resource represents a discovered computer system. It can be
 * *monitored*, i.e., a Dependency Agent is running on it, or *discovered*,
 * i.e., its existence was inferred by observing the data stream from monitored
 * machines. As machines change, prior versions of the machine resource are
 * preserved and available for access. A machine is live during an interval of
 * time, if either its Dependency Agent has reported data during (parts) of
 * that interval, or a Dependency agent running on other machines has reported
 * activity associated with the machine.
 *
 * @property {date} [timestamp] UTC date and time when this resource was
 * updated in the system.
 * @property {string} [monitoringState] Specifies whether the machine is
 * actively monitored or discovered. Possible values include: 'monitored',
 * 'discovered'
 * @property {string} [virtualizationState] Specifies whether the machine is
 * virtualized. Possible values include: 'unknown', 'physical', 'virtual',
 * 'hypervisor'
 * @property {string} [displayName] Name to use for display purposes
 * @property {string} [computerName] Name of the machine, e.g., server
 * @property {string} [fullyQualifiedDomainName] Fully-qualified name of the
 * machine, e.g., server.company.com
 * @property {date} [bootTime] UTC date and time when the machine last booted
 * @property {object} [timezone] Timezone of the machine.
 * @property {string} [timezone.fullName] Timezone full name.
 * @property {object} [agent] Dependency Agent configuration.
 * @property {string} [agent.agentId] Health Service Agent unique identifier.
 * @property {string} [agent.dependencyAgentId] Dependency Agent unique
 * identifier.
 * @property {string} [agent.dependencyAgentVersion] Dependency Agent version
 * number.
 * @property {string} [agent.dependencyAgentRevision] Dependency Agent revision
 * number.
 * @property {string} [agent.rebootStatus] Specifies whether the machine has
 * been rebooted since the Dependency Agent installation. Possible values
 * include: 'unknown', 'rebooted', 'notRebooted'
 * @property {number} [agent.clockGranularity] Machine clock granularity in
 * milliseconds.
 * @property {object} [resources] Machine resources (memory, cpu, etc.).
 * @property {number} [resources.physicalMemory] Physical memory in megabytes
 * (MB).
 * @property {number} [resources.cpus] Number of CPUs.
 * @property {number} [resources.cpuSpeed] CPU speed in megahertz (Mhz).
 * @property {string} [resources.cpuSpeedAccuracy] Describes the accuracy of
 * the cpuSpeed field. Possible values include: 'actual', 'estimated'
 * @property {object} [networking] Network configuration (ips, gateways, dns,
 * etc.)
 * @property {array} [networking.ipv4Interfaces] IPv4 interfaces.
 * @property {array} [networking.ipv6Interfaces] IPv6 interfaces.
 * @property {array} [networking.defaultIpv4Gateways] Default IPv4 gateways.
 * @property {array} [networking.macAddresses] MAC addresses of all active
 * network interfaces.
 * @property {array} [networking.dnsNames] DNS names associated with the
 * machine.
 * @property {object} [operatingSystem] Operating system information.
 * @property {string} [operatingSystem.family] Windows, Linux, etc. Possible
 * values include: 'unknown', 'windows', 'linux', 'solaris', 'aix'
 * @property {string} [operatingSystem.fullName] Operating system full name.
 * @property {string} [operatingSystem.bitness] Operating system bitness
 * (32-bit or 64-bit). Possible values include: '32bit', '64bit'
 * @property {object} [virtualMachine] Virtualization-related configuration.
 * Present only when `virtualizationState` is `virtual`.
 * @property {string} [virtualMachine.virtualMachineType] Specifies the
 * virtualization technology used by the machine (hyperv, vmware, etc.).
 * Possible values include: 'unknown', 'hyperv', 'ldom', 'lpar', 'vmware',
 * 'virtualPc', 'xen'
 * @property {string} [virtualMachine.nativeMachineId] The unique identifier of
 * the virtual machine as reported by the underlying virtualization sytem.
 * @property {string} [virtualMachine.virtualMachineName] The Name of the
 * virtual machine.
 * @property {string} [virtualMachine.nativeHostMachineId] The unique
 * identifier of the host of this virtual machine as reported by the underlying
 * virtualization system.
 * @property {object} [hypervisor] Hypervisor-related configuration. Present
 * only when 'virtualizationState' is `hypervisor`.
 * @property {string} [hypervisor.hypervisorType] Specifies the virtualization
 * technology used by the hypervisor (hyperv, vmware, etc.). Possible values
 * include: 'unknown', 'hyperv'
 * @property {string} [hypervisor.nativeHostMachineId] The unique identifier of
 * the hypervisor machine as reported by the underlying virtualization system.
 * @property {object} [hosting] Hosting-related configuration. Present if
 * hosting information is discovered for the VM.
 * @property {string} [hosting.provider] The hosting provider of the VM.
 * Possible values include: 'azure'
 * @property {string} [hosting.kind] Polymorphic Discriminator
 */
export interface Machine extends CoreResource {
  timestamp?: Date;
  monitoringState?: string;
  virtualizationState?: string;
  displayName?: string;
  computerName?: string;
  fullyQualifiedDomainName?: string;
  bootTime?: Date;
  timezone?: Timezone;
  agent?: AgentConfiguration;
  resources?: MachineResourcesConfiguration;
  networking?: NetworkConfiguration;
  operatingSystem?: OperatingSystemConfiguration;
  virtualMachine?: VirtualMachineConfiguration;
  hypervisor?: HypervisorConfiguration;
  hosting?: HostingConfiguration;
}

/**
 * @class
 * Initializes a new instance of the ProcessHostedService class.
 * @constructor
 * A service hosted by a process.
 *
 * @property {string} [name] The name of the service.
 * @property {string} [displayName] The service's display name.
 */
export interface ProcessHostedService {
  name?: string;
  displayName?: string;
}

/**
 * @class
 * Initializes a new instance of the ProcessDetails class.
 * @constructor
 * Describes process metadata.
 *
 * @property {string} [persistentKey] A unique indentifier for a process,
 * generally resilient to process restart, computed by Service Map.
 * @property {number} [poolId] Represents the identity of the process pool
 * assigned to the process by Dependency Agent.
 * @property {number} [firstPid] The Operating System Process Idendifier (PID)
 * of the first process in this process pool.
 * @property {string} [description] Process description.
 * @property {string} [companyName] Name of company that created the process
 * executable.
 * @property {string} [internalName] Internal process name.
 * @property {string} [productName] Product name.
 * @property {string} [productVersion] Product version.
 * @property {string} [fileVersion] File version.
 * @property {string} [commandLine] Process command line.
 * @property {string} [executablePath] Process executable path.
 * @property {string} [workingDirectory] Process workingDirectory.
 * @property {array} [services] Collection of services hosted by this Process
 * (Windows only).
 * @property {string} [zoneName] Process zone name (Linux only).
 */
export interface ProcessDetails {
  persistentKey?: string;
  poolId?: number;
  firstPid?: number;
  description?: string;
  companyName?: string;
  internalName?: string;
  productName?: string;
  productVersion?: string;
  fileVersion?: string;
  commandLine?: string;
  executablePath?: string;
  workingDirectory?: string;
  services?: ProcessHostedService[];
  zoneName?: string;
}

/**
 * @class
 * Initializes a new instance of the ProcessUser class.
 * @constructor
 * Describes the user under which a process is running.
 *
 * @property {string} [userName] User name under which the process is running.
 * @property {string} [userDomain] Domain name for the user.
 */
export interface ProcessUser {
  userName?: string;
  userDomain?: string;
}

/**
 * @class
 * Initializes a new instance of the ProcessHostingConfiguration class.
 * @constructor
 * Describes the hosting configuration of a process.
 *
 * @property {string} [provider] The hosting provider of the VM. Possible
 * values include: 'azure'
 * @property {string} kind Polymorphic Discriminator
 */
export interface ProcessHostingConfiguration {
  provider?: string;
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the Process class.
 * @constructor
 * A process resource represents a process running on a machine. The process
 * may be actively *monitored*, i.e., a Dependency Agent is running on its
 * machine, or *discovered*, i.e., its existence was inferred by observing the
 * data stream from monitored machines. A process resource represents a pool of
 * actual operating system resources that share command lines and metadata. As
 * the process pool evolves over time, prior versions of the process resource
 * are preserved and available for access. A process is live during an interval
 * of time, if that process is executing during (parts) of that interval
 *
 * @property {date} [timestamp] UTC date and time when this process resource
 * was updated in the system
 * @property {string} [monitoringState] Specifies whether the process is
 * actively monitored or discovered. Possible values include: 'monitored',
 * 'discovered'
 * @property {object} [machine] Machine hosting this process.
 * @property {string} [machine.id] Resource URI.
 * @property {string} [machine.type] Resource type qualifier.
 * @property {string} [machine.name] Resource name.
 * @property {string} [machine.kind] Polymorphic Discriminator
 * @property {string} [executableName] The name of the process executable
 * @property {string} [displayName] Name to use for display purposes
 * @property {date} [startTime] UTC date and time when the process started
 * @property {string} [role] The inferred role of this process based on its
 * name, command line, etc. Possible values include: 'webServer', 'appServer',
 * 'databaseServer', 'ldapServer', 'smbServer'
 * @property {string} [group] The name of the product or suite of the process.
 * The group is determined by its executable name, command line, etc.
 * @property {object} [details] Process metadata (command line, product name,
 * etc.).
 * @property {string} [details.persistentKey] A unique indentifier for a
 * process, generally resilient to process restart, computed by Service Map.
 * @property {number} [details.poolId] Represents the identity of the process
 * pool assigned to the process by Dependency Agent.
 * @property {number} [details.firstPid] The Operating System Process
 * Idendifier (PID) of the first process in this process pool.
 * @property {string} [details.description] Process description.
 * @property {string} [details.companyName] Name of company that created the
 * process executable.
 * @property {string} [details.internalName] Internal process name.
 * @property {string} [details.productName] Product name.
 * @property {string} [details.productVersion] Product version.
 * @property {string} [details.fileVersion] File version.
 * @property {string} [details.commandLine] Process command line.
 * @property {string} [details.executablePath] Process executable path.
 * @property {string} [details.workingDirectory] Process workingDirectory.
 * @property {array} [details.services] Collection of services hosted by this
 * Process (Windows only).
 * @property {string} [details.zoneName] Process zone name (Linux only).
 * @property {object} [user] Information about the account under which the
 * process is executing.
 * @property {string} [user.userName] User name under which the process is
 * running.
 * @property {string} [user.userDomain] Domain name for the user.
 * @property {object} [clientOf] Present only for a discovered process acting
 * as a client of a monitored process/machine/port. References the monitored
 * process/machine/port that this process is a client of.
 * @property {string} [clientOf.id] Resource URI.
 * @property {string} [clientOf.type] Resource type qualifier.
 * @property {string} [clientOf.name] Resource name.
 * @property {string} [clientOf.kind] Polymorphic Discriminator
 * @property {object} [acceptorOf] Present only for a discovered process acting
 * as a server. References the port on which the discovered process is
 * accepting.
 * @property {string} [acceptorOf.id] Resource URI.
 * @property {string} [acceptorOf.type] Resource type qualifier.
 * @property {string} [acceptorOf.name] Resource name.
 * @property {string} [acceptorOf.kind] Polymorphic Discriminator
 * @property {object} [hosting] Information about the hosting environment
 * @property {string} [hosting.provider] The hosting provider of the VM.
 * Possible values include: 'azure'
 * @property {string} [hosting.kind] Polymorphic Discriminator
 */
export interface Process extends CoreResource {
  timestamp?: Date;
  monitoringState?: string;
  machine?: ResourceReference;
  executableName?: string;
  displayName?: string;
  startTime?: Date;
  role?: string;
  group?: string;
  details?: ProcessDetails;
  user?: ProcessUser;
  clientOf?: ResourceReference;
  acceptorOf?: ResourceReference;
  hosting?: ProcessHostingConfiguration;
}

/**
 * @class
 * Initializes a new instance of the Port class.
 * @constructor
 * A port resource represents a server port on a machine. The port may be
 * actively *monitored*, i.e., a Dependency Agent is running on its machine, or
 * *discovered*, i.e., its existence was inferred by observing the data stream
 * from monitored machines. A port is live during an interval of time, if that
 * port had associated activity during (parts) of that interval.
 *
 * @property {string} [monitoringState] Specifies whether the port is actively
 * monitored or discovered. Possible values include: 'monitored', 'discovered'
 * @property {object} [machine] Machine hosting this port.
 * @property {string} [machine.id] Resource URI.
 * @property {string} [machine.type] Resource type qualifier.
 * @property {string} [machine.name] Resource name.
 * @property {string} [machine.kind] Polymorphic Discriminator
 * @property {string} [displayName] Name to use for display purposes.
 * @property {string} [ipAddress] IP address associated with the port. At
 * present only IPv4 addresses are supported.
 * @property {number} [portNumber] Port number.
 */
export interface Port extends CoreResource {
  monitoringState?: string;
  machine?: ResourceReference;
  displayName?: string;
  ipAddress?: string;
  portNumber?: number;
}

/**
 * @class
 * Initializes a new instance of the ClientGroup class.
 * @constructor
 * Represents a collection of clients of a resource. A client group can
 * represent the clients of a port, process, or a machine.
 *
 * @property {object} clientsOf Reference to the resource whose clients are
 * represented by this group.
 * @property {string} [clientsOf.id] Resource URI.
 * @property {string} [clientsOf.type] Resource type qualifier.
 * @property {string} [clientsOf.name] Resource name.
 * @property {string} [clientsOf.kind] Polymorphic Discriminator
 */
export interface ClientGroup extends CoreResource {
  clientsOf: ResourceReference;
}

/**
 * @class
 * Initializes a new instance of the ClientGroupMember class.
 * @constructor
 * Represents a member of a client group
 *
 * @property {string} [ipAddress] IP address.
 * @property {object} [port] Port into which this client connected
 * @property {object} [port.machine] Machine hosting the port.
 * @property {string} [port.ipAddress] IP address of the port.
 * @property {number} [port.portNumber] Port number.
 * @property {array} [processes] Processes accepting on the above port that
 * received connections from this client.
 */
export interface ClientGroupMember extends Resource {
  ipAddress?: string;
  port?: PortReference;
  processes?: ProcessReference[];
}

/**
 * @class
 * Initializes a new instance of the MachineGroup class.
 * @constructor
 * A user-defined logical grouping of machines.
 *
 * @property {string} [groupType] Type of the machine group. Possible values
 * include: 'unknown', 'azure-cs', 'azure-sf', 'azure-vmss', 'user-static'
 * @property {string} displayName User defined name for the group
 * @property {number} [count] Count of machines in this group. The value of
 * count may be bigger than the number of machines in case of the group has
 * been truncated due to exceeding the max number of machines a group can
 * handle.
 * @property {array} [machines] References of the machines in this group. The
 * hints within each reference do not represent the current value of the
 * corresponding fields. They are a snapshot created during the last time the
 * machine group was updated.
 */
export interface MachineGroup extends CoreResource {
  groupType?: string;
  displayName: string;
  count?: number;
  machines?: MachineReferenceWithHints[];
}

/**
 * @class
 * Initializes a new instance of the Summary class.
 * @constructor
 * Base for all resource summaries.
 *
 */
export interface Summary extends Resource {
}

/**
 * @class
 * Initializes a new instance of the MachineCountsByOperatingSystem class.
 * @constructor
 * Machines by operating system.
 *
 * @property {number} windows Number of live Windows machines.
 * @property {number} linux Number of live Linux machines.
 */
export interface MachineCountsByOperatingSystem {
  windows: number;
  linux: number;
}

/**
 * @class
 * Initializes a new instance of the MachinesSummary class.
 * @constructor
 * A summary of the machines in the workspace.
 *
 * @property {date} startTime Summary interval start time.
 * @property {date} endTime Summary interval end time.
 * @property {number} total Total number of machines.
 * @property {number} live Number of live machines.
 * @property {object} os Machine counts by operating system.
 * @property {number} [os.windows] Number of live Windows machines.
 * @property {number} [os.linux] Number of live Linux machines.
 */
export interface MachinesSummary extends Summary {
  startTime: Date;
  endTime: Date;
  total: number;
  live: number;
  os: MachineCountsByOperatingSystem;
}

/**
 * @class
 * Initializes a new instance of the Relationship class.
 * @constructor
 * A typed relationship between two entities.
 *
 * @property {string} kind Polymorphic Discriminator
 */
export interface Relationship extends Resource {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the Connection class.
 * @constructor
 * A network connection.
 *
 * @property {object} source Source resource of the relationship.
 * @property {string} [source.id] Resource URI.
 * @property {string} [source.type] Resource type qualifier.
 * @property {string} [source.name] Resource name.
 * @property {string} [source.kind] Polymorphic Discriminator
 * @property {object} destination Destination resource of the relationship.
 * @property {string} [destination.id] Resource URI.
 * @property {string} [destination.type] Resource type qualifier.
 * @property {string} [destination.name] Resource name.
 * @property {string} [destination.kind] Polymorphic Discriminator
 * @property {date} [startTime] Relationship start time.
 * @property {date} [endTime] Relationship end time.
 * @property {object} [serverPort] Reference to the server port via which this
 * connection has been established.
 * @property {object} [serverPort.machine] Machine hosting the port.
 * @property {string} [serverPort.ipAddress] IP address of the port.
 * @property {number} [serverPort.portNumber] Port number.
 * @property {string} [failureState] Specifies whether there are only
 * successful, failed or a mixture of both connections represented by this
 * resource. Possible values include: 'ok', 'failed', 'mixed'
 */
export interface Connection extends Relationship {
  source: ResourceReference;
  destination: ResourceReference;
  startTime?: Date;
  endTime?: Date;
  serverPort?: PortReference;
  failureState?: string;
}

/**
 * @class
 * Initializes a new instance of the Acceptor class.
 * @constructor
 * A process accepting on a port.
 *
 * @property {object} source Port being accepted.
 * @property {object} [source.machine] Machine hosting the port.
 * @property {string} [source.ipAddress] IP address of the port.
 * @property {number} [source.portNumber] Port number.
 * @property {object} destination Accepting process.
 * @property {object} [destination.machine] Machine hosting the process.
 * @property {date} [startTime] Relationship start time.
 * @property {date} [endTime] Relationship end time.
 */
export interface Acceptor extends Relationship {
  source: PortReference;
  destination: ProcessReference;
  startTime?: Date;
  endTime?: Date;
}

/**
 * @class
 * Initializes a new instance of the SummaryProperties class.
 * @constructor
 * Base for all summaries.
 *
 * @property {date} startTime Summary interval start time.
 * @property {date} endTime Summary interval end time.
 */
export interface SummaryProperties {
  startTime: Date;
  endTime: Date;
}

/**
 * @class
 * Initializes a new instance of the RelationshipProperties class.
 * @constructor
 * Relationship properties.
 *
 * @property {object} source Source resource of the relationship.
 * @property {string} [source.id] Resource URI.
 * @property {string} [source.type] Resource type qualifier.
 * @property {string} [source.name] Resource name.
 * @property {string} [source.kind] Polymorphic Discriminator
 * @property {object} destination Destination resource of the relationship.
 * @property {string} [destination.id] Resource URI.
 * @property {string} [destination.type] Resource type qualifier.
 * @property {string} [destination.name] Resource name.
 * @property {string} [destination.kind] Polymorphic Discriminator
 * @property {date} [startTime] Relationship start time.
 * @property {date} [endTime] Relationship end time.
 */
export interface RelationshipProperties {
  source: ResourceReference;
  destination: ResourceReference;
  startTime?: Date;
  endTime?: Date;
}

/**
 * @class
 * Initializes a new instance of the ImageConfiguration class.
 * @constructor
 * Describes the VM image of a machine.
 *
 * @property {string} [publisher] Publisher of the VM image.
 * @property {string} [offering] Offering of the VM image.
 * @property {string} [sku] SKU of the VM image.
 * @property {string} [version] Version of the VM image.
 */
export interface ImageConfiguration {
  publisher?: string;
  offering?: string;
  sku?: string;
  version?: string;
}

/**
 * @class
 * Initializes a new instance of the AzureCloudServiceConfiguration class.
 * @constructor
 * Describes an Azure Cloud Service
 *
 * @property {string} [name] Cloud Service name
 * @property {string} [instanceId] Cloud Service instance identifier
 * @property {string} [deployment] Cloud Service deployment identifier
 * @property {string} [roleName] Cloud Service role name
 * @property {string} [roleType] Used to specify type of an Azure Cloud Service
 * role. Possible values include: 'unknown', 'worker', 'web'
 */
export interface AzureCloudServiceConfiguration {
  name?: string;
  instanceId?: string;
  deployment?: string;
  roleName?: string;
  roleType?: string;
}

/**
 * @class
 * Initializes a new instance of the AzureVmScaleSetConfiguration class.
 * @constructor
 * Describes an Azure Virtual Machine Scale Set
 *
 * @property {string} [name] Virtual Machine Scale Set name
 * @property {string} [instanceId] Virtual Machine Scale Set instance
 * identifier
 * @property {string} [deployment] Virtual Machine Scale Set deployment
 * identifier
 * @property {string} [resourceId] Unique identifier of the resource.
 */
export interface AzureVmScaleSetConfiguration {
  name?: string;
  instanceId?: string;
  deployment?: string;
  resourceId?: string;
}

/**
 * @class
 * Initializes a new instance of the AzureServiceFabricClusterConfiguration class.
 * @constructor
 * Describes an Azure Service Fabric Cluster
 *
 * @property {string} [name] Service Fabric cluster name.
 * @property {string} [clusterId] Service Fabric cluster indentifier.
 */
export interface AzureServiceFabricClusterConfiguration {
  name?: string;
  clusterId?: string;
}

/**
 * @class
 * Initializes a new instance of the AzureHostingConfiguration class.
 * @constructor
 * Provides information about how a machine is hosted in Azure
 *
 * @property {string} [vmId] Virtual Machine ID (unique identifier).
 * @property {string} [location] Geographical location of the VM.
 * @property {string} [name] Machine name according to the hosting provider.
 * @property {string} [size] Size of the VM.
 * @property {string} [updateDomain] Update domain of the VM.
 * @property {string} [faultDomain] Fault domain of the VM.
 * @property {string} [subscriptionId] Subscription ID.
 * @property {string} [resourceGroup] Resource group name within the specified
 * subscription.
 * @property {string} [resourceId] Unique identifier of the resource.
 * @property {object} [image] Image of the machine.
 * @property {string} [image.publisher] Publisher of the VM image.
 * @property {string} [image.offering] Offering of the VM image.
 * @property {string} [image.sku] SKU of the VM image.
 * @property {string} [image.version] Version of the VM image.
 * @property {object} [cloudService] Contains information about machines hosted
 * as an Azure Cloud Service
 * @property {string} [cloudService.name] Cloud Service name
 * @property {string} [cloudService.instanceId] Cloud Service instance
 * identifier
 * @property {string} [cloudService.deployment] Cloud Service deployment
 * identifier
 * @property {string} [cloudService.roleName] Cloud Service role name
 * @property {string} [cloudService.roleType] Used to specify type of an Azure
 * Cloud Service role. Possible values include: 'unknown', 'worker', 'web'
 * @property {object} [vmScaleSet] Contains information about machines hosted
 * as an Azure Virtual Machine Scale Set
 * @property {string} [vmScaleSet.name] Virtual Machine Scale Set name
 * @property {string} [vmScaleSet.instanceId] Virtual Machine Scale Set
 * instance identifier
 * @property {string} [vmScaleSet.deployment] Virtual Machine Scale Set
 * deployment identifier
 * @property {string} [vmScaleSet.resourceId] Unique identifier of the
 * resource.
 * @property {object} [serviceFabricCluster] Contains information about
 * machines that belong an Azure Service Fabric Cluster
 * @property {string} [serviceFabricCluster.name] Service Fabric cluster name.
 * @property {string} [serviceFabricCluster.clusterId] Service Fabric cluster
 * indentifier.
 */
export interface AzureHostingConfiguration extends HostingConfiguration {
  vmId?: string;
  location?: string;
  name?: string;
  size?: string;
  updateDomain?: string;
  faultDomain?: string;
  subscriptionId?: string;
  resourceGroup?: string;
  resourceId?: string;
  image?: ImageConfiguration;
  cloudService?: AzureCloudServiceConfiguration;
  vmScaleSet?: AzureVmScaleSetConfiguration;
  serviceFabricCluster?: AzureServiceFabricClusterConfiguration;
}

/**
 * @class
 * Initializes a new instance of the AzureProcessHostingConfiguration class.
 * @constructor
 * Describes the hosting configuration of a process when hosted on azure
 *
 * @property {object} [cloudService] Contains information about the cloud
 * service the process belongs to
 * @property {string} [cloudService.name] Cloud Service name
 * @property {string} [cloudService.instanceId] Cloud Service instance
 * identifier
 * @property {string} [cloudService.deployment] Cloud Service deployment
 * identifier
 * @property {string} [cloudService.roleName] Cloud Service role name
 * @property {string} [cloudService.roleType] Used to specify type of an Azure
 * Cloud Service role. Possible values include: 'unknown', 'worker', 'web'
 */
export interface AzureProcessHostingConfiguration extends ProcessHostingConfiguration {
  cloudService?: AzureCloudServiceConfiguration;
}

/**
 * @class
 * Initializes a new instance of the MapNodes class.
 * @constructor
 * The nodes (entities) of a map.
 *
 * @property {array} [machines] Machine resources.
 * @property {array} [processes] Process resources.
 * @property {array} [ports] Port resources.
 * @property {array} [clientGroups] Client Group resources.
 */
export interface MapNodes {
  machines?: Machine[];
  processes?: Process[];
  ports?: Port[];
  clientGroups?: ClientGroup[];
}

/**
 * @class
 * Initializes a new instance of the MapEdges class.
 * @constructor
 * The edges (relationships) of a map.
 *
 * @property {array} [connections] Network connections.
 * @property {array} [acceptors] Processes accepting on a port.
 */
export interface MapEdges {
  connections?: Connection[];
  acceptors?: Acceptor[];
}

/**
 * @class
 * Initializes a new instance of the Map class.
 * @constructor
 * A map of resources and relationships between them.
 *
 * @property {object} nodes
 * @property {array} [nodes.machines] Machine resources.
 * @property {array} [nodes.processes] Process resources.
 * @property {array} [nodes.ports] Port resources.
 * @property {array} [nodes.clientGroups] Client Group resources.
 * @property {object} edges
 * @property {array} [edges.connections] Network connections.
 * @property {array} [edges.acceptors] Processes accepting on a port.
 */
export interface Map {
  nodes: MapNodes;
  edges: MapEdges;
}

/**
 * @class
 * Initializes a new instance of the Liveness class.
 * @constructor
 * Specifies the contents of a check liveness response.
 *
 * @property {date} startTime Liveness interval start time.
 * @property {date} endTime Liveness interval end time.
 * @property {boolean} live `true` if the resource is live during [startTime,
 * endTime], `false` otherwise
 */
export interface Liveness {
  startTime: Date;
  endTime: Date;
  live: boolean;
}

/**
 * @class
 * Initializes a new instance of the MapRequest class.
 * @constructor
 * Specifies the contents of request to generate a map.
 *
 * @property {date} [startTime] Map interval start time.
 * @property {date} [endTime] Map interval end time.
 * @property {string} kind Polymorphic Discriminator
 */
export interface MapRequest {
  startTime?: Date;
  endTime?: Date;
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the SingleMachineDependencyMapRequest class.
 * @constructor
 * Specifies the computation of a single server dependency map. A single server
 * dependency map includes all direct dependencies of a given machine.
 *
 * @property {string} machineId URI of machine resource for which to generate
 * the map.
 */
export interface SingleMachineDependencyMapRequest extends MapRequest {
  machineId: string;
}

/**
 * @class
 * Initializes a new instance of the MultipleMachinesMapRequest class.
 * @constructor
 * Provides a base class for describing map requests for a collection of
 * machines
 *
 * @property {boolean} [filterProcesses] If true, only processes between
 * specified machines will be included. Any connections in or out of those
 * processes will be included.
 */
export interface MultipleMachinesMapRequest extends MapRequest {
  filterProcesses?: boolean;
}

/**
 * @class
 * Initializes a new instance of the MachineListMapRequest class.
 * @constructor
 * Specifies the computation of a one hope dependency map for a list of
 * machines. The resulting map includes all direct dependencies for the
 * specified machines.
 *
 * @property {array} machineIds a list of URIs of machine resources for which
 * to generate the map.
 */
export interface MachineListMapRequest extends MultipleMachinesMapRequest {
  machineIds: string[];
}

/**
 * @class
 * Initializes a new instance of the MachineGroupMapRequest class.
 * @constructor
 * Specifies the computation of a machine group dependency map. A machine group
 * dependency map includes all direct dependencies the machines in the group.
 *
 * @property {string} machineGroupId URI of machine group resource for which to
 * generate the map.
 */
export interface MachineGroupMapRequest extends MultipleMachinesMapRequest {
  machineGroupId: string;
}

/**
 * @class
 * Initializes a new instance of the MapResponse class.
 * @constructor
 * Specified the contents of a map response.
 *
 * @property {date} startTime Map interval start time.
 * @property {date} endTime Map interval end time.
 * @property {object} map The generated map.
 * @property {object} [map.nodes]
 * @property {array} [map.nodes.machines] Machine resources.
 * @property {array} [map.nodes.processes] Process resources.
 * @property {array} [map.nodes.ports] Port resources.
 * @property {array} [map.nodes.clientGroups] Client Group resources.
 * @property {object} [map.edges]
 * @property {array} [map.edges.connections] Network connections.
 * @property {array} [map.edges.acceptors] Processes accepting on a port.
 */
export interface MapResponse {
  startTime: Date;
  endTime: Date;
  map: Map;
}

/**
 * @class
 * Initializes a new instance of the ClientGroupMembersCount class.
 * @constructor
 * Specifies the number of members in a client group.
 *
 * @property {date} startTime Membership interval start time.
 * @property {date} endTime Membership interval start time.
 * @property {string} groupId Client Group URI.
 * @property {number} count Number of members in the client group. Use this
 * value together with the value of ```accuracy```. If accuracy is `exact` then
 * the value represents the actual number of members in the cloud. When
 * accuracy is `estimated`, the actual number of members is larger than the
 * value of ```count```.
 * @property {string} accuracy Accuracy of the reported count. Possible values
 * include: 'actual', 'estimated'
 */
export interface ClientGroupMembersCount {
  startTime: Date;
  endTime: Date;
  groupId: string;
  count: number;
  accuracy: string;
}

/**
 * @class
 * Initializes a new instance of the ErrorModel class.
 * @constructor
 * Error details.
 *
 * @property {string} code Error code identifying the specific error.
 * @property {string} [message] Error message in the caller's locale.
 */
export interface ErrorModel {
  code: string;
  message?: string;
}

/**
 * @class
 * Initializes a new instance of the ErrorResponse class.
 * @constructor
 * An error response from the API.
 *
 * @property {object} error Error information.
 * @property {string} [error.code] Error code identifying the specific error.
 * @property {string} [error.message] Error message in the caller's locale.
 */
export interface ErrorResponse {
  error: ErrorModel;
}


/**
 * @class
 * Initializes a new instance of the MachineCollection class.
 * @constructor
 * Collection of Machine resources.
 *
 * @property {string} [nextLink] The URL to the next set of resources.
 */
export interface MachineCollection extends Array<Machine> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the ConnectionCollection class.
 * @constructor
 * Collection of Connection resources.
 *
 * @property {string} [nextLink] The URL to the next set of resources.
 */
export interface ConnectionCollection extends Array<Connection> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the ProcessCollection class.
 * @constructor
 * Collection of Process resources.
 *
 * @property {string} [nextLink] The URL to the next set of resources.
 */
export interface ProcessCollection extends Array<Process> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the PortCollection class.
 * @constructor
 * Collection of Port resources.
 *
 * @property {string} [nextLink] The URL to the next set of resources.
 */
export interface PortCollection extends Array<Port> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the MachineGroupCollection class.
 * @constructor
 * Collection of Machine Group resources.
 *
 * @property {string} [nextLink] The URL to the next set of resources.
 */
export interface MachineGroupCollection extends Array<MachineGroup> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the ClientGroupMembersCollection class.
 * @constructor
 * Collection of ClientGroupMember resources.
 *
 * @property {string} [nextLink] The URL to the next set of resources.
 */
export interface ClientGroupMembersCollection extends Array<ClientGroupMember> {
  nextLink?: string;
}
