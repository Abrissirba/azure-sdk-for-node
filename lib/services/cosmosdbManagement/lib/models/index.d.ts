/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource } from 'ms-rest-azure';
import { CloudError } from 'ms-rest-azure';
import * as moment from 'moment';

export { BaseResource } from 'ms-rest-azure';
export { CloudError } from 'ms-rest-azure';


/**
 * @class
 * Initializes a new instance of the ConsistencyPolicy class.
 * @constructor
 * The consistency policy for the Cosmos DB database account.
 *
 * @property {string} defaultConsistencyLevel The default consistency level and
 * configuration settings of the Cosmos DB account. Possible values include:
 * 'Eventual', 'Session', 'BoundedStaleness', 'Strong', 'ConsistentPrefix'
 * @property {number} [maxStalenessPrefix] When used with the Bounded Staleness
 * consistency level, this value represents the number of stale requests
 * tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when
 * defaultConsistencyPolicy is set to 'BoundedStaleness'.
 * @property {number} [maxIntervalInSeconds] When used with the Bounded
 * Staleness consistency level, this value represents the time amount of
 * staleness (in seconds) tolerated. Accepted range for this value is 5 -
 * 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
 */
export interface ConsistencyPolicy {
  defaultConsistencyLevel: string;
  maxStalenessPrefix?: number;
  maxIntervalInSeconds?: number;
}

/**
 * @class
 * Initializes a new instance of the Capability class.
 * @constructor
 * Cosmos DB capability object
 *
 * @property {string} [name] Name of the Cosmos DB capability. For example,
 * "name": "EnableCassandra". Current values also include "EnableTable" and
 * "EnableGremlin".
 */
export interface Capability {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the Location class.
 * @constructor
 * A region in which the Azure Cosmos DB database account is deployed.
 *
 * @property {string} [id] The unique identifier of the region within the
 * database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.
 * @property {string} [locationName] The name of the region.
 * @property {string} [documentEndpoint] The connection endpoint for the
 * specific region. Example:
 * https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/
 * @property {string} [provisioningState]
 * @property {number} [failoverPriority] The failover priority of the region. A
 * failover priority of 0 indicates a write region. The maximum value for a
 * failover priority = (total number of regions - 1). Failover priority values
 * must be unique for each of the regions in which the database account exists.
 */
export interface Location {
  readonly id?: string;
  locationName?: string;
  readonly documentEndpoint?: string;
  provisioningState?: string;
  failoverPriority?: number;
}

/**
 * @class
 * Initializes a new instance of the FailoverPolicy class.
 * @constructor
 * The failover policy for a given region of a database account.
 *
 * @property {string} [id] The unique identifier of the region in which the
 * database account replicates to. Example:
 * &lt;accountName&gt;-&lt;locationName&gt;.
 * @property {string} [locationName] The name of the region in which the
 * database account exists.
 * @property {number} [failoverPriority] The failover priority of the region. A
 * failover priority of 0 indicates a write region. The maximum value for a
 * failover priority = (total number of regions - 1). Failover priority values
 * must be unique for each of the regions in which the database account exists.
 */
export interface FailoverPolicy {
  readonly id?: string;
  locationName?: string;
  failoverPriority?: number;
}

/**
 * @class
 * Initializes a new instance of the VirtualNetworkRule class.
 * @constructor
 * Virtual Network ACL Rule object
 *
 * @property {string} [id] Resource ID of a subnet, for example:
 * /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
 * @property {boolean} [ignoreMissingVNetServiceEndpoint] Create firewall rule
 * before the virtual network has vnet service endpoint enabled.
 */
export interface VirtualNetworkRule {
  id?: string;
  ignoreMissingVNetServiceEndpoint?: boolean;
}

/**
 * @class
 * Initializes a new instance of the Resource class.
 * @constructor
 * A database account resource.
 *
 * @property {string} [id] The unique resource identifier of the database
 * account.
 * @property {string} [name] The name of the database account.
 * @property {string} [type] The type of Azure resource.
 * @property {string} location The location of the resource group to which the
 * resource belongs.
 * @property {object} [tags]
 */
export interface Resource extends BaseResource {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
  location: string;
  tags?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the DatabaseAccount class.
 * @constructor
 * An Azure Cosmos DB database account.
 *
 * @property {string} [kind] Indicates the type of database account. This can
 * only be set at database account creation. Possible values include:
 * 'GlobalDocumentDB', 'MongoDB', 'Parse'. Default value: 'GlobalDocumentDB' .
 * @property {string} [provisioningState]
 * @property {string} [documentEndpoint] The connection endpoint for the Cosmos
 * DB database account.
 * @property {string} [databaseAccountOfferType] The offer type for the Cosmos
 * DB database account. Default value: Standard. Possible values include:
 * 'Standard'
 * @property {string} [ipRangeFilter] Cosmos DB Firewall Support: This value
 * specifies the set of IP addresses or IP address ranges in CIDR form to be
 * included as the allowed list of client IPs for a given database account. IP
 * addresses/ranges must be comma separated and must not contain any spaces.
 * @property {boolean} [isVirtualNetworkFilterEnabled] Flag to indicate whether
 * to enable/disable Virtual Network ACL rules.
 * @property {boolean} [enableAutomaticFailover] Enables automatic failover of
 * the write region in the rare event that the region is unavailable due to an
 * outage. Automatic failover will result in a new write region for the account
 * and is chosen based on the failover priorities configured for the account.
 * @property {object} [consistencyPolicy] The consistency policy for the Cosmos
 * DB database account.
 * @property {string} [consistencyPolicy.defaultConsistencyLevel] The default
 * consistency level and configuration settings of the Cosmos DB account.
 * Possible values include: 'Eventual', 'Session', 'BoundedStaleness',
 * 'Strong', 'ConsistentPrefix'
 * @property {number} [consistencyPolicy.maxStalenessPrefix] When used with the
 * Bounded Staleness consistency level, this value represents the number of
 * stale requests tolerated. Accepted range for this value is 1 –
 * 2,147,483,647. Required when defaultConsistencyPolicy is set to
 * 'BoundedStaleness'.
 * @property {number} [consistencyPolicy.maxIntervalInSeconds] When used with
 * the Bounded Staleness consistency level, this value represents the time
 * amount of staleness (in seconds) tolerated. Accepted range for this value is
 * 5 - 86400. Required when defaultConsistencyPolicy is set to
 * 'BoundedStaleness'.
 * @property {array} [capabilities] List of Cosmos DB capabilities for the
 * account
 * @property {array} [writeLocations] An array that contains the write location
 * for the Cosmos DB account.
 * @property {array} [readLocations] An array that contains of the read
 * locations enabled for the Cosmos DB account.
 * @property {array} [failoverPolicies] An array that contains the regions
 * ordered by their failover priorities.
 * @property {array} [virtualNetworkRules] List of Virtual Network ACL rules
 * configured for the Cosmos DB account.
 * @property {boolean} [enableMultipleWriteLocations] Enables the account to
 * write in multiple locations
 */
export interface DatabaseAccount extends Resource {
  kind?: string;
  provisioningState?: string;
  readonly documentEndpoint?: string;
  readonly databaseAccountOfferType?: string;
  ipRangeFilter?: string;
  isVirtualNetworkFilterEnabled?: boolean;
  enableAutomaticFailover?: boolean;
  consistencyPolicy?: ConsistencyPolicy;
  capabilities?: Capability[];
  readonly writeLocations?: Location[];
  readonly readLocations?: Location[];
  readonly failoverPolicies?: FailoverPolicy[];
  virtualNetworkRules?: VirtualNetworkRule[];
  enableMultipleWriteLocations?: boolean;
}

/**
 * @class
 * Initializes a new instance of the ErrorResponse class.
 * @constructor
 * Error Response.
 *
 * @property {string} [code] Error code.
 * @property {string} [message] Error message indicating why the operation
 * failed.
 */
export interface ErrorResponse {
  code?: string;
  message?: string;
}

/**
 * @class
 * Initializes a new instance of the FailoverPolicies class.
 * @constructor
 * The list of new failover policies for the failover priority change.
 *
 * @property {array} failoverPolicies List of failover policies.
 */
export interface FailoverPolicies {
  failoverPolicies: FailoverPolicy[];
}

/**
 * @class
 * Initializes a new instance of the RegionForOnlineOffline class.
 * @constructor
 * Cosmos DB region to online or offline.
 *
 * @property {string} region Cosmos DB region, with spaces between words and
 * each word capitalized.
 */
export interface RegionForOnlineOffline {
  region: string;
}

/**
 * @class
 * Initializes a new instance of the DatabaseAccountCreateUpdateParameters class.
 * @constructor
 * Parameters to create and update Cosmos DB database accounts.
 *
 * @property {string} [kind] Indicates the type of database account. This can
 * only be set at database account creation. Possible values include:
 * 'GlobalDocumentDB', 'MongoDB', 'Parse'. Default value: 'GlobalDocumentDB' .
 * @property {object} [consistencyPolicy] The consistency policy for the Cosmos
 * DB account.
 * @property {string} [consistencyPolicy.defaultConsistencyLevel] The default
 * consistency level and configuration settings of the Cosmos DB account.
 * Possible values include: 'Eventual', 'Session', 'BoundedStaleness',
 * 'Strong', 'ConsistentPrefix'
 * @property {number} [consistencyPolicy.maxStalenessPrefix] When used with the
 * Bounded Staleness consistency level, this value represents the number of
 * stale requests tolerated. Accepted range for this value is 1 –
 * 2,147,483,647. Required when defaultConsistencyPolicy is set to
 * 'BoundedStaleness'.
 * @property {number} [consistencyPolicy.maxIntervalInSeconds] When used with
 * the Bounded Staleness consistency level, this value represents the time
 * amount of staleness (in seconds) tolerated. Accepted range for this value is
 * 5 - 86400. Required when defaultConsistencyPolicy is set to
 * 'BoundedStaleness'.
 * @property {array} locations An array that contains the georeplication
 * locations enabled for the Cosmos DB account.
 * @property {string} [ipRangeFilter] Cosmos DB Firewall Support: This value
 * specifies the set of IP addresses or IP address ranges in CIDR form to be
 * included as the allowed list of client IPs for a given database account. IP
 * addresses/ranges must be comma separated and must not contain any spaces.
 * @property {boolean} [isVirtualNetworkFilterEnabled] Flag to indicate whether
 * to enable/disable Virtual Network ACL rules.
 * @property {boolean} [enableAutomaticFailover] Enables automatic failover of
 * the write region in the rare event that the region is unavailable due to an
 * outage. Automatic failover will result in a new write region for the account
 * and is chosen based on the failover priorities configured for the account.
 * @property {array} [capabilities] List of Cosmos DB capabilities for the
 * account
 * @property {array} [virtualNetworkRules] List of Virtual Network ACL rules
 * configured for the Cosmos DB account.
 * @property {boolean} [enableMultipleWriteLocations] Enables the account to
 * write in multiple locations
 */
export interface DatabaseAccountCreateUpdateParameters extends Resource {
  kind?: string;
  consistencyPolicy?: ConsistencyPolicy;
  locations: Location[];
  ipRangeFilter?: string;
  isVirtualNetworkFilterEnabled?: boolean;
  enableAutomaticFailover?: boolean;
  capabilities?: Capability[];
  virtualNetworkRules?: VirtualNetworkRule[];
  enableMultipleWriteLocations?: boolean;
}

/**
 * @class
 * Initializes a new instance of the DatabaseAccountPatchParameters class.
 * @constructor
 * Parameters for patching Azure Cosmos DB database account properties.
 *
 * @property {object} [tags]
 * @property {array} [capabilities] List of Cosmos DB capabilities for the
 * account
 */
export interface DatabaseAccountPatchParameters {
  tags?: { [propertyName: string]: string };
  capabilities?: Capability[];
}

/**
 * @class
 * Initializes a new instance of the DatabaseAccountListReadOnlyKeysResult class.
 * @constructor
 * The read-only access keys for the given database account.
 *
 * @property {string} [primaryReadonlyMasterKey] Base 64 encoded value of the
 * primary read-only key.
 * @property {string} [secondaryReadonlyMasterKey] Base 64 encoded value of the
 * secondary read-only key.
 */
export interface DatabaseAccountListReadOnlyKeysResult {
  readonly primaryReadonlyMasterKey?: string;
  readonly secondaryReadonlyMasterKey?: string;
}

/**
 * @class
 * Initializes a new instance of the DatabaseAccountListKeysResult class.
 * @constructor
 * The access keys for the given database account.
 *
 * @property {string} [primaryMasterKey] Base 64 encoded value of the primary
 * read-write key.
 * @property {string} [secondaryMasterKey] Base 64 encoded value of the
 * secondary read-write key.
 * @property {string} [primaryReadonlyMasterKey] Base 64 encoded value of the
 * primary read-only key.
 * @property {string} [secondaryReadonlyMasterKey] Base 64 encoded value of the
 * secondary read-only key.
 */
export interface DatabaseAccountListKeysResult {
  readonly primaryMasterKey?: string;
  readonly secondaryMasterKey?: string;
  readonly primaryReadonlyMasterKey?: string;
  readonly secondaryReadonlyMasterKey?: string;
}

/**
 * @class
 * Initializes a new instance of the DatabaseAccountConnectionString class.
 * @constructor
 * Connection string for the Cosmos DB account
 *
 * @property {string} [connectionString] Value of the connection string
 * @property {string} [description] Description of the connection string
 */
export interface DatabaseAccountConnectionString {
  readonly connectionString?: string;
  readonly description?: string;
}

/**
 * @class
 * Initializes a new instance of the DatabaseAccountListConnectionStringsResult class.
 * @constructor
 * The connection strings for the given database account.
 *
 * @property {array} [connectionStrings] An array that contains the connection
 * strings for the Cosmos DB account.
 */
export interface DatabaseAccountListConnectionStringsResult {
  connectionStrings?: DatabaseAccountConnectionString[];
}

/**
 * @class
 * Initializes a new instance of the DatabaseAccountRegenerateKeyParameters class.
 * @constructor
 * Parameters to regenerate the keys within the database account.
 *
 * @property {string} keyKind The access key to regenerate. Possible values
 * include: 'primary', 'secondary', 'primaryReadonly', 'secondaryReadonly'
 */
export interface DatabaseAccountRegenerateKeyParameters {
  keyKind: string;
}

/**
 * @class
 * Initializes a new instance of the OperationDisplay class.
 * @constructor
 * The object that represents the operation.
 *
 * @property {string} [provider] Service provider: Microsoft.ResourceProvider
 * @property {string} [resource] Resource on which the operation is performed:
 * Profile, endpoint, etc.
 * @property {string} [operation] Operation type: Read, write, delete, etc.
 * @property {string} [description] Description of operation
 */
export interface OperationDisplay {
  provider?: string;
  resource?: string;
  operation?: string;
  description?: string;
}

/**
 * @class
 * Initializes a new instance of the Operation class.
 * @constructor
 * REST API operation
 *
 * @property {string} [name] Operation name: {provider}/{resource}/{operation}
 * @property {object} [display] The object that represents the operation.
 * @property {string} [display.provider] Service provider:
 * Microsoft.ResourceProvider
 * @property {string} [display.resource] Resource on which the operation is
 * performed: Profile, endpoint, etc.
 * @property {string} [display.operation] Operation type: Read, write, delete,
 * etc.
 * @property {string} [display.description] Description of operation
 */
export interface Operation {
  name?: string;
  display?: OperationDisplay;
}

/**
 * @class
 * Initializes a new instance of the MetricName class.
 * @constructor
 * A metric name.
 *
 * @property {string} [value] The name of the metric.
 * @property {string} [localizedValue] The friendly name of the metric.
 */
export interface MetricName {
  readonly value?: string;
  readonly localizedValue?: string;
}

/**
 * @class
 * Initializes a new instance of the Usage class.
 * @constructor
 * The usage data for a usage request.
 *
 * @property {string} [unit] The unit of the metric. Possible values include:
 * 'Count', 'Bytes', 'Seconds', 'Percent', 'CountPerSecond', 'BytesPerSecond',
 * 'Milliseconds'
 * @property {object} [name] The name information for the metric.
 * @property {string} [name.value] The name of the metric.
 * @property {string} [name.localizedValue] The friendly name of the metric.
 * @property {string} [quotaPeriod] The quota period used to summarize the
 * usage values.
 * @property {number} [limit] Maximum value for this metric
 * @property {number} [currentValue] Current value for this metric
 */
export interface Usage {
  unit?: string;
  readonly name?: MetricName;
  readonly quotaPeriod?: string;
  readonly limit?: number;
  readonly currentValue?: number;
}

/**
 * @class
 * Initializes a new instance of the PartitionUsage class.
 * @constructor
 * The partition level usage data for a usage request.
 *
 * @property {string} [partitionId] The parition id (GUID identifier) of the
 * usages.
 * @property {string} [partitionKeyRangeId] The partition key range id (integer
 * identifier) of the usages.
 */
export interface PartitionUsage extends Usage {
  readonly partitionId?: string;
  readonly partitionKeyRangeId?: string;
}

/**
 * @class
 * Initializes a new instance of the MetricAvailability class.
 * @constructor
 * The availability of the metric.
 *
 * @property {string} [timeGrain] The time grain to be used to summarize the
 * metric values.
 * @property {string} [retention] The retention for the metric values.
 */
export interface MetricAvailability {
  readonly timeGrain?: string;
  readonly retention?: string;
}

/**
 * @class
 * Initializes a new instance of the MetricDefinition class.
 * @constructor
 * The definition of a metric.
 *
 * @property {array} [metricAvailabilities] The list of metric availabilities
 * for the account.
 * @property {string} [primaryAggregationType] The primary aggregation type of
 * the metric. Possible values include: 'None', 'Average', 'Total',
 * 'Minimimum', 'Maximum', 'Last'
 * @property {string} [unit] The unit of the metric. Possible values include:
 * 'Count', 'Bytes', 'Seconds', 'Percent', 'CountPerSecond', 'BytesPerSecond',
 * 'Milliseconds'
 * @property {string} [resourceUri] The resource uri of the database.
 * @property {object} [name] The name information for the metric.
 * @property {string} [name.value] The name of the metric.
 * @property {string} [name.localizedValue] The friendly name of the metric.
 */
export interface MetricDefinition {
  readonly metricAvailabilities?: MetricAvailability[];
  readonly primaryAggregationType?: string;
  unit?: string;
  readonly resourceUri?: string;
  readonly name?: MetricName;
}

/**
 * @class
 * Initializes a new instance of the MetricValue class.
 * @constructor
 * Represents metrics values.
 *
 * @property {number} [_count] The number of values for the metric.
 * @property {number} [average] The average value of the metric.
 * @property {number} [maximum] The max value of the metric.
 * @property {number} [minimum] The min value of the metric.
 * @property {date} [timestamp] The metric timestamp (ISO-8601 format).
 * @property {number} [total] The total value of the metric.
 */
export interface MetricValue {
  readonly _count?: number;
  readonly average?: number;
  readonly maximum?: number;
  readonly minimum?: number;
  readonly timestamp?: Date;
  readonly total?: number;
}

/**
 * @class
 * Initializes a new instance of the Metric class.
 * @constructor
 * Metric data
 *
 * @property {date} [startTime] The start time for the metric (ISO-8601
 * format).
 * @property {date} [endTime] The end time for the metric (ISO-8601 format).
 * @property {string} [timeGrain] The time grain to be used to summarize the
 * metric values.
 * @property {string} [unit] The unit of the metric. Possible values include:
 * 'Count', 'Bytes', 'Seconds', 'Percent', 'CountPerSecond', 'BytesPerSecond',
 * 'Milliseconds'
 * @property {object} [name] The name information for the metric.
 * @property {string} [name.value] The name of the metric.
 * @property {string} [name.localizedValue] The friendly name of the metric.
 * @property {array} [metricValues] The metric values for the specified time
 * window and timestep.
 */
export interface Metric {
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly timeGrain?: string;
  unit?: string;
  readonly name?: MetricName;
  readonly metricValues?: MetricValue[];
}

/**
 * @class
 * Initializes a new instance of the PercentileMetricValue class.
 * @constructor
 * Represents percentile metrics values.
 *
 * @property {number} [p10] The 10th percentile value for the metric.
 * @property {number} [p25] The 25th percentile value for the metric.
 * @property {number} [p50] The 50th percentile value for the metric.
 * @property {number} [p75] The 75th percentile value for the metric.
 * @property {number} [p90] The 90th percentile value for the metric.
 * @property {number} [p95] The 95th percentile value for the metric.
 * @property {number} [p99] The 99th percentile value for the metric.
 */
export interface PercentileMetricValue extends MetricValue {
  readonly p10?: number;
  readonly p25?: number;
  readonly p50?: number;
  readonly p75?: number;
  readonly p90?: number;
  readonly p95?: number;
  readonly p99?: number;
}

/**
 * @class
 * Initializes a new instance of the PercentileMetric class.
 * @constructor
 * Percentile Metric data
 *
 * @property {date} [startTime] The start time for the metric (ISO-8601
 * format).
 * @property {date} [endTime] The end time for the metric (ISO-8601 format).
 * @property {string} [timeGrain] The time grain to be used to summarize the
 * metric values.
 * @property {string} [unit] The unit of the metric. Possible values include:
 * 'Count', 'Bytes', 'Seconds', 'Percent', 'CountPerSecond', 'BytesPerSecond',
 * 'Milliseconds'
 * @property {object} [name] The name information for the metric.
 * @property {string} [name.value] The name of the metric.
 * @property {string} [name.localizedValue] The friendly name of the metric.
 * @property {array} [metricValues] The percentile metric values for the
 * specified time window and timestep.
 */
export interface PercentileMetric {
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly timeGrain?: string;
  unit?: string;
  readonly name?: MetricName;
  readonly metricValues?: PercentileMetricValue[];
}

/**
 * @class
 * Initializes a new instance of the PartitionMetric class.
 * @constructor
 * The metric values for a single partition.
 *
 * @property {string} [partitionId] The parition id (GUID identifier) of the
 * metric values.
 * @property {string} [partitionKeyRangeId] The partition key range id (integer
 * identifier) of the metric values.
 */
export interface PartitionMetric extends Metric {
  readonly partitionId?: string;
  readonly partitionKeyRangeId?: string;
}


/**
 * @class
 * Initializes a new instance of the DatabaseAccountsListResult class.
 * @constructor
 * The List operation response, that contains the database accounts and their
 * properties.
 *
 */
export interface DatabaseAccountsListResult extends Array<DatabaseAccount> {
}

/**
 * @class
 * Initializes a new instance of the MetricListResult class.
 * @constructor
 * The response to a list metrics request.
 *
 */
export interface MetricListResult extends Array<Metric> {
}

/**
 * @class
 * Initializes a new instance of the UsagesResult class.
 * @constructor
 * The response to a list usage request.
 *
 */
export interface UsagesResult extends Array<Usage> {
}

/**
 * @class
 * Initializes a new instance of the MetricDefinitionsListResult class.
 * @constructor
 * The response to a list metric definitions request.
 *
 */
export interface MetricDefinitionsListResult extends Array<MetricDefinition> {
}

/**
 * @class
 * Initializes a new instance of the OperationListResult class.
 * @constructor
 * Result of the request to list Resource Provider operations. It contains a
 * list of operations and a URL link to get the next set of results.
 *
 * @property {string} [nextLink] URL to get the next set of operation list
 * results if there are any.
 */
export interface OperationListResult extends Array<Operation> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the PercentileMetricListResult class.
 * @constructor
 * The response to a list percentile metrics request.
 *
 */
export interface PercentileMetricListResult extends Array<PercentileMetric> {
}

/**
 * @class
 * Initializes a new instance of the PartitionMetricListResult class.
 * @constructor
 * The response to a list partition metrics request.
 *
 */
export interface PartitionMetricListResult extends Array<PartitionMetric> {
}

/**
 * @class
 * Initializes a new instance of the PartitionUsagesResult class.
 * @constructor
 * The response to a list partition level usage request.
 *
 */
export interface PartitionUsagesResult extends Array<PartitionUsage> {
}
